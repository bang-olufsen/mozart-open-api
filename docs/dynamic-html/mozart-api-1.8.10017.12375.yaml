components:
    parameters:
        ListeningModeID:
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/ListeningModeID'
        SourceId:
            in: path
            name: id
            required: true
            schema:
                type: string
    responses:
        BadListeningMode:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorModel'
            description: Invalid listening mode
        BeolinkExperiencesResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BeolinkExperiencesRequest'
            description: 'Scanning current experiences. This operation is asynchronous.
                You can

                check the results by matching the `requestID` in the response with
                that

                of the `` web socket event.

                '
        BeolinkJoinResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BeolinkJoinRequest'
            description: 'Join started


                Joining always happens asynchronously, use the `requestID` field in

                the response to match your request with a

                `WebsocketEventBeolinkJoinResult` web socket event.

                '
        MicrophoneMuted:
            description: Action can not be completed since microphone is muted
        MissingListeningMode:
            description: No such listening mode
        Redirect:
            description: Redirect to another resource
            headers:
                Location:
                    description: URL of the other resource
                    schema:
                        format: uri
                        type: string
        WrongRoomCompensationType:
            description: The requested room compensation type is not supported
    schemas:
        Action:
            description: "An action object. Examples:\n\nRadioAction:\n```json\n{\n\
                \  \"type\": \"radio\",\n  \"radioStationId\": \"8779112938791514\"\
                \n}\n```\n\nToneAction:\n```json\n{\n  \"type\": \"tone\",\n  \"toneName\"\
                : \"alarm_2\"\n}\n```\n\nSourcePresetAction:\n```json\n{\n  \"type\"\
                : \"sourcePreset\",\n  \"source\": {\n    \"value\": \"spotify\"\n\
                \  },\n  \"presetKey\": \"Preset3\"\n}\n```\n\nDeezerFlowAction:\n\
                ```json\n{\n  \"type\": \"deezerFlow\",\n  \"deezerUserId\": \"1234\"\
                \n}\n```\n\nActivateSourceAction:\n```json\n{\n  \"type\": \"activateSource\"\
                ,\n  \"source\": {\n    \"value\": \"spotify\"\n  }\n}\n```\n\nPlayQueueAction:\n\
                ```\n  {\n    \"type\": \"playQueue\",\n    \"queueItem\": {\n   \
                \   \"provider\": {\n        \"value\": \"deezer\"\n      },\n   \
                \   \"startNowFromPosition\": 0,\n      \"type\": \"playlist\",\n\
                \      \"uri\": \"playlist:8074581462\"\n    },\n    \"queueSettings\"\
                : {\n      \"consume\": false,\n      \"repeat\": \"none\",\n    \
                \  \"shuffle\": false\n    }\n  }\n```\n\nStandbyAction:\n```json\n\
                {\n  \"type\": \"standby\"\n}\n```\n\nAllStandbyAction:\n```json\n\
                {\n  \"type\": \"allStandby\"\n}\n```\n\nTouchToJoinAction:\n```json\n\
                {\n  \"type\": \"touchToJoin\"\n}\n```\n\nButtonShortPressAction:\n\
                ```json\n{\n  \"type\": \"buttonShortPress\",\n  \"buttonName\": \"\
                preset1\"\n}\n```\n\nFallbackAction:\n```json\n{\n  \"type\": \"fallback\"\
                \n}\n```\n\nVolumeAction:\n```json\n{\n  \"type\": \"volume\",\n \
                \ \"volumeLevel\": 25\n}\n```\n\nStopAction:\n```json\n{\n  \"type\"\
                : \"stop\",\n  \"stopDuration\": 1300\n}\n```\n"
            properties:
                buttonName:
                    description: Name of the Button used for button-press types ('buttonShortPress')
                    enum:
                    - microphone
                    - bluetooth
                    - next
                    - previous
                    - playPause
                    - previousNext
                    - preset1
                    - preset2
                    - preset3
                    - preset4
                    nullable: true
                    type: string
                deezerUserId:
                    description: Id of user only used for 'type=deezerFlow' and is
                        optional
                    format: '[0-9]+'
                    nullable: true
                    type: string
                presetKey:
                    description: Only used for 'type=sourcePreset'
                    format: ^Preset[0-9]+$
                    nullable: true
                    type: string
                queueItem:
                    $ref: '#/components/schemas/PlayQueueItem'
                    description: PlayQueue item only used for 'type=playQueue'
                    nullable: true
                queueSettings:
                    $ref: '#/components/schemas/PlayQueueSettings'
                    description: PlayQueue settings only used for 'type=playQueue'
                        and is optional
                    nullable: true
                radioStationId:
                    description: Id of RadioStation only used for 'type=radio'
                    format: '[0-9]+'
                    nullable: true
                    type: string
                source:
                    $ref: '#/components/schemas/SourceTypeEnum'
                    nullable: true
                stopDuration:
                    description: The duration to wait (seconds) until stopping only
                        used for 'type=stop'
                    format: int32
                    minimum: 0
                    nullable: true
                    type: integer
                toneName:
                    description: Name of the tone only used for 'type=tone'
                    enum:
                    - alarm_1
                    - alarm_2
                    nullable: true
                    type: string
                type:
                    description: The type of Action
                    enum:
                    - standby
                    - tone
                    - radio
                    - sourcePreset
                    - deezerFlow
                    - activateSource
                    - playQueue
                    - buttonShortPress
                    - allStandby
                    - touchToJoin
                    - fallback
                    - volume
                    - stop
                    type: string
                volumeLevel:
                    description: The volume level to configure only used for 'type=volume'
                    format: int32
                    maximum: 100
                    minimum: 0
                    nullable: true
                    type: integer
            required:
            - type
            type: object
        ActionList:
            description: An ordered list of Actions to run on the product
            example:
            -   type: volume
                volumeLevel: 35
            -   radioStationId: '8779112938791514'
                type: radio
            -   stopDuration: 1300
                type: stop
            items:
                $ref: '#/components/schemas/Action'
            type: array
        AirplayCredentials:
            properties:
                password:
                    $ref: '#/components/schemas/EncryptedText'
            type: object
        AirplayPasswordState:
            properties:
                set:
                    type: boolean
            type: object
        AlarmId:
            format: uuid
            type: string
        AlarmInstance:
            properties:
                actionList:
                    $ref: '#/components/schemas/ActionList'
                autoRepeat:
                    description: Whether the alarm repeats automatically or not
                    type: boolean
                enabled:
                    description: Whether or not the alarm is actually enabled
                    type: boolean
                id:
                    $ref: '#/components/schemas/AlarmId'
                    description: Unique ID tied to the Alarm - Generated by the product!
                    nullable: true
                label:
                    $ref: '#/components/schemas/AlarmLabel'
                schedule:
                    $ref: '#/components/schemas/AlarmSchedule'
            required:
            - enabled
            - autoRepeat
            - schedule
            - actionList
            type: object
        AlarmLabel:
            description: Label for an alarm
            maxLength: 128
            type: string
        AlarmSchedule:
            description: Object containing the time of day and day(s) of an alarm
            example:
                days:
                - sunday
                - saturday
                timeOfDay: 43200
            properties:
                days:
                    description: The days on which the alarm will trigger
                    items:
                        enum:
                        - sunday
                        - monday
                        - tuesday
                        - wednesday
                        - thursday
                        - friday
                        - saturday
                        type: string
                    minItems: 1
                    type: array
                    uniqueItems: true
                timeOfDay:
                    $ref: '#/components/schemas/TimeOfDaySeconds'
            required:
            - timeOfDay
            - days
            type: object
        AlarmToneList:
            description: List of alarmTones
            properties:
                alarmTones:
                    items:
                        $ref: '#/components/schemas/AlarmToneObject'
                    type: array
            type: object
        AlarmToneObject:
            description: AlarmTone
            type: string
        AlarmTriggeredInfo:
            properties:
                id:
                    $ref: '#/components/schemas/AlarmId'
                label:
                    $ref: '#/components/schemas/AlarmLabel'
            type: object
        AlarmsList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/AlarmInstance'
                    type: array
            type: object
        AlexaAuthMedata:
            properties:
                codeChallenge:
                    type: string
                deviceSerialNumber:
                    type: string
                productID:
                    type: string
            type: object
        AlexaAuthStateModel:
            properties:
                connectionState:
                    enum:
                    - notSet
                    - busy
                    - error
                    - done
                    type: string
                message:
                    type: string
            type: object
        AlexaAuthToken:
            properties:
                authorizationCode:
                    type: string
                clientId:
                    type: string
                redirectURI:
                    type: string
            type: object
        Ambience:
            properties:
                value:
                    description: Selected ambience value
                    format: double
                    type: number
            required:
            - value
            type: object
        AmbienceFeature:
            allOf:
            -   $ref: '#/components/schemas/Ambience'
            -   $ref: '#/components/schemas/AmbienceRange'
        AmbienceRange:
            properties:
                default:
                    $ref: '#/components/schemas/Ambience'
                    description: Product and role specific default ambience value
                range:
                    description: Product and role specific ambience range
                    items:
                        $ref: '#/components/schemas/Ambience'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        Art:
            properties:
                hasLocalImage:
                    type: boolean
                key:
                    type: string
                size:
                    type: string
                type:
                    type: string
                url:
                    type: string
            type: object
        AsyncResult:
            example: "{\n  \"status\": \"http://192.168.0.42/api/v1/product/info\"\
                \n}\n"
            properties:
                status:
                    description: URL to poll for async result
                    format: uri
                    type: string
            type: object
        BasicProductInfo:
            description: The collection of properties made available during initial
                wifi provisioning at the customer
            properties:
                networkStatus:
                    $ref: '#/components/schemas/NetworkStatusEnum'
                    description: 'The current connectivity status

                        '
                productTypeNumber:
                    description: 'The product type number retrieved from production
                        data.

                        '
                    type: string
            type: object
        BasicWirelessNetworkInformation:
            properties:
                rssiLevel:
                    format: int32
                    type: integer
                ssid:
                    type: string
            type: object
        Bass:
            properties:
                value:
                    description: Selected bass value
                    format: int32
                    type: integer
            required:
            - value
            type: object
        BassFeature:
            allOf:
            -   $ref: '#/components/schemas/Bass'
            -   $ref: '#/components/schemas/BassRange'
        BassRange:
            properties:
                default:
                    $ref: '#/components/schemas/Bass'
                    description: Product and role specific default bass value
                range:
                    description: Product and role specific bass range
                    items:
                        $ref: '#/components/schemas/Bass'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        BatteryState:
            properties:
                batteryLevel:
                    description: 'Batterylevel in percent

                        '
                    type: integer
                isCharging:
                    type: boolean
                remainingChargingTimeMinutes:
                    description: Remaining charging time in minutes
                    type: integer
                remainingPlayingTimeMinutes:
                    description: Remaining playing time in minutes
                    type: integer
            type: object
        Behavior:
            properties:
                actionList:
                    $ref: '#/components/schemas/ActionList'
                label:
                    type: string
            type: object
        BeoRemoteButton:
            properties:
                Key:
                    type: string
                Type:
                    enum:
                    - KeyPress
                    - KeyRelease
            type: object
        BeolinkAirplayAllowed:
            properties:
                allowed:
                    default: false
                    type: boolean
            required:
            - allowed
            type: object
        BeolinkAvailableListener:
            properties:
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            type: object
        BeolinkEnabled:
            properties:
                enabled:
                    default: true
                    type: boolean
            required:
            - enabled
            type: object
        BeolinkExperience:
            properties:
                category:
                    description: Source category
                    enum:
                    - TV
                    - RADIO
                    - MUSIC
                    - MEDIA
                    - UNKNOWN
                    type: string
                id:
                    description: experience id, e.g. "RADIO" or "toslink"
                    type: string
                linkable:
                    description: Linkable means "Does pressing play on this source
                        make sense"
                    type: boolean
                name:
                    description: Experience name, e.g. "Bluetooth" or "Bang & Olufsen
                        Radio"
                    type: string
                productFriendlyName:
                    description: Optional product friendly name
                    type: string
                sourceFriendlyName:
                    description: Optional friendly name for source
                    type: string
                type:
                    description: Source type. This corresponds to the exhaustive list
                        or sources provided by the control layer
                    type: string
                uniqueSourceId:
                    description: The actual device jabber id that the experience comes
                        from
                    type: string
            required:
            - id
            - name
            - type
            - category
            - uniqueSourceId
            - linkable
            type: object
        BeolinkExperiencesRequest:
            properties:
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
            required:
            - requestID
            type: object
        BeolinkExperiencesResult:
            properties:
                experiences:
                    items:
                        $ref: '#/components/schemas/BeolinkExperience'
                    type: array
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
                status:
                    description: 'Current scan status.

                        * busy: there is another scan in progress

                        * timeout: the scan timed out. The results will be partial

                        '
                    enum:
                    - ok
                    - busy
                    - timeout
                    type: string
            required:
            - requestID
            - status
            - experiences
            type: object
        BeolinkJoinRequest:
            properties:
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
                result:
                    description: Relative URL of the join result
                    format: uri
                    type: string
            required:
            - requestID
            - result
            type: object
        BeolinkJoinResult:
            properties:
                error:
                    description: Join error
                    enum:
                    - ok
                    - busy
                    - leaderless
                    - alone
                    - silent
                    - missing
                    - rejected
                    - timeout
                    type: string
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
                status:
                    description: Overall join status
                    enum:
                    - idle
                    - joined
                    - failed
                    type: string
                type:
                    description: The type of join request this is a result of
                    enum:
                    - join
                    - joinRequested
                    - expand
                    - expandRequested
                    type: string
            required:
            - requestID
            - status
            - jid
            - type
            type: object
        BeolinkLatency:
            properties:
                wiredMs:
                    type: integer
                wirelessMs:
                    type: integer
            type: object
        BeolinkLeader:
            properties:
                friendlyName:
                    type: string
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            - friendlyName
            type: object
        BeolinkListener:
            properties:
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            type: object
        BeolinkPeer:
            properties:
                friendlyName:
                    type: string
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            - friendlyName
            type: object
        BeolinkPeerID:
            description: Beolink peer ID
            example: 2714.1200304.26451293@products.bang-olufsen.com
            type: string
        BeolinkRequestID:
            description: Beolink request ID
            example: 48985a4f-a4de-4b44-9757-c9a7407b8882
            format: uuid
            type: string
        BeolinkSecurityBuffer:
            properties:
                bufferMs:
                    type: integer
            required:
            - bufferMs
            type: object
        BluetoothDevice:
            properties:
                address:
                    type: string
                connected:
                    type: boolean
                name:
                    type: string
            type: object
        BluetoothDeviceList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/BluetoothDevice'
                    type: array
            type: object
        BootLoaderInfo:
            properties:
                version:
                    type: string
            type: object
        ButtonEvent:
            properties:
                button:
                    description: identifies the button
                    type: string
                state:
                    description: identifies the state change
                    type: string
            type: object
        CastState:
            properties:
                setup:
                    type: boolean
                stereoPaired:
                    type: boolean
            required:
            - setup
            - stereoPaired
            type: object
        CastTosAcceptanceState:
            properties:
                accepted:
                    type: boolean
            type: object
        CastVersion:
            properties:
                version:
                    type: string
            type: object
        CurtainAngle:
            properties:
                value:
                    description: ~0-330 degrees (with physical limits)
                    format: uint32
                    type: number
        CurtainDebugLevel:
            properties:
                value:
                    description: 0=none, larger values increase verbosity
                    format: uint32
                    type: integer
        CurtainPosition:
            properties:
                value:
                    enum:
                    - none
                    - closed
                    - narrow
                    - wide
                    - custom
                    type: string
        CurtainStatus:
            properties:
                debugLevel:
                    format: uint32
                    type: integer
                maxAngleValid:
                    format: float
                    type: number
                minAngleValid:
                    format: float
                    type: number
                motor1Angle:
                    format: float
                    type: number
                motor2Angle:
                    format: float
                    type: number
                moving:
                    type: boolean
                position:
                    enum:
                    - none
                    - closed
                    - narrow
                    - wide
                    - custom
                    type: string
                targetAngle:
                    format: uint32
                    type: integer
                totalErrorCount:
                    format: uint32
                    type: number
            type: object
        DailyReboot:
            properties:
                enabled:
                    type: boolean
            type: object
        DiagnosticsBatteryValues:
            properties:
                batteryCapacityPercent:
                    description: 'The battery charge capacity compared to a new battery
                        in percent

                        '
                    format: float
                    type: number
                batteryLevelPercent:
                    description: 'The remaining power level of the battery in percent

                        '
                    format: float
                    type: number
                current:
                    description: 'The battery current in ampere

                        '
                    format: float
                    type: number
                cycleCount:
                    description: 'The number of charging cycles

                        '
                    type: integer
                deviceName:
                    description: 'The battery device name

                        '
                    type: string
                isPogoDetected:
                    description: 'Flag indicating whether the battery charger is using
                        pogo pins

                        '
                    type: boolean
                manufacturerDate:
                    description: 'The battery manufacturer date in format yyyy-M-d

                        '
                    type: string
                manufacturerName:
                    description: 'The battery manufacturer name

                        '
                    type: string
                remainingChargingTimeMinutes:
                    description: 'An estimated remaining charging time in minutes
                        at the current battery level

                        '
                    type: integer
                remainingPlayingTimeMinutes:
                    description: 'An estimated remaining playing time in minutes at
                        the current battery level

                        '
                    type: integer
                state:
                    description: 'The current battery state

                        '
                    enum:
                    - BatteryFull
                    - BatteryMedium
                    - BatteryLow
                    - BatteryVeryLow
                    - Charging
                    - ChargingInputError
                    - ChargingTemperatureError
                    - ChargingBatteryError
                    - BatteryNotPresent
                    type: string
                voltage:
                    description: 'The battery voltage in volt

                        '
                    format: float
                    type: number
            type: object
        DiagnosticsFlashLifetime:
            type: string
        DiagnosticsFlashValues:
            properties:
                lifetimeEstimationA:
                    $ref: '#/components/schemas/DiagnosticsFlashLifetime'
                lifetimeEstimationB:
                    $ref: '#/components/schemas/DiagnosticsFlashLifetime'
                preEolInformation:
                    enum:
                    - unknown
                    - normal
                    - aging
                    - urgent
                    - reserved
                    type: string
            type: object
        DiagnosticsNtcValue:
            properties:
                id:
                    type: string
                name:
                    type: string
                value:
                    type: number
            type: object
        DiagnosticsNtcValueArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/DiagnosticsNtcValue'
                    type: array
        Directivity:
            properties:
                value:
                    enum:
                    - front
                    - left
                    - right
                    - omni
                    - narrow
                    - wide
                    - standalone
                    type: string
            required:
            - value
            type: object
        DirectivityFeature:
            allOf:
            -   $ref: '#/components/schemas/Directivity'
            -   $ref: '#/components/schemas/DirectivityRange'
        DirectivityRange:
            properties:
                default:
                    $ref: '#/components/schemas/Directivity'
                    description: Product and role specific default directivity value
                range:
                    description: Product and role specific list of directivities
                    items:
                        $ref: '#/components/schemas/Directivity'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        EcoMode:
            properties:
                value:
                    type: boolean
        EncryptedText:
            type: string
        ErrorModel:
            description: the general error model
            properties:
                errorCode:
                    description: 'A wellknown code that signal the error, can be used
                        by callers

                        '
                    type: string
                errorId:
                    description: 'A unique identifier used to e.g. quick find in logs

                        '
                    type: string
                errorMessage:
                    description: 'A textual representation, human readable and suitable
                        for logs

                        '
                    type: string
            type: object
        FadeIn:
            properties:
                value:
                    type: boolean
        FepInfo:
            properties:
                version:
                    type: string
            type: object
        GeneratorSettings:
            properties:
                frequency:
                    format: double
                    type: number
                waveForm:
                    enum:
                    - sine
                    - square
                    - saw
                    - triangle
                    - silence
                    - whiteNoise
                    - pinkNoise
                    - sineTable
                    - ticks
                    - gaussianNoise
                    - redNoise
                    - blueNoise
                    - violetNoise
                    type: string
            type: object
        HasToken:
            properties:
                hasToken:
                    type: boolean
            type: object
        IPv4:
            description: IPv4 address
            example: 192.168.0.101
            format: ipv4
            type: string
        IpV4Info:
            properties:
                alternativeDns:
                    type: string
                defaultGateway:
                    type: string
                ipAddress:
                    type: string
                isDhcp:
                    type: boolean
                preferredDns:
                    type: string
                subnetMask:
                    type: string
            type: object
        Latency:
            properties:
                ns:
                    type: number
            type: object
        LatencyRangeVal:
            properties:
                max:
                    type: number
                min:
                    type: number
                val:
                    type: number
            type: object
        LightSensorSettings:
            properties:
                disabled:
                    type: boolean
            type: object
        LineInSettings:
            properties:
                delayMs:
                    description: Desired line-in delay in milliseconds
                    type: integer
                lineinSensitivity:
                    enum:
                    - high
                    - medium
                    - low
                    - disabled
                    type: string
            type: object
        LineInStateEnum:
            properties:
                value:
                    enum:
                    - disconnected
                    - connected
                    - audio
                    - spdif
                    type: string
        ListeningMode:
            allOf:
            -   $ref: '#/components/schemas/ListeningModeProps'
            example:
                features:
                    ambience:
                        value: 0.5
                    directivity:
                        value: omni
                    roomCompensation:
                        value:
                        - internal
                    toneTouch:
                        x: 0
                        y: 0
                id: 1
                name: Optimal
                role: standalone
                triggers: []
            required:
            - features
            - id
            - name
            - role
            - triggers
        ListeningModeFeatures:
            description: Sound features to apply
            properties:
                ambience:
                    $ref: '#/components/schemas/Ambience'
                directivity:
                    $ref: '#/components/schemas/Directivity'
                roomCompensation:
                    $ref: '#/components/schemas/RoomCompensation'
                toneTouch:
                    $ref: '#/components/schemas/ToneTouch'
            type: object
        ListeningModeID:
            format: uint32
            type: integer
        ListeningModeProps:
            properties:
                features:
                    $ref: '#/components/schemas/ListeningModeFeatures'
                id:
                    $ref: '#/components/schemas/ListeningModeID'
                name:
                    description: Friendly name
                    type: string
                role:
                    description: Role a listening mode applies to
                    enum:
                    - standalone
                    - multichannel
                    type: string
                triggers:
                    items:
                        $ref: '#/components/schemas/ListeningModeTrigger'
                    type: array
            type: object
        ListeningModeRef:
            description: Reference to a listening mode
            properties:
                href:
                    description: 'Host relative URI of the listening mode or `null`
                        if there is no

                        active listening mode.

                        '
                    format: uri
                    nullable: true
                    type: string
                id:
                    description: 'ID of the active listening mode or `null` if there
                        is no active

                        listening mode.

                        '
                    format: uint32
                    nullable: true
                    type: integer
            required:
            - id
            - href
            type: object
        ListeningModeSet:
            items:
                allOf:
                -   $ref: '#/components/schemas/ListeningMode'
            type: array
        ListeningModeTrigger:
            oneOf:
            -   $ref: '#/components/schemas/PowerLinkTrigger'
        ListeningModeUpdate:
            oneOf:
            -   $ref: '#/components/schemas/ListeningModeProps'
        Locale:
            properties:
                locale:
                    type: string
            type: object
        LockState:
            properties:
                state:
                    enum:
                    - locked
                    - unlocked
                    type: string
            type: object
        LockedAPI:
            description: API is locked
            properties:
                message:
                    type: string
            type: object
        LogLevelSetting:
            properties:
                area:
                    description: application name or "all" for all applications
                    type: string
                expiry:
                    description: currently ignored
                    format: date-time
                    type: string
                level:
                    enum:
                    - trace
                    - debug
                    - info
                    - notice
                    - warning
                    - error
                    - critical
                    - 'off'
                    type: string
            type: object
        LogLevelSettings:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/LogLevelSetting'
                    type: array
        LogUploadData:
            properties:
                description:
                    type: string
                sessionKey:
                    type: string
            type: object
        Loudness:
            properties:
                value:
                    type: boolean
        MicrophoneRecordingState:
            properties:
                state:
                    type: boolean
            type: object
        MicrophoneState:
            properties:
                value:
                    enum:
                    - 'on'
                    - 'off'
                    type: string
            type: object
        MicrophonesState:
            description: state of microphones, both physical switches and software
                state
            properties:
                microphoneState:
                    $ref: '#/components/schemas/MicrophoneState'
                microphoneSwitchState:
                    $ref: '#/components/schemas/MicrophoneState'
            type: object
        MozartResult:
            properties:
                message:
                    type: string
                result:
                    type: boolean
            type: object
        MultiroomSettings:
            properties:
                provider:
                    enum:
                    - chromecast
                    - beolink
                    type: string
            type: object
        NamedMacAddress:
            description: The mac address for a named networkinterface
            properties:
                mac:
                    description: the mac address, formatted like 00:11:22:33:44:55
                    type: string
                name:
                    description: name of the interface, e.g. ehternet, bluetooth,
                        wlanSta, wlanAp1, wlanAp2
                    type: string
            type: object
        NamedMacAddressList:
            properties:
                macAddresses:
                    items:
                        $ref: '#/components/schemas/NamedMacAddress'
                    type: array
            type: object
        NetRadioPreset:
            properties:
                stationId:
                    type: string
            required:
            - stationId
            type: object
        NetRadioStation:
            properties:
                stationId:
                    description: 'The unique station id

                        '
                    type: string
                streamUrl:
                    description: 'The url to the station stream

                        '
                    type: string
                title:
                    description: 'The station display title

                        '
                    type: string
            type: object
        NetworkConfig:
            description: The static network configuration. Only relevant for manual
                configuration
            properties:
                address:
                    type: string
                alternateDns:
                    type: string
                gateway:
                    type: string
                mask:
                    type: string
                preferredDns:
                    type: string
        NetworkMethodEnum:
            description: The method used to configure the network device
            properties:
                value:
                    enum:
                    - manual
                    - dhcp
                    type: string
        NetworkStatus:
            properties:
                activeInterface:
                    enum:
                    - unknown
                    - none
                    - wired
                    - wireless
                    type: string
                wired:
                    $ref: '#/components/schemas/WiredNetworkStatus'
                wireless:
                    $ref: '#/components/schemas/WirelessNetworkStatus'
            type: object
        NetworkStatusEnum:
            properties:
                value:
                    enum:
                    - unknown
                    - inactive
                    - disconnected
                    - connected
                    type: string
        NewListeningMode:
            example:
                features:
                    ambience:
                        value: 0.6
                    directivity:
                        value: wide
                id: 42
                name: Movie
                role: multichannel
                triggers:
                -   powerLinkPreset: 1
            oneOf:
            -   $ref: '#/components/schemas/ListeningModeProps'
            required:
            - features
            - id
            - name
            - role
        NewResource:
            description: Reference to a new resource
            properties:
                href:
                    format: uri
                    type: string
            required:
            - href
            type: object
        NotificationOnBoot:
            properties:
                enabled:
                    type: boolean
            type: object
        NumberOfAllowedAlarms:
            properties:
                value:
                    type: integer
            type: object
        OnOffState:
            properties:
                value:
                    enum:
                    - 'on'
                    - 'off'
                    type: string
        PairedRemote:
            properties:
                address:
                    type: string
                name:
                    type: string
            required:
            - address
            - name
            type: object
        PairedRemoteList:
            items:
                $ref: '#/components/schemas/PairedRemote'
            type: array
        PairedRemoteResponse:
            properties:
                items:
                    $ref: '#/components/schemas/PairedRemoteList'
        PcbRevision:
            properties:
                pcb:
                    type: string
                revision:
                    type: string
            type: object
        PcbRevisionArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/PcbRevision'
                    type: array
        PlacementEnum:
            properties:
                value:
                    enum:
                    - unknown
                    - standing
                    - flat
                    - wall
                    type: string
        PlayQueueId:
            properties:
                id:
                    $ref: '#/components/schemas/PlayQueueIdType'
                    nullable: true
            type: object
        PlayQueueIdType:
            format: uuid
            type: string
        PlayQueueItem:
            properties:
                index:
                    format: int32
                    type: integer
                metadata:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
                    nullable: true
                provider:
                    $ref: '#/components/schemas/PlayQueueItemType'
                startNowFromPosition:
                    description: Start playing specified track as soon as possible.
                        This works for any type, for `track` set to 0 and for `playlist`
                        specify the wanted track from position 0
                    format: int32
                    nullable: true
                    type: integer
                type:
                    enum:
                    - track
                    - playlist
                    type: string
                uri:
                    description: This can be url, track id, playlist id, radio id
                        and suchlike
                    type: string
            required:
            - provider
            - type
            - uri
            type: object
        PlayQueueItemArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/PlaybackContentMetadata'
                    type: array
        PlayQueueItemType:
            properties:
                value:
                    enum:
                    - uri
                    - dlna
                    - radio
                    - deezer
                    - beoCloud
                    type: string
            required:
            - value
        PlayQueueSettings:
            properties:
                consume:
                    type: boolean
                gapless:
                    type: boolean
                repeat:
                    enum:
                    - all
                    - track
                    - none
                    type: string
                shuffle:
                    type: boolean
        PlaybackContentMetadata:
            properties:
                albumName:
                    type: string
                art:
                    items:
                        $ref: '#/components/schemas/Art'
                    type: array
                artistName:
                    type: string
                bitdepth:
                    format: int32
                    type: integer
                bitrate:
                    format: int32
                    type: integer
                containerName:
                    type: string
                encoding:
                    enum:
                    - pcm
                    - wav
                    - mp3
                    - oggvorbis
                    - aac
                    - flac
                    - sbc
                    - alac
                    - opus
                    - unknown
                    type: string
                genre:
                    type: string
                id:
                    type: integer
                organization:
                    type: string
                queueId:
                    $ref: '#/components/schemas/PlayQueueIdType'
                remoteLeader:
                    $ref: '#/components/schemas/BeolinkLeader'
                remoteSource:
                    nullable: true
                    type: string
                samplerate:
                    format: int32
                    type: integer
                source:
                    type: string
                sourceInternalId:
                    type: string
                title:
                    type: string
                totalDuration:
                    description: to be removed once all devices and apps are updated
                    format: int32
                    nullable: true
                    type: integer
                totalDurationSeconds:
                    format: int32
                    nullable: true
                    type: integer
                track:
                    format: int32
                    type: integer
                trackCount:
                    format: int32
                    type: integer
                uri:
                    type: string
            type: object
        PlaybackError:
            properties:
                error:
                    type: string
                item:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
            type: object
        PlaybackProgress:
            properties:
                id:
                    type: string
                progress:
                    format: int32
                    type: integer
                totalDuration:
                    format: int32
                    nullable: true
                    type: integer
            type: object
        PlaybackState:
            properties:
                metadata:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
                progress:
                    $ref: '#/components/schemas/PlaybackProgress'
                source:
                    $ref: '#/components/schemas/Source'
                state:
                    $ref: '#/components/schemas/RenderingState'
            type: object
        PowerDeliveryInfo:
            properties:
                version:
                    type: string
            type: object
        PowerLinkSettings:
            description: PowerLink settings
            properties:
                audio-latency-ms:
                    description: desired latency from input to output, can also be
                        adjusted from PowerLink
                    format: int32
                    type: integer
                channel-select:
                    description: audio channels used from PowerLink cable, default=left
                    enum:
                    - left
                    - right
                    - stereo
                    type: string
                disabled:
                    type: boolean
            type: object
        PowerLinkStatus:
            properties:
                audio-latency-ms:
                    description: actual latency from input to output
                    format: int32
                    type: integer
                state:
                    enum:
                    - disabled
                    - disconnected
                    - connected
                    - playing
                    - paused
                    type: string
            type: object
        PowerLinkTrigger:
            properties:
                powerLinkPreset:
                    description: PowerLink preset
                    type: integer
            type: object
        PowerStateEnum:
            properties:
                value:
                    enum:
                    - networkStandby
                    - 'on'
                    - standby
                    - shutdown
                    - storage
                    type: string
        Preset:
            properties:
                actionList:
                    $ref: '#/components/schemas/ActionList'
                    nullable: true
                id:
                    type: string
                name:
                    nullable: true
                    type: string
                source:
                    $ref: '#/components/schemas/SourceTypeEnum'
                    nullable: true
                title:
                    type: string
            type: object
        PresetMap:
            additionalProperties:
                $ref: '#/components/schemas/Preset'
            type: object
        ProductApple:
            properties:
                homeApp:
                    description: Set to true if product is added to Apple Home app
                    type: boolean
            type: object
        ProductCountryList:
            properties:
                items:
                    items:
                        type: string
                    type: array
        ProductCurtainPosition:
            properties:
                value:
                    enum:
                    - closed
                    - narrow
                    - wide
                    type: string
        ProductCurtainStatus:
            properties:
                moving:
                    type: boolean
                position:
                    enum:
                    - unknown
                    - closed
                    - narrow
                    - wide
                    type: string
        ProductDateTimeSetup:
            properties:
                currenttime:
                    format: datetime
                    type: string
                datetime:
                    type: string
                timezone:
                    type: string
            type: object
        ProductEncryptionInfo:
            properties:
                algorithm:
                    type: string
                keyLength:
                    format: int32
                    type: integer
                publicKey:
                    type: string
            type: object
        ProductEnvironment:
            properties:
                environment:
                    enum:
                    - live
                    - integration
                    - development
                    type: string
            type: object
        ProductFriendlyName:
            properties:
                friendlyName:
                    description: 'The friendly name of the product, assignable by
                        the end user, e.g. ''Kitchen speaker''

                        '
                    type: string
            type: object
        ProductInformation:
            properties:
                apple:
                    $ref: '#/components/schemas/ProductApple'
                bootloader:
                    $ref: '#/components/schemas/BootLoaderInfo'
                encryptionInfo:
                    $ref: '#/components/schemas/ProductEncryptionInfo'
                fep:
                    $ref: '#/components/schemas/FepInfo'
                name:
                    $ref: '#/components/schemas/ProductFriendlyName'
                pcbRevisions:
                    $ref: '#/components/schemas/PcbRevisionArray'
                powerDelivery:
                    $ref: '#/components/schemas/PowerDeliveryInfo'
                production:
                    $ref: '#/components/schemas/ProductionStatusInformation'
                touch:
                    $ref: '#/components/schemas/TouchInfo'
            type: object
        ProductLicenseArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/ProductLicenseEntry'
                    type: array
        ProductLicenseEntry:
            properties:
                licenseString:
                    type: string
                licenses:
                    items:
                        $ref: '#/components/schemas/ProductLicenseItem'
                    type: array
                name:
                    type: string
                version:
                    type: string
            type: object
        ProductLicenseItem:
            properties:
                link:
                    type: string
                name:
                    type: string
            type: object
        ProductMode:
            properties:
                mode:
                    enum:
                    - normal
                    - shop
                    type: string
            type: object
        ProductRegionalSetup:
            properties:
                country:
                    type: string
            type: object
        ProductState:
            properties:
                microphones:
                    $ref: '#/components/schemas/MicrophonesState'
                playback:
                    $ref: '#/components/schemas/PlaybackState'
                powerState:
                    $ref: '#/components/schemas/PowerStateEnum'
                softwareUpdateState:
                    $ref: '#/components/schemas/SoftwareUpdateState'
                soundSettings:
                    $ref: '#/components/schemas/SoundSettings'
                source:
                    $ref: '#/components/schemas/Source'
                volume:
                    $ref: '#/components/schemas/VolumeState'
            type: object
        ProductTimeZoneList:
            properties:
                items:
                    items:
                        type: string
                    type: array
        ProductionAudioPathChannel:
            properties:
                id:
                    description: identifier for the individual channel
                    type: string
                muted:
                    type: boolean
            type: object
        ProductionAudioPathChannels:
            properties:
                channels:
                    items:
                        $ref: '#/components/schemas/ProductionAudioPathChannel'
                    type: array
            type: object
        ProductionAutoCalibrationInfo:
            properties:
                status:
                    enum:
                    - unknown
                    - notStarted
                    - running
                    - done
                    - error
                    type: string
                values:
                    items:
                        $ref: '#/components/schemas/ProductionAutoCalibrationType'
                    type: array
            type: object
        ProductionAutoCalibrationType:
            properties:
                id:
                    type: string
                values:
                    items:
                        $ref: '#/components/schemas/ProductionAutoCalibrationValue'
                    type: array
            type: object
        ProductionAutoCalibrationValue:
            properties:
                id:
                    type: string
                value:
                    format: double
                    type: number
            type: object
        ProductionCalibrationInfo:
            properties:
                id:
                    type: string
                value:
                    format: double
                    type: number
            type: object
        ProductionCalibrationInfoArray:
            properties:
                values:
                    items:
                        $ref: '#/components/schemas/ProductionCalibrationInfo'
                    type: array
            type: object
        ProductionCalibrationUpdate:
            properties:
                value:
                    format: double
                    type: number
            type: object
        ProductionCurtainCalibrationInfo:
            properties:
                status:
                    enum:
                    - unknown
                    - running
                    - done
                    - error
                    type: string
                values:
                    items:
                        type: integer
                    type: array
            type: object
        ProductionStatusInformation:
            properties:
                hardwareRevision:
                    type: string
                itemNumber:
                    type: string
                macAddresses:
                    $ref: '#/components/schemas/NamedMacAddressList'
                    description: The list of named mac addresses, typically used in
                        a service/troubleshooting scenario
                productDefaultName:
                    description: default name for the product type, e.g. BeoSound
                        1
                    type: string
                productionSite:
                    description: a name signalling where this device was produced
                    type: string
                productionTimestamp:
                    description: the date and time (in UTC) of the production of this
                        product
                    type: string
                serialNumber:
                    type: string
                typeNumber:
                    type: string
                wifiCountryCode:
                    type: string
            type: object
        ProductionTestingAudioPathMicrophoneArray:
            items:
                $ref: '#/components/schemas/ProductionTestingAudioPathMicrophoneState'
            type: array
        ProductionTestingAudioPathMicrophoneState:
            properties:
                id:
                    type: string
                isLoopbackEnabled:
                    type: boolean
                isRecording:
                    type: boolean
            type: object
        ProductionTestingAudioPathMicrophoneStateRecording:
            description: any recording available for the microphone
            format: binary
            type: string
        ProductionTestingAudioPathMicrophoneStateUpdate:
            properties:
                isLoopbackEnabled:
                    type: boolean
                isRecording:
                    type: boolean
            type: object
        ProductionTestingAudioPathProcessingByPass:
            properties:
                steps:
                    items:
                        $ref: '#/components/schemas/ProductionTestingAudioPathProcessingStepByPass'
                    type: array
            type: object
        ProductionTestingAudioPathProcessingMode:
            properties:
                value:
                    enum:
                    - normal
                    - simpleCrossOver
                    - passthroughFromLeftInput
                    type: string
        ProductionTestingAudioPathProcessingStepByPass:
            properties:
                enabled:
                    type: boolean
                id:
                    type: string
                name:
                    type: string
            type: object
        ProductionTestingBatteryLevelMax:
            properties:
                level:
                    description: value in percent
                    format: uint32
                    maximum: 100
                    minimum: 1
                    type: integer
            type: object
        ProductionTestingButton:
            properties:
                press:
                    enum:
                    - short
                    - long
                    - verylong
                    type: string
            type: object
        ProductionTestingButtonStatus:
            properties:
                sensitivity:
                    format: uint32
                    type: integer
                statusMask:
                    format: uint32
                    type: integer
            type: object
        ProductionTestingIOLEDUpdate:
            properties:
                color:
                    type: string
                enabled:
                    type: boolean
            type: object
        ProductionTestingInterfaceInfo:
            properties:
                name:
                    type: string
                operation:
                    type: string
            type: object
        ProductionTestingLightSensorResult:
            properties:
                lux:
                    format: uint32
                    type: integer
            type: object
        ProductionTestingProximityResult:
            properties:
                presence:
                    type: boolean
                range:
                    format: uint32
                    type: integer
                ranges:
                    items:
                        format: uint32
                        type: integer
                    type: array
            type: object
        ProductionTestingSelfTestErrorMessage:
            properties:
                device:
                    type: string
                message:
                    type: string
            type: object
        ProductionTestingSelfTestIndividualResult:
            properties:
                errorMessages:
                    items:
                        $ref: '#/components/schemas/ProductionTestingSelfTestErrorMessage'
                    nullable: true
                    type: array
                identifier:
                    type: string
                result:
                    type: boolean
            required:
            - identifier
            - result
            type: object
        ProductionTestingSelfTestResult:
            properties:
                testResults:
                    items:
                        $ref: '#/components/schemas/ProductionTestingSelfTestIndividualResult'
                    type: array
            type: object
        ProximitySettings:
            properties:
                disabled:
                    type: boolean
            type: object
        RemoteLists:
            properties:
                remoteLists:
                    $ref: '#/components/schemas/RemoteListsValue'
            required:
            - remoteLists
            type: object
        RemoteListsValue:
            properties:
                isEditable:
                    type: boolean
                value:
                    items:
                        enum:
                        - tv
                        - music
                        type: string
                    type: array
            required:
            - value
            type: object
        RenderingState:
            properties:
                value:
                    enum:
                    - idle
                    - buffering
                    - started
                    - paused
                    - stopped
                    - ended
                    - error
                    - unknown
                    type: string
        RoomCompensation:
            properties:
                value:
                    $ref: '#/components/schemas/RoomCompensationValue'
            required:
            - value
            type: object
        RoomCompensationDebug:
            properties:
                value:
                    type: boolean
        RoomCompensationEnabled:
            properties:
                value:
                    type: boolean
        RoomCompensationFeature:
            allOf:
            -   $ref: '#/components/schemas/RoomCompensation'
            -   $ref: '#/components/schemas/RoomCompensationRange'
        RoomCompensationInfo:
            properties:
                debug:
                    $ref: '#/components/schemas/RoomCompensationDebug'
                enabled:
                    $ref: '#/components/schemas/RoomCompensationEnabled'
                lastResult:
                    $ref: '#/components/schemas/RoomCompensationResult'
                lastRun:
                    $ref: '#/components/schemas/RoomCompensationState'
                type:
                    $ref: '#/components/schemas/RoomCompensationType'
                version:
                    $ref: '#/components/schemas/RoomCompensationVersion'
            type: object
        RoomCompensationRange:
            properties:
                default:
                    $ref: '#/components/schemas/RoomCompensationValue'
                    description: Product and role specific default room compensation
                        value
                maxItems:
                    description: Maximum number of items in the `value` field
                    maximum: 20
                    minimum: 1
                    type: integer
                range:
                    description: Possible values for the `value` field
                    example:
                    - internal
                    - external
                    items:
                        type: string
                    type: array
            required:
            - default
            - range
            type: object
        RoomCompensationResponse:
            properties:
                frequency:
                    format: int32
                    type: integer
                gain:
                    format: double
                    type: number
        RoomCompensationResult:
            properties:
                compensation:
                    items:
                        $ref: '#/components/schemas/RoomCompensationResponse'
                    type: array
                measuredResponse:
                    items:
                        $ref: '#/components/schemas/RoomCompensationResponse'
                    type: array
                placement:
                    enum:
                    - free
                    - nearWall
                    - unknown
                    type: string
                referenceResponse:
                    items:
                        $ref: '#/components/schemas/RoomCompensationResponse'
                    type: array
                timeStamp:
                    format: date-time
                    type: string
            type: object
        RoomCompensationState:
            properties:
                error:
                    enum:
                    - noError
                    - microphoneMuted
                    - noisyEnvironment
                    - internalError
                    type: string
                state:
                    enum:
                    - notStarted
                    - running
                    - done
                    - error
                    type: string
                timeStamp:
                    format: date-time
                    type: string
            type: object
        RoomCompensationType:
            properties:
                value:
                    enum:
                    - simple
                    - advanced
                    type: string
        RoomCompensationValue:
            description: 'List of room compensation sweeps to combine. No room compensation
                is done

                if this list is empty. The maximum length of this list is product

                specific.

                '
            items:
                type: string
            type: array
        RoomCompensationVersion:
            properties:
                algorithm:
                    format: uint32
                    type: integer
                coefficients:
                    format: uint32
                    type: integer
        RssiInfo:
            properties:
                chain:
                    items:
                        format: int32
                        type: integer
                    type: array
                level:
                    format: int32
                    type: integer
            type: object
        SerialNumber:
            description: Speaker serial number
            example: '12345678'
            pattern: ^\d{8}
            type: string
        SoftwareUpdateSettings:
            properties:
                automaticUpdate:
                    description: updates are automatically downloaded and installed
                    type: boolean
            type: object
        SoftwareUpdateState:
            properties:
                secondsRemaining:
                    format: int32
                    type: integer
                value:
                    enum:
                    - idle
                    - checking
                    - updateCheckFailed
                    - noUpdatesAvailable
                    - updateAvailable
                    - downloadingUpdate
                    - updateDownloaded
                    - downloadFailed
                    - installingUpdate
                    - installationFailed
                    - schedulerFailed
                    - rebooting
                    type: string
        SoftwareUpdateStatus:
            properties:
                availableUpdate:
                    $ref: '#/components/schemas/SoftwareVersion'
                lastCheck:
                    format: date-time
                    type: string
                lastUpdate:
                    format: date-time
                    type: string
                softwareVersion:
                    $ref: '#/components/schemas/SoftwareVersion'
                state:
                    $ref: '#/components/schemas/SoftwareUpdateState'
                updateProgress:
                    format: int32
                    type: integer
            required:
            - softwareVersion
            - state
            type: object
        SoftwareVersion:
            type: string
        SoundAdjustments:
            properties:
                ambience:
                    format: double
                    type: number
                bass:
                    format: int32
                    type: integer
                directivity:
                    type: string
                ecoMode:
                    type: boolean
                fadein:
                    type: boolean
                loudness:
                    type: boolean
                treble:
                    format: int32
                    type: integer
            type: object
        SoundFeatureSet:
            properties:
                ambience:
                    $ref: '#/components/schemas/AmbienceFeature'
                bass:
                    $ref: '#/components/schemas/BassFeature'
                directivity:
                    $ref: '#/components/schemas/DirectivityFeature'
                roomCompensation:
                    $ref: '#/components/schemas/RoomCompensationFeature'
                toneTouchX:
                    $ref: '#/components/schemas/ToneTouchXFeature'
                toneTouchY:
                    $ref: '#/components/schemas/ToneTouchYFeature'
                treble:
                    $ref: '#/components/schemas/TrebleFeature'
            type: object
        SoundSettings:
            properties:
                adjustments:
                    $ref: '#/components/schemas/SoundAdjustments'
                roomCompensation:
                    $ref: '#/components/schemas/RoomCompensationInfo'
                toneTouch:
                    $ref: '#/components/schemas/SoundToneTouch'
            type: object
        SoundToneTouch:
            properties:
                x:
                    format: double
                    type: number
                y:
                    format: double
                    type: number
                z:
                    format: double
                    type: number
            type: object
        Source:
            properties:
                id:
                    type: string
                isEnabled:
                    description: some sources require an explicit activation or accept
                        of terms before being enabled
                    type: boolean
                isPlayable:
                    type: boolean
                name:
                    type: string
                type:
                    $ref: '#/components/schemas/SourceTypeEnum'
            type: object
        SourceArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Source'
                    type: array
        SourceFriendlyName:
            properties:
                friendlyName:
                    $ref: '#/components/schemas/SourceFriendlyNameValue'
            required:
            - friendlyName
            type: object
        SourceFriendlyNameValue:
            properties:
                isEditable:
                    type: boolean
                value:
                    type: string
            required:
            - value
            type: object
        SourceOrder:
            properties:
                order:
                    $ref: '#/components/schemas/SourceOrderValue'
            required:
            - order
            type: object
        SourceOrderValue:
            properties:
                isEditable:
                    type: boolean
                value:
                    format: uint32
                    type: integer
            required:
            - value
            type: object
        SourceSettings:
            properties:
                friendlyName:
                    $ref: '#/components/schemas/SourceFriendlyNameValue'
                id:
                    type: string
                order:
                    $ref: '#/components/schemas/SourceOrderValue'
                remoteLists:
                    $ref: '#/components/schemas/RemoteListsValue'
            type: object
        SourceSettingsArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/SourceSettings'
                    type: array
            required:
            - items
            type: object
        SourceTypeEnum:
            properties:
                value:
                    enum:
                    - alexa
                    - audiolink
                    - beolink
                    - bluetooth
                    - dlna
                    - qplay
                    - airPlay
                    - lineIn
                    - chromeCast
                    - uriStreamer
                    - netRadio
                    - generator
                    - spotify
                    - spdif
                    - pl
                    - wpl
                    - tv
                    - deezer
                    - unknown
                    type: string
        Speaker:
            properties:
                friendlyName:
                    type: string
                id:
                    format: int32
                    type: integer
                macAddress:
                    type: string
                model:
                    $ref: '#/components/schemas/SpeakerModel'
                role:
                    $ref: '#/components/schemas/SpeakerRole'
                serialNumber:
                    type: string
                status:
                    enum:
                    - offline
                    - online
                    type: string
                technology:
                    type: string
            type: object
        SpeakerArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Speaker'
                    type: array
        SpeakerDiscoveryState:
            properties:
                id:
                    format: int32
                    type: integer
                name:
                    type: string
            type: object
        SpeakerGroup:
            properties:
                friendlyName:
                    type: string
                id:
                    $ref: '#/components/schemas/SpeakerGroupId'
                items:
                    items:
                        $ref: '#/components/schemas/SpeakerGroupMember'
                    type: array
            type: object
        SpeakerGroupId:
            format: uuid
            type: string
        SpeakerGroupList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/SpeakerGroupOverview'
                    type: array
            type: object
        SpeakerGroupMember:
            properties:
                distance:
                    description: Distance from listening position in cm
                    format: uint32
                    maximum: 1000
                    minimum: 0
                    type: integer
                gain:
                    description: Level in dB
                    format: float
                    maximum: 6.0
                    minimum: -24.0
                    type: number
                id:
                    type: string
                location:
                    description: Coordinates relative to speaker position in cm
                    properties:
                        x:
                            format: int32
                            type: integer
                        y:
                            format: int32
                            type: integer
                        z:
                            format: int32
                            type: integer
                    required:
                    - x
                    - y
                    - z
                    type: object
                role:
                    enum:
                    - none
                    - frontLeft
                    - frontRight
                    - frontCenter
                    - frontLeftWide
                    - frontRightWide
                    - surroundLeft
                    - surroundRight
                    - backLeft
                    - backRight
                    - backCenter
                    - ceiling
                    - frontLeftHeight
                    - frontRightHeight
                    - surroundLeftHeight
                    - surroundRightHeight
                    - rearLeftHeight
                    - rearRightHeight
                    - subLeft
                    - subRight
                    - subCenter
                    type: string
                type:
                    type: string
            required:
            - id
            type: object
        SpeakerGroupOverview:
            properties:
                friendlyName:
                    type: string
                id:
                    $ref: '#/components/schemas/SpeakerGroupId'
            required:
            - friendlyName
            - id
            type: object
        SpeakerLinkChannel:
            example: "{\n  \"channel\": \"left\"\n}\n"
            properties:
                channel:
                    enum:
                    - all
                    - left
                    - right
                    type: string
            required:
            - channel
            type: object
        SpeakerLinkFormat:
            example: "{\n  \"format\": \"lc3plus\"\n}\n"
            properties:
                format:
                    enum:
                    - pcm
                    - lc3plus
                    type: string
            required:
            - format
            type: object
        SpeakerLinkNetworkDelay:
            properties:
                networkDelayMs:
                    format: uint32
                    type: integer
            required:
            - value
            type: object
        SpeakerLinkPSK:
            properties:
                kid:
                    type: string
                psk:
                    description: 'AP encrypted using the key identified by `kid`.

                        '
                    type: string
            required:
            - kid
            - key
            type: object
        SpeakerLinkPeer:
            properties:
                baseUrl:
                    $ref: '#/components/schemas/URI'
                ipAddress:
                    $ref: '#/components/schemas/IPv4'
                serialNumber:
                    $ref: '#/components/schemas/SerialNumber'
            required:
            - baseUrl
            - ipAddress
            - serialNumber
            type: object
        SpeakerLinkRole:
            properties:
                channel:
                    enum:
                    - all
                    - left
                    - right
                    type: string
                desired:
                    enum:
                    - none
                    - primary
                    - secondary
                    type: string
                primary:
                    $ref: '#/components/schemas/SerialNumber'
                role:
                    enum:
                    - none
                    - primary
                    - secondary
                    type: string
            required:
            - role
            type: object
        SpeakerLinkSecondary:
            properties:
                baseUrl:
                    $ref: '#/components/schemas/URI'
                ipAddress:
                    $ref: '#/components/schemas/IPv4'
                serialNumber:
                    $ref: '#/components/schemas/SerialNumber'
            required:
            - baseUrl
            - ipAddress
            - serialNumber
            type: object
        SpeakerModel:
            properties:
                description:
                    type: string
                id:
                    format: int32
                    type: integer
            type: object
        SpeakerPreset:
            properties:
                directivity:
                    type: string
                id:
                    type: integer
            type: object
        SpeakerPresetActive:
            properties:
                id:
                    type: integer
            type: object
        SpeakerPresetList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/SpeakerPreset'
                    type: array
            type: object
        SpeakerRole:
            properties:
                id:
                    format: int32
                    type: integer
                name:
                    type: string
            type: object
        SpeakerRoleArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/SpeakerRole'
                    type: array
        SpeakerRoleEnum:
            properties:
                value:
                    enum:
                    - standalone
                    - multichannel
                    type: string
        StandbySettings:
            properties:
                batteryTimeout:
                    description: 'Timeout in minutes from when nothing is playing
                        until the product

                        enters standby when running on battery (0 is disabled)

                        '
                    type: integer
            type: object
        SupportedSoundFeatures:
            additionalProperties:
                $ref: '#/components/schemas/SoundFeatureSet'
            description: Supported sound features
            type: object
        TimeOfDaySeconds:
            description: Time of day in seconds from midnight
            format: int32
            maximum: 86399
            minimum: 0
            type: integer
        Timer:
            description: Object for a timer on the product
            properties:
                actionList:
                    $ref: '#/components/schemas/ActionList'
                duration:
                    description: The duration of the timer in seconds
                    format: uint32
                    minimum: 0
                    type: integer
                id:
                    $ref: '#/components/schemas/AlarmId'
                    nullable: true
                label:
                    maxLength: 128
                    type: string
                lastStateChange:
                    $ref: '#/components/schemas/TimeOfDaySeconds'
                    description: 'The last time the state of the timer was changed.

                        Time point is seconds from midnight.

                        Generated by the product!

                        '
                    nullable: true
                state:
                    description: The state of the timer
                    enum:
                    - started
                    - paused
                    type: string
            required:
            - label
            - actionList
            - duration
            - state
            type: object
        TimerList:
            description: List of timers
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Timer'
                    type: array
            type: object
        ToneTouch:
            properties:
                x:
                    $ref: '#/components/schemas/ToneTouchType'
                y:
                    $ref: '#/components/schemas/ToneTouchType'
            type: object
        ToneTouchType:
            properties:
                value:
                    format: double
                    type: number
            required:
            - value
            type: object
        ToneTouchTypeRange:
            properties:
                default:
                    $ref: '#/components/schemas/ToneTouchType'
                    description: Product and role specific default ToneTouch X or
                        Y
                range:
                    description: Product and role specific tone touch X or Y range
                    items:
                        $ref: '#/components/schemas/ToneTouchType'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        ToneTouchXFeature:
            allOf:
            -   $ref: '#/components/schemas/ToneTouchType'
            -   $ref: '#/components/schemas/ToneTouchTypeRange'
        ToneTouchYFeature:
            allOf:
            -   $ref: '#/components/schemas/ToneTouchType'
            -   $ref: '#/components/schemas/ToneTouchTypeRange'
        TouchInfo:
            properties:
                version:
                    type: string
            type: object
        Treble:
            properties:
                value:
                    description: Selected treble value
                    format: int32
                    type: integer
            required:
            - value
            type: object
        TrebleFeature:
            allOf:
            -   $ref: '#/components/schemas/Treble'
            -   $ref: '#/components/schemas/TrebleRange'
        TrebleRange:
            properties:
                default:
                    $ref: '#/components/schemas/Treble'
                    description: Product and role specific default treble value
                range:
                    description: Product and role specific treble range
                    items:
                        $ref: '#/components/schemas/Treble'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        TvSource:
            properties:
                id:
                    type: string
                name:
                    type: string
            type: object
        TvSourceArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/TvSource'
                    type: array
        URI:
            description: Reference to another resource
            example: http://speaker.local/api/v1/version
            format: uri
            type: string
        UnlockToken:
            properties:
                token:
                    description: The actual JWT token
                    type: string
            type: object
        Uri:
            properties:
                location:
                    type: string
            type: object
        UriRepeat:
            properties:
                repeat:
                    type: boolean
            type: object
        UsageReportEnabled:
            properties:
                enabled:
                    type: boolean
            type: object
        UserDataUpload:
            properties:
                allowed:
                    type: boolean
            type: object
        UserFlow:
            properties:
                userId:
                    format: int64
                    type: string
            type: object
        VoiceSettings:
            properties:
                detectionThreshold:
                    format: uint32
                    type: integer
                voiceService:
                    enum:
                    - none
                    - alexa
                    - gva
                    - tencent
                    type: string
            type: object
        VolumeLevel:
            properties:
                level:
                    format: int32
                    type: integer
            type: object
        VolumeMute:
            properties:
                muted:
                    type: boolean
            type: object
        VolumeSettings:
            properties:
                default:
                    $ref: '#/components/schemas/VolumeLevel'
                maximum:
                    $ref: '#/components/schemas/VolumeLevel'
            type: object
        VolumeState:
            properties:
                default:
                    $ref: '#/components/schemas/VolumeLevel'
                level:
                    $ref: '#/components/schemas/VolumeLevel'
                maximum:
                    $ref: '#/components/schemas/VolumeLevel'
                muted:
                    $ref: '#/components/schemas/VolumeMute'
            type: object
        WebSocketEventAlarmTriggered:
            properties:
                eventData:
                    $ref: '#/components/schemas/AlarmTriggeredInfo'
                eventType:
                    type: string
            type: object
        WebSocketEventBattery:
            properties:
                eventData:
                    $ref: '#/components/schemas/BatteryState'
                eventType:
                    type: string
            type: object
        WebSocketEventBeoRemoteButton:
            properties:
                eventData:
                    $ref: '#/components/schemas/BeoRemoteButton'
                eventType:
                    type: string
            type: object
        WebSocketEventBeolinkExperiencesResult:
            properties:
                eventData:
                    $ref: '#/components/schemas/BeolinkExperiencesResult'
                eventType:
                    type: string
            required:
            - eventType
            - eventData
            type: object
        WebSocketEventBeolinkJoinResult:
            properties:
                eventData:
                    $ref: '#/components/schemas/BeolinkJoinResult'
                eventType:
                    type: string
            required:
            - eventType
            - eventData
            type: object
        WebSocketEventButton:
            properties:
                eventData:
                    $ref: '#/components/schemas/ButtonEvent'
                eventType:
                    type: string
            type: object
        WebSocketEventCurtains:
            properties:
                eventData:
                    $ref: '#/components/schemas/ProductCurtainStatus'
                eventType:
                    type: string
            type: object
        WebSocketEventNotification:
            description: This telegram is used to send a tagged notification.
            properties:
                eventData:
                    $ref: '#/components/schemas/WebsocketNotificationTag'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackError:
            properties:
                eventData:
                    $ref: '#/components/schemas/PlaybackError'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackMetadata:
            properties:
                eventData:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackProgress:
            properties:
                eventData:
                    $ref: '#/components/schemas/PlaybackProgress'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackSource:
            properties:
                eventData:
                    $ref: '#/components/schemas/Source'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackState:
            properties:
                eventData:
                    $ref: '#/components/schemas/RenderingState'
                eventType:
                    type: string
            type: object
        WebSocketEventPowerState:
            properties:
                eventData:
                    $ref: '#/components/schemas/PowerStateEnum'
                eventType:
                    type: string
            type: object
        WebSocketEventRole:
            properties:
                eventData:
                    $ref: '#/components/schemas/SpeakerRoleEnum'
                eventType:
                    type: string
            type: object
        WebSocketEventSoftwareUpdateState:
            properties:
                eventData:
                    $ref: '#/components/schemas/SoftwareUpdateState'
                eventType:
                    type: string
            type: object
        WebSocketEventSoundSettings:
            properties:
                eventData:
                    $ref: '#/components/schemas/SoundSettings'
                eventType:
                    type: string
            type: object
        WebSocketEventSourceChange:
            properties:
                eventData:
                    $ref: '#/components/schemas/Source'
                eventType:
                    type: string
            type: object
        WebSocketEventVolume:
            properties:
                eventData:
                    $ref: '#/components/schemas/VolumeState'
                eventType:
                    type: string
            type: object
        WebsocketNotificationTag:
            properties:
                value:
                    enum:
                    - configuration
                    - uri
                    - generatorSettings
                    - lineInSettings
                    - bluetoothDevices
                    - remoteControlDevices
                    - secondariesList
                    - queueHasBeenChanged
                    - endOfQueueHasBeenReached
                    - beolinkPeers
                    - beolinkListeners
                    - beolinkAvailableListeners
                    - bluetoothPairingStateChanged
                    type: string
        WiFiRegulatorySetting:
            properties:
                code:
                    type: string
            type: object
        WifiArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/BasicWirelessNetworkInformation'
                    type: array
        WifiCredentials:
            description: The credentials needed to connect to a wifi network
            properties:
                SSID:
                    description: 'The network SSID to connect to.

                        '
                    type: string
                password:
                    $ref: '#/components/schemas/EncryptedText'
                    description: 'the password encrypted with the public key.

                        '
            type: object
        WiredConfig:
            properties:
                method:
                    $ref: '#/components/schemas/NetworkMethodEnum'
                staticConfig:
                    $ref: '#/components/schemas/NetworkConfig'
            type: object
        WiredNetworkStatus:
            properties:
                ipInfo:
                    $ref: '#/components/schemas/IpV4Info'
                isActive:
                    type: boolean
                status:
                    $ref: '#/components/schemas/NetworkStatusEnum'
            type: object
        WirelessBitrateInfo:
            properties:
                bitrate:
                    format: uint32
                    type: integer
                bytes:
                    format: uint32
                    type: integer
                failed:
                    format: uint32
                    type: integer
                packets:
                    format: uint32
                    type: integer
                retries:
                    format: uint32
                    type: integer
            type: object
        WirelessConfig:
            properties:
                method:
                    $ref: '#/components/schemas/NetworkMethodEnum'
                ssid:
                    type: string
                staticConfig:
                    $ref: '#/components/schemas/NetworkConfig'
            type: object
        WirelessNetworkConnectInformation:
            properties:
                encryption:
                    enum:
                    - unknown
                    - none
                    - wep
                    - psk
                    type: string
                passphrase:
                    $ref: '#/components/schemas/EncryptedText'
                ssid:
                    type: string
            type: object
        WirelessNetworkInformation:
            properties:
                bandwidth:
                    format: uint32
                    type: integer
                bssid:
                    type: string
                channel:
                    format: uint8
                    type: integer
                encryption:
                    enum:
                    - unknown
                    - none
                    - wep
                    - psk
                    type: string
                frequency:
                    format: uint32
                    type: integer
                quality:
                    enum:
                    - none
                    - weak
                    - average
                    - good
                    - excellent
                    type: string
                rssi:
                    $ref: '#/components/schemas/RssiInfo'
                rssiAverage:
                    $ref: '#/components/schemas/RssiInfo'
                rxInfo:
                    $ref: '#/components/schemas/WirelessBitrateInfo'
                ssid:
                    type: string
                txInfo:
                    $ref: '#/components/schemas/WirelessBitrateInfo'
            type: object
        WirelessNetworkStatus:
            properties:
                ipInfo:
                    $ref: '#/components/schemas/IpV4Info'
                isActive:
                    type: boolean
                networkInfo:
                    $ref: '#/components/schemas/WirelessNetworkInformation'
                status:
                    $ref: '#/components/schemas/NetworkStatusEnum'
            type: object
        WisaSettings:
            properties:
                autoSelectSource:
                    type: boolean
                disabled:
                    type: boolean
            type: object
        WisaStatus:
            properties:
                firmwareVersion:
                    type: string
                localMacAddress:
                    type: string
                state:
                    enum:
                    - disabled
                    - poweroff
                    - pairing
                    - unpairing
                    - reconnect
                    - connected
                    - streaming
                    type: string
            type: object
info:
    description: API for interacting with the Mozart platform.
    title: Mozart platform API
    version: 0.2.0
openapi: 3.0.0
paths:
    /api/v1/airplay/password:
        delete:
            description: Unsets the airplay password
            operationId: delete-airplay-password
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The password has been deleted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Airplay
            - mozart
        get:
            description: Returns if a password has been set. Will NOT return the password
            operationId: get-airplay-password-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AirplayPasswordState'
                    description: If a password has been set on the device
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Airplay
            - mozart
        post:
            description: Sets the new airplay password
            operationId: post-airplay-password
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AirplayCredentials'
                            description: The encrypted password
                            required:
                            - password
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The password has successfully been set
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Airplay
            - mozart
    /api/v1/alarm:
        post:
            description: Add a configured alarm to the product
            operationId: add-alarm
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AlarmInstance'
                description: New alarm instance
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlarmInstance'
                    description: Alarm added successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot add alarm
            tags:
            - Alarms
            - mozart
    /api/v1/alarm/{id}:
        delete:
            description: Delete an alarm from the product
            operationId: delete-alarm
            parameters:
            -   description: ID of alarm to delete
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Alarm deleted successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Alarm not found (invalid request)
            tags:
            - Alarms
            - mozart
        get:
            description: Get a single alarm from the product
            operationId: get-alarm
            parameters:
            -   description: ID of the alarm to get
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlarmInstance'
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Alarm with the given ID doesn't exist
            tags:
            - Alarms
            - mozart
        put:
            description: Replace an already existing alarm on the product
            operationId: edit-alarm
            parameters:
            -   description: ID of the alarm to update
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AlarmInstance'
                description: New alarm instance
                required: true
            responses:
                '202':
                    description: Alarm updated successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't update alarm
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Alarm with the given ID doesn't exist
            tags:
            - Alarms
            - mozart
    /api/v1/alarm/{id}/disable:
        post:
            description: Disable an existing alarm
            operationId: disable-alarm
            parameters:
            -   description: ID of the alarm to disable
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Alarm disabled
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't disable the alarm
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Alarm with the given ID doesn't exist
            tags:
            - Alarms
            - mozart
    /api/v1/alarm/{id}/enable:
        post:
            description: Enable an existing alarm
            operationId: enable-alarm
            parameters:
            -   description: ID of the alarm to enable
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Alarm enabled
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't enable the alarm
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Alarm with the given ID doesn't exist
            tags:
            - Alarms
            - mozart
    /api/v1/alarms:
        get:
            description: Returns a JSON containing all configured alarms
            operationId: get-all-alarms
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlarmsList'
                    description: Successful request
            tags:
            - Alarms
            - mozart
    /api/v1/alarms/maximum-allowed:
        get:
            description: Returns the number of alarms the product supports
            operationId: get-maximum-allowed
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NumberOfAllowedAlarms'
                    description: Success
                '400':
                    description: Failed
            tags:
            - Alarms
            - mozart
    /api/v1/alarms/tones-available:
        get:
            description: Returns the available alarmTones
            operationId: get-available-tones
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlarmToneList'
                    description: successful request
            tags:
            - Alarms
            - mozart
    /api/v1/alexa/auth/metadata:
        get:
            description: Get the device metadata to perform a new authentication
            operationId: get-alexa-auth-metadata
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlexaAuthMedata'
                    description: The authentication metadata
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Alexa
            - mozart
    /api/v1/alexa/auth/state:
        get:
            description: Get the current authentication state of alexa
            operationId: get-alexa-auth-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlexaAuthStateModel'
                    description: A snapshot of the authentication state of alexa
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Alexa
            - mozart
    /api/v1/alexa/auth/token:
        post:
            description: Set the authorization info on the product.
            operationId: set-alexa-auth-token
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlexaAuthToken'
                    description: The authentication token
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Alexa
            - mozart
    /api/v1/alexa/auth/user:
        delete:
            description: Logs out the current user, deleting all user specific data
            operationId: alexa-auth-user-logout
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: Successfully logged out the user
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Alexa
            - mozart
    /api/v1/audio/latency:
        get:
            description: Get the current latency
            operationId: get-audio-latency
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LatencyRangeVal'
                    description: The current system latency
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Audio
            - mozart
        post:
            description: Set the current latency
            operationId: post-audio-latency
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Latency'
                description: The desired latency. Setting to zero resets the latency.
                required: true
            responses:
                '200':
                    description: Successfully set the system latency
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Audio
            - mozart
    /api/v1/audio/roles:
        get:
            description: Get list of supported roles
            operationId: get-audio-roles
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerRoleArray'
                    description: Array of supported roles
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Audio
            - mozart
    /api/v1/audio/speakers:
        get:
            description: Get list of discovered speakers
            operationId: get-speakers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerArray'
                    description: Array of discovered speakers
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Audio
            - mozart
    /api/v1/audio/speakers/discover:
        get:
            description: Get the state of discovery
            operationId: get-speaker-discovery
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerDiscoveryState'
                    description: The state of the discovery of speakers is returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Audio
            - mozart
        post:
            description: Request discovery of speakers
            operationId: post-speaker-discovery
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerDiscoveryState'
                    description: The result of the discover request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Audio
            - mozart
    /api/v1/audio/speakers/{speakerId}/role:
        post:
            description: Set the role of a speaker
            operationId: post-speaker-role
            parameters:
            -   description: Id of the speaker which is assigned a new role
                in: path
                name: speakerId
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerRole'
                description: roleId corresponding to the id returned by /audio/roles
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Speaker'
                    description: Speaker has been assigned a role
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Audio
            - mozart
    /api/v1/battery:
        get:
            description: Get battery state of the product
            operationId: get-battery-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatteryState'
                    description: The battery state of the product
            tags:
            - Power
            - mozart
    /api/v1/beolink/airplay-allowed:
        get:
            description: Get airplay allowed value
            operationId: get-beolink-airplay
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkAirplayAllowed'
                    description: successful operation
                '400':
                    description: Failed to get airplay allowed
            tags:
            - Beolink
            - mozart
        put:
            description: Sets airplay allowed
            operationId: set-beolink-airplay
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeolinkAirplayAllowed'
                description: Set if airplay is allowed or not
                required: true
            responses:
                '204':
                    description: successful operation
                '400':
                    description: Failed to post airplay allowed
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/allstandby:
        post:
            description: Broadcast an all standby event to turn all beolink devices
                off
            operationId: post-beolink-allstandby
            responses:
                '202':
                    description: successful operation
                '400':
                    description: Beolink not enabled on this device
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/audioleader:
        get:
            operationId: get-beolink-audio-leader
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkLeader'
                                nullable: true
                    description: Success
                '204':
                    description: Success, but no leader
                '400':
                    description: Beolink not enabled
            summary: current audio leader (or null if no leader)
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/available-listeners:
        get:
            description: 'Get a list of devices that can be listening to this device
                active experience

                '
            operationId: get-beolink-available-listeners
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/BeolinkAvailableListener'
                                type: array
                    description: Success
                '400':
                    description: Beolink not enabled on this device
            summary: null
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/configleader:
        get:
            operationId: get-beolink-config-leader
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkLeader'
                    description: Success
                '204':
                    description: Success, but no leader
                '400':
                    description: Beolink not enabled
            summary: current config leader (or null if no leader)
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/enabled:
        get:
            description: Get whether or not beolink multiroom is enabled on this device
            operationId: get-beolink-enabled
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkEnabled'
                    description: successful operation
            tags:
            - Beolink
            - mozart
        put:
            description: Sets whether or not beolink multiroom is enabled on this
                device
            operationId: set-beolink-enabled
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeolinkEnabled'
                description: Set if beolink is enabled or not
                required: true
            responses:
                '204':
                    description: successful operation
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/expand/{jid}:
        parameters:
        -   description: Jabber id of peer to expand the active experience to
            in: path
            name: jid
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkPeerID'
        post:
            description: 'Expand the current active experience to another device with
                jabber id {jid}.

                '
            operationId: post-beolink-expand
            responses:
                '202':
                    description: Success
                '400':
                    description: Beolink not enabled on this device
                '404':
                    description: Remote device not found
            summary: Expand the current active experience
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/join:
        post:
            description: Touch to join
            operationId: join-latest-beolink-experience
            responses:
                '202':
                    $ref: '#/components/responses/BeolinkJoinResponse'
                '400':
                    description: Beolink not enabled on this device
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/join-result/{id}:
        get:
            description: 'Returns the result of a join request.


                **WARNING:** This end-point is only for testing purposes. Only a limited

                number of results are kept, so if there are multiple API clients using

                the device at the same time, and you are polling this end-point, you
                may

                miss the result of your join request.

                '
            operationId: get-beolink-join-result
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkJoinResult'
                    description: Join result available
                '404':
                    description: Join result unavailable
            tags:
            - Beolink
            - mozart
        parameters:
        -   description: Join request ID
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkRequestID'
    /api/v1/beolink/join/{jid}:
        parameters:
        -   description: Jabber ID of peer to join
            in: path
            name: jid
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkPeerID'
        -   description: Ask to join a specific source on peer
            in: query
            name: source
            required: false
            schema:
                type: string
        post:
            description: 'Join the experience currently active on peer with Jabber
                ID `jid`.

                '
            operationId: join-beolink-peer
            responses:
                '202':
                    $ref: '#/components/responses/BeolinkJoinResponse'
                '400':
                    description: Beolink not enabled on this device
            summary: Join multi-room experience
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/latency:
        get:
            description: Gets the beolink latency
            operationId: get-beolink-latency
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkLatency'
                    description: successful operation
                '400':
                    description: Failed to get latency
            tags:
            - Beolink
            - mozart
        put:
            description: Sets the beolink latency
            operationId: set-beolink-latency
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeolinkLatency'
                description: The desired latency
                required: true
            responses:
                '204':
                    description: successful operation
                '400':
                    description: Failed to post latency
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/leave:
        post:
            description: Leave the ongoing experience (disconnect this device from
                remote)
            operationId: post-beolink-leave
            responses:
                '202':
                    description: successful operation
                '400':
                    description: Beolink not enabled on this device
                '404':
                    description: No active experience found
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/listeners:
        get:
            description: 'Get a list of devices that are listening to this device
                active experience (that have joined)

                '
            operationId: get-beolink-listeners
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/BeolinkListener'
                                type: array
                    description: Success
                '400':
                    description: Beolink not enabled on this device
            summary: null
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/peers:
        get:
            description: 'Get information about the beolink peers discovered by this
                device

                '
            operationId: get-beolink-peers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/BeolinkPeer'
                                type: array
                    description: Success
                '400':
                    description: Beolink not enabled on this device
            summary: null
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/scan-experiences:
        post:
            description: Scans for the current available experiences. Check the websockets
                for the results
            operationId: beolink-scan-current-experiences
            responses:
                '202':
                    $ref: '#/components/responses/BeolinkExperiencesResponse'
                '400':
                    description: Beolink not enabled on this device
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/security-buffer:
        get:
            description: Get if the security buffer is enabled. May be needed for
                ASE products to perform
            operationId: get-beolink-security-buffer
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkSecurityBuffer'
                    description: successful operation
            tags:
            - Beolink
            - mozart
        put:
            description: Sets whether or not the security buffer is enabled on this
                device
            operationId: set-beolink-security-buffer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeolinkSecurityBuffer'
                description: Set if beolink security buffer is enabled or not
                required: true
            responses:
                '204':
                    description: successful operation
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/unexpand/{jid}:
        parameters:
        -   description: Jabber id of peer to unexpand
            in: path
            name: jid
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkPeerID'
        post:
            description: 'Disconnect the device with jabber id {jid} from the current
                active experience.

                '
            operationId: post-beolink-unexpand
            responses:
                '202':
                    description: Success
                '400':
                    description: Beolink not enabled on this device
                '404':
                    description: Remote device not found
            summary: Unexpand (disconnect) a device from the multiroom session
            tags:
            - Beolink
            - mozart
    /api/v1/cast/accept-tos:
        post:
            description: Indicates that the user has accepted the Terms of Service
                of Chromecast/GVA
            operationId: set-cast-tos-accepted
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The acceptance was registered
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '406':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: The acceptance could not be registered
            tags:
            - Chromecast
            - mozart
    /api/v1/cast/setup-state:
        get:
            description: Get the cast setup state
            operationId: get-cast-setup-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CastState'
                    description: Successfully got the cast setup state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Chromecast
            - mozart
    /api/v1/cast/tos-accepted:
        get:
            description: Get the current Terms-of-Service acceptance state of Chromecast/GVA
            operationId: get-cast-tos-accepted
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CastTosAcceptanceState'
                    description: Indication of whether the user has accepted the Terms
                        of Service of Chromecast/GVA
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Chromecast
            - mozart
    /api/v1/cast/version:
        get:
            description: Get the currently installed Chromecast version
            operationId: get-cast-version
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CastVersion'
                    description: Current Chromecast version information
                '503':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Version not available
            tags:
            - Chromecast
            - mozart
    /api/v1/developer/tvsources:
        get:
            description: Retrieve all the available TV sources.
            operationId: get-available-tv-sources
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TvSourceArray'
                    description: Returns a list of available TV sources
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - mozart
            - Developer
    /api/v1/developer/tvsources/active:
        get:
            description: Retrieve the currently active TV source, if any
            operationId: get-active-tv-source
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TvSource'
                    description: Returns the currently active TV source
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - mozart
            - Developer
    /api/v1/developer/tvsources/active/{sourceId}:
        post:
            description: Set the active TV source
            operationId: set-active-tv-source
            parameters:
            -   description: the id of the tv source to activate
                in: path
                name: sourceId
                required: true
                schema:
                    type: string
            responses:
                '201':
                    description: Successfully changed the active TV source
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - mozart
            - Developer
    /api/v1/diagnostics/battery:
        get:
            description: Get the battery status of the product
            operationId: get-diagnostics-battery
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DiagnosticsBatteryValues'
                    description: The current battery status
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: This product has no battery
            tags:
            - Diagnostics
            - mozart
    /api/v1/diagnostics/flash:
        get:
            description: Get the current flash memory state of the product
            operationId: get-diagnostics-flash
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DiagnosticsFlashValues'
                    description: The current flash memory state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Diagnostics
            - mozart
    /api/v1/diagnostics/loglevel:
        put:
            description: Change the log level for given areas
            operationId: set-loglevel
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LogLevelSettings'
                description: the log level settings
                required: true
            responses:
                '201':
                    description: the settings were communicated to the system
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Diagnostics
            - mozart
    /api/v1/diagnostics/logupload:
        post:
            description: Push logs to beocloud
            operationId: post-logupload
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LogUploadData'
                description: the log upload data
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: log upload started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Diagnostics
            - mozart
    /api/v1/diagnostics/ntc:
        get:
            description: Get a sample of the current NTC values of the product
            operationId: get-diagnostics-ntc
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DiagnosticsNtcValueArray'
                    description: The NTC values
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Diagnostics
            - mozart
    /api/v1/lightsensor/settings:
        get:
            description: get the current light sensor settings
            operationId: get-lightsensor-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LightSensorSettings'
                    description: the light sensor settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
        put:
            description: sets the current light sensor settings
            operationId: set-lightsensor-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LightSensorSettings'
                description: the light sensor settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LightSensorSettings'
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/network:
        get:
            description: gets the current overall network status
            operationId: get-network-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NetworkStatus'
                    description: retrieves the currently active network status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Networking
            - mozart
    /api/v1/network/wired:
        get:
            description: gets the current wired network status
            operationId: get-wired-network-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WiredNetworkStatus'
                    description: the wired network status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Networking
            - mozart
    /api/v1/network/wired/config:
        post:
            description: Sets the device configuration for the wired service
            operationId: post-wired-network-config
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WiredConfig'
                            description: The configuration for the wireless device
                            required:
                            - method
                            - staticConfig
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: the wired configuration has been set
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Networking
            - mozart
    /api/v1/network/wireless:
        get:
            description: gets the current wireless network status
            operationId: get-wireless-network-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WirelessNetworkStatus'
                    description: the wireless network status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Networking
            - mozart
    /api/v1/network/wireless/config:
        post:
            description: Sets the device configuration for the wireless service
            operationId: post-wireless-network-config
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WirelessConfig'
                            description: The configuration for the wireless device
                            required:
                            - ssid
                            - method
                            - staticConfig
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: the wireless configuration has been set
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Networking
            - mozart
    /api/v1/network/wireless/{ssid}:
        delete:
            description: Forgets configuration for a wireless network
            operationId: post-wireless-network-forget
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: the wireless network has been forgotten
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '500':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: request failed
            tags:
            - Networking
            - mozart
        parameters:
        -   description: Wireless network SSID
            in: path
            name: ssid
            required: true
            schema:
                type: string
    /api/v1/playback/art/{source}/{id}/{size}:
        get:
            description: Gets the art for the specified track
            operationId: get-local-image
            parameters:
            -   description: The source to get the art for
                in: path
                name: source
                required: true
                schema:
                    type: string
            -   description: The id for the specific track
                in: path
                name: id
                required: true
                schema:
                    type: integer
            -   description: The size of the requested image
                in: path
                name: size
                required: true
                schema:
                    enum:
                    - small
                    - medium
                    - large
                    type: string
            responses:
                '200':
                    content:
                        image/*:
                            schema:
                                format: binary
                                type: string
                    description: The art image requested
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/command/{command}:
        post:
            description: Sends a specific playback command to the product.
            operationId: post-playback-command
            parameters:
            -   description: the named command to execute
                in: path
                name: command
                required: true
                schema:
                    enum:
                    - play
                    - pause
                    - stop
                    - skip
                    - prev
                    type: string
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/deezer/flow:
        post:
            description: Play users flow if no provided user id it will play the flow
                connected to the active account
            operationId: start-deezer-flow
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserFlow'
                description: Select user
            responses:
                '201':
                    description: successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Deezer
            - Playback
            - mozart
    /api/v1/playback/deezer/has-token:
        get:
            description: Get if a deezer access token is set or not
            operationId: get-deezer-has-token
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HasToken'
                    description: successful operation
            tags:
            - Playback
            - mozart
    /api/v1/playback/multiroom/settings:
        get:
            description: 'Get current configured Multiroom settings

                '
            operationId: get-playback-multiroom-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MultiroomSettings'
                    description: returns the multiroom settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
        put:
            description: 'Set the given multiroom settings. Restart is required when
                updating multiroom provider.

                '
            operationId: set-playback-multiroom-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MultiroomSettings'
                description: The settings to apply
                required: true
            responses:
                '201':
                    description: multiroom settings accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/netradio-station:
        get:
            description: Returns the currently selected netradio station, if available
            operationId: get-netradio-station
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NetRadioStation'
                    description: The netradio station
            tags:
            - Playback
            - mozart
    /api/v1/playback/netradio-station/{stationId}:
        put:
            description: Plays the selected netradio station
            operationId: set-netradio-station
            parameters:
            -   description: The unique netradio station to play
                in: path
                name: stationId
                required: true
                schema:
                    type: string
            responses:
                '201':
                    description: The station successfully selected
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/preset/{id}/store:
        parameters:
        -   description: the id of the preset you want to store
            in: path
            name: id
            required: true
            schema:
                type: integer
        post:
            description: Store a new preset
            operationId: store-preset
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '412':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Pre-condition not met
            tags:
            - Playback
            - mozart
        put:
            description: Store a behavior on preset
            operationId: store-behavior-on-preset
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Behavior'
                description: the behavior you want to store on preset
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/preset/{id}/trigger:
        post:
            description: Activates a preset
            operationId: activate-preset
            parameters:
            -   description: the id of the preset you want to store
                in: path
                name: id
                required: true
                schema:
                    type: integer
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '412':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Pre-condition not met
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue:
        get:
            description: Get playqueue items
            operationId: get-pq-items
            parameters:
            -   description: get queue after specified queue id
                in: query
                name: after_id
                required: false
                schema:
                    $ref: '#/components/schemas/PlayQueueIdType'
            -   description: get count number of items. Default value is 20. Minimum
                    value is 1 and maximum is 1000
                in: query
                name: count
                required: false
                schema:
                    format: int32
                    maximum: 1000
                    minimum: 1
                    type: integer
            -   description: set to true if all metadata is wanted. When false or
                    not specified only id, type and uri/trackId is returned
                in: query
                name: details
                required: false
                schema:
                    type: boolean
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PlayQueueItemArray'
                    description: Returns a list of items in the playqueue
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
        post:
            description: Add an element to the queue
            operationId: add-to-queue
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlayQueueItem'
                description: the queue element you want to add
                required: true
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/clear:
        post:
            description: Clear the queue
            operationId: post-clear-queue
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/count:
        get:
            description: get size of queue
            operationId: get-count-queue
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                properties:
                                    count:
                                        format: int32
                                        type: integer
                                type: object
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/move:
        post:
            description: move queue item to index
            operationId: move-item-queue
            parameters:
            -   description: id of the queue item
                in: query
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/PlayQueueIdType'
            -   description: index where to move the queue item
                in: query
                name: index
                required: true
                schema:
                    format: int32
                    type: integer
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/settings:
        get:
            description: get the current queue settings
            operationId: get-settings-queue
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PlayQueueSettings'
                                type: object
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
        put:
            description: set queue settings
            operationId: set-settings-queue
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlayQueueSettings'
                description: the desired settings
                required: true
            responses:
                '204':
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/start:
        post:
            description: Starts playback of the queue (at a given position)
            operationId: post-start-queue
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlayQueueId'
                description: the queue element you want to start playback from
                required: false
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/{id}:
        delete:
            description: Remove queue element with id
            operationId: remove-pq-element
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
        parameters:
        -   description: the queue id of the element you want to remove
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/PlayQueueIdType'
    /api/v1/playback/seek:
        put:
            description: seek to position in stream
            operationId: seek-to-position
            parameters:
            -   description: position in milliseconds
                in: query
                name: position_ms
                required: true
                schema:
                    format: int32
                    type: integer
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/sources:
        get:
            description: Retrieve all the available sources.
            operationId: get-available-sources
            parameters:
            -   description: filter sources for remote control
                in: query
                name: target-remote
                required: false
                schema:
                    type: boolean
            -   description: include subsources, like TV sources.
                in: query
                name: include-subsources
                required: false
                schema:
                    type: boolean
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SourceArray'
                    description: Returns a list of available sources
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/sources/active:
        get:
            description: Retrieve the currently active source, if any
            operationId: get-active-source
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Source'
                    description: Returns the currently active source
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/sources/active/{sourceId}:
        post:
            description: Set the active source
            operationId: set-active-source
            parameters:
            -   description: the id of the source to activate
                in: path
                name: sourceId
                required: true
                schema:
                    type: string
            responses:
                '201':
                    description: Successfully changed the active source
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/state:
        get:
            description: gets the current state of playback
            operationId: get-playback-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PlaybackState'
                    description: Model describing the current playback state and meta
                        data
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/uri:
        get:
            description: Retrieves the current uri from which sound is streamed.
            operationId: get-uri-source
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Uri'
                    description: The current uri being streamed.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
        post:
            description: Set the uri from which sound is streamed
            operationId: post-uri-source
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Uri'
                description: the desired uri from which to stream data
                required: true
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/uri/dlna:
        get:
            description: Retrieves the current uri from which sound is streamed.
            operationId: get-dlna-uri-source
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Uri'
                    description: The current uri being streamed.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
        post:
            description: Set the uri from which sound is streamed
            operationId: post-dlna-uri-source
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Uri'
                description: the desired uri from which to stream data
                required: true
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/playback/uri/repeat:
        get:
            description: Retrieves if the current uri will repeatedly play
            operationId: get-uri-repeat
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UriRepeat'
                    description: The current uri repeat value
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
        post:
            description: Set if the current uri should repeat when done
            operationId: post-uri-repeat
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UriRepeat'
                description: If the URI will be repeated
                required: true
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Playback
            - mozart
    /api/v1/powerlink/settings:
        get:
            description: get the current PowerLink settings
            operationId: get-powerlink-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PowerLinkSettings'
                    description: the PowerLink settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - PowerLink
            - mozart
        put:
            description: sets PowerLink settings
            operationId: set-powerlink-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PowerLinkSettings'
                description: PowerLink settings
                required: true
            responses:
                '204':
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - PowerLink
            - mozart
    /api/v1/powerlink/status:
        get:
            description: get the current PowerLink status
            operationId: get-powerlink-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PowerLinkStatus'
                    description: PowerLink status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - PowerLink
            - mozart
    /api/v1/product/curtain/position:
        get:
            description: returns curtain position and if moving
            operationId: get-product-curtain-position
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductCurtainStatus'
                    description: Curtain position
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get the position
            tags:
            - Product
            - mozart
        put:
            description: Move to specified position, use curtain/position to monitor
                progress
            operationId: put-product-curtain-position
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductCurtainPosition'
                description: New curtain position
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The curtain started to move
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Product
            - mozart
    /api/v1/product/curtain/toggle:
        post:
            description: Toggle curtain position closed and wide (for service - keeps
                curtains open)
            operationId: post-product-curtain-toggle
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The curtain started to move
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Product
            - mozart
    /api/v1/product/info:
        get:
            description: get overall information on the product
            operationId: get-product-info
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductInformation'
                    description: returns an the overall product information
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Product
            - mozart
    /api/v1/product/info/friendlyname:
        put:
            description: updates the friendly name
            operationId: set-product-friendly-name
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductFriendlyName'
                description: the friendly name for the product
                required: true
            responses:
                '204':
                    description: product friendly name updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Product
            - mozart
    /api/v1/product/licenses:
        get:
            description: get open source license information
            operationId: get-licence-info
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductLicenseArray'
                    description: returns information on open source licenses
            tags:
            - Product
            - mozart
    /api/v1/product/placement:
        get:
            description: Retrieve the placement of the product.
            operationId: get-placement
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PlacementEnum'
                    description: Returns the product placement
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Product
            - mozart
    /api/v1/product/settings/dailyreboot:
        get:
            description: gets the daily reboot setting
            operationId: get-daily-reboot
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DailyReboot'
                    description: returns the daily reboot setting
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Product
            - mozart
        put:
            description: updates the daily reboot setting
            operationId: set-daily-reboot
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DailyReboot'
                description: the new value for the daily reboot settings
                required: true
            responses:
                '200':
                    description: daily reboot value updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Product
            - mozart
    /api/v1/product/unlocktoken:
        delete:
            description: Clears the unlock token
            operationId: clear-unlock-token
            responses:
                '200':
                    description: Successfully cleared the unlock token.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Product
            - mozart
        get:
            description: Retrieves the currently active unlock token, as set by the
                put request.
            operationId: get-unlock-token
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnlockToken'
                    description: The currently active unlock token. It is not guaranteed
                        to be valid.
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: No current unlock token
            tags:
            - Product
            - mozart
        put:
            description: Applies an unlock token
            operationId: set-unlock-token
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UnlockToken'
                description: the new unlock token
                required: true
            responses:
                '201':
                    description: the new token was accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Product
            - mozart
    /api/v1/production/:
        get:
            description: get an overview of the specific production information for
                the product
            operationId: get-production-info
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionStatusInformation'
                    description: the production status information
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/activation-data:
        get:
            description: Fetch activation data
            operationId: get-activation-data
            responses:
                '200':
                    content:
                        application/octet-stream:
                            schema:
                                format: binary
                                type: string
                    description: the activation data to push to cloud at a later point
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Production
            - mozart
    /api/v1/production/auto-calibration:
        get:
            description: get the current auto-calibration status
            operationId: get-production-auto-calibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionAutoCalibrationInfo'
                    description: the auto calibration info
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Calibration
            - mozart
        post:
            description: start the auto-calibration
            operationId: start-production-auto-calibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionAutoCalibrationInfo'
                    description: the auto calibration is started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Calibration
            - mozart
    /api/v1/production/calibration/:
        get:
            description: get the current calibration data. Should also include uninitialized
                entries
            operationId: get-production-calibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCalibrationInfoArray'
                    description: the calibration data
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Calibration
            - mozart
    /api/v1/production/calibration/{id}:
        get:
            description: get the current calibration data for a specific item
            operationId: get-production-calibration-id
            parameters:
            -   description: identifies the calibration by id
                in: path
                name: id
                required: true
                schema:
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCalibrationInfo'
                    description: the calibration data
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Calibration
            - mozart
        post:
            description: set the calibration value, no effect until store-production-data
                and reboot
            operationId: post-production-calibration-id
            parameters:
            -   description: identifies the calibration by id
                in: path
                name: id
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionCalibrationUpdate'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCalibrationInfo'
                    description: the info on the calibration
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update the calibration data
            tags:
            - Calibration
            - mozart
    /api/v1/production/curtain-calibration:
        get:
            description: get curtain calibration info, status=done after calibration
                finished
            operationId: get-production-curtain-calibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCurtainCalibrationInfo'
                    description: the curtain calibration data
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Calibration
            - mozart
        post:
            description: start curtain-calibration
            operationId: start-production-curtain-calibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCurtainCalibrationInfo'
                    description: the curtain calibration is started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Calibration
            - mozart
    /api/v1/production/curtain/debug-level:
        put:
            description: Allows more details in logs when curtains move
            operationId: put-production-curtain-debug-level
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CurtainDebugLevel'
                description: New debug level (0=none)
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The curtain started to move
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/curtain/move:
        put:
            description: Move to specified position, use curtain/state to monitor
                progress
            operationId: put-production-curtain-move
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CurtainPosition'
                description: New curtain position
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The curtain started to move
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/curtain/move-to-angle:
        put:
            description: Move to specified angle, use curtain/state to monitor progress
            operationId: put-production-curtain-move-to-angle
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CurtainAngle'
                description: New curtain position in degrees
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The curtain started to move
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/curtain/state:
        get:
            description: returns Curtain state
            operationId: get-production-curtain-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CurtainStatus'
                    description: Curtain state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get the state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/lock-state:
        get:
            description: Get lock state
            operationId: get-lock-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockState'
                    description: Device lock state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Production
            - mozart
        put:
            description: Set lock state
            operationId: set-lock-state
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LockState'
                description: New lock state
                required: true
            responses:
                '202':
                    description: New lock state accepted, the device will reboot to
                        apply it
                '204':
                    description: Lock state unchanged
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot unlock locked device
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/store-production-data:
        post:
            description: store the current production data
            operationId: store-production-data
            responses:
                '200':
                    description: the production data has been stored
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Calibration
            - mozart
    /api/v1/production/testing/audiopath/channels:
        get:
            description: returns a list with the current channel status (muted/unmuted)
            operationId: get-production-testing-audiopath-channels
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionAudioPathChannels'
                    description: the list of available channels
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get channel list, specific error in the
                        error model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/audiopath/channels/{id}:
        post:
            description: updates the state of a identified channel
            operationId: post-production-testing-audiopath-channels
            parameters:
            -   description: identifies the channel. Must be a valid name (see get
                    endpoint above).
                in: path
                name: id
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                muted:
                                    type: boolean
                            type: object
                description: the muted state
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionAudioPathChannel'
                    description: the state of available channel after update
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update channel, specific error in the error
                        model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/audiopath/microphones/recording:
        get:
            description: returns the current microphone recording state.
            operationId: get-production-testing-audiopath-microphones-recordingstatus
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MicrophoneRecordingState'
                    description: the current microphone recording state.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to obtain microphone recording state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
        post:
            description: Sets the current microphone recording state.
            operationId: post-production-testing-audiopath-microphones-recordingstatus
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MicrophoneRecordingState'
                required: true
            responses:
                '200':
                    description: The current microphone recording state has been set.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Failed to set the microphone recording state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/audiopath/processing-bypass:
        get:
            description: returns the state of the processing bypass
            operationId: get-production-testing-audiopath-bypass
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingAudioPathProcessingByPass'
                    description: state of the processsing bypass
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get bypass state, specific error in the
                        error model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/audiopath/processing-bypass/{id}:
        post:
            description: updates the state of a identified bypass step
            operationId: post-production-testing-audiopath-bypass
            parameters:
            -   description: identifies the bypass step (see get endpoint above for
                    valid values)
                in: path
                name: id
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                enabled:
                                    type: boolean
                            type: object
                description: the enabled state
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingAudioPathProcessingStepByPass'
                    description: the state of available bypass step after update
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update channel, specific error in the error
                        model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/audiopath/processing-mode:
        get:
            description: returns the processing mode
            operationId: get-production-testing-audiopath-processing-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingAudioPathProcessingMode'
                    description: the current processing mode
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get processing mode, specific error in
                        the error model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
        post:
            description: updates the processing mode
            operationId: post-production-testing-audiopath-processing-mode
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionTestingAudioPathProcessingMode'
                description: the processing mode
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingAudioPathProcessingMode'
                    description: the processing mode after update
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update processing mode, specific error
                        in the error model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/battery-level-max:
        get:
            description: returns the value of max battery level
            operationId: get-production-testing-battery-level-max
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingBatteryLevelMax'
                    description: the value of max battery level
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to retrieve the value of max battery level
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
        post:
            description: set the value of max battery level in percent.
            operationId: post-production-testing-battery-level-max
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionTestingBatteryLevelMax'
                required: true
            responses:
                '200':
                    description: The max battery level was set as specified.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update the max battery level
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/functional/amplifier/powerstate:
        get:
            description: returns info on an amplifier on the product
            operationId: get-production-testing-functional-amplifier-powerstate
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OnOffState'
                    description: Returns the power state for the amplifier as 'on'
                        or 'off'.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get the amplifier info
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
        post:
            description: set the powerstate of the amplifier as either 'on' or 'off'.
            operationId: post-production-testing-functional-amplifier-powerstate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OnOffState'
                required: true
            responses:
                '200':
                    description: The amplifier powerstate was set as specified.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update the amplifier state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/io/buttons:
        get:
            description: returns the current button status mask and sensitivity.
            operationId: get-production-testing-io-buttons
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingButtonStatus'
                    description: The current button status.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to retrieve the button status
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/io/buttons/{id}:
        post:
            description: Simulate a specific button press
            operationId: post-production-testing-io-buttons
            parameters:
            -   description: Button identifier
                in: path
                name: id
                required: true
                schema:
                    enum:
                    - microphone
                    - bluetooth
                    - next
                    - previous
                    - playpause
                    - preset1
                    - preset2
                    - preset3
                    - preset4
                    - volume
                    - previousnext
                    - power
                    - networksetup
                    - factoryreset
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionTestingButton'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: string
                    description: A message stating success.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update the led state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/io/leds/{id}:
        post:
            description: set the state of the led
            operationId: post-production-testing-io-led-id
            parameters:
            -   description: identifies the led by id
                in: path
                name: id
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionTestingIOLEDUpdate'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: A message stating success.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update the led state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/lightsensor:
        get:
            description: returns the last light sensor result
            operationId: get-production-testing-lightsensor-result
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingLightSensorResult'
                    description: the light sensor result containing the LUX value
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to retrieve the light sensor result
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/proximity:
        get:
            description: returns the last proximity result
            operationId: get-production-testing-proximity-result
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingProximityResult'
                    description: the proximity result with detected presence and range
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to retrieve the proximity result
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
        post:
            description: Initiate the proximity measurement
            operationId: post-production-testing-proximity
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingProximityResult'
                    description: the proximity result with detected presence and range
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to start the proximity measurement
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/testing/self-test:
        get:
            description: returns the last known FEP self-test results
            operationId: get-production-testing-self-test-results
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingSelfTestResult'
                    description: the collection of FEP self-test results.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to retrieve the self-test result
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
        post:
            description: Initiate the self-test
            operationId: post-production-testing-self-test
            responses:
                '200':
                    description: self test started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to start the self-test
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/production/uuubootmode:
        put:
            description: Invoke this endpoint to trigger UUU boot mode.
            operationId: put-uuu-boot-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The device is being rebooted in UUU mode
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - Production
            - mozart
    /api/v1/proximity/settings:
        get:
            description: get the current proximity settings
            operationId: get-proximity-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProximitySettings'
                    description: the proximity settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
        put:
            description: sets the current proximity settings
            operationId: set-proximity-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProximitySettings'
                description: the proximity settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProximitySettings'
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/allowuserdataupload:
        get:
            description: Get whether automatic upload of user data to the cloud is
                currently allowed
            operationId: get-user-data-upload-allowed
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDataUpload'
                    description: Settings for automatic upload
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
        put:
            description: Sets whether automatic upload of user data to the cloud should
                be allowed
            operationId: set-user-data-upload-allowed
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserDataUpload'
                description: the new user data upload settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDataUpload'
                    description: the new settings were accepted
                '400':
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/available-countries:
        get:
            description: get the list of available countries
            operationId: get-setup-countrylist
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductCountryList'
                    description: the list of available countries
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/available-timezones:
        get:
            description: get the list of available timezones
            operationId: get-setup-timezonelist
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductTimeZoneList'
                    description: the list of available timezones
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/bluetooth/devices:
        get:
            description: get the bluetooth devices status
            operationId: get-bluetooth-devices-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BluetoothDeviceList'
                    description: returns the current bluetooth devices
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Bluetooth
            - mozart
    /api/v1/setup/bluetooth/devices/{deviceAddress}:
        delete:
            description: Unpairs the specified device.
            operationId: unpair-device
            parameters:
            -   description: the bluetooth address of the device to unpair
                in: path
                name: deviceAddress
                required: true
                schema:
                    type: string
            responses:
                '200':
                    description: Successfully unpaired the device.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Bluetooth
            - mozart
    /api/v1/setup/bluetooth/visibility:
        put:
            description: trigger bluetooth visibility
            operationId: set-bluetooth-visibility-on
            responses:
                '201':
                    description: bluetooth visibility activated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Bluetooth
            - mozart
    /api/v1/setup/bootNotificationSound:
        get:
            description: Get whether notification sounds on boot are enabled (non-GVA
                only)
            operationId: get-notification-on-boot
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotificationOnBoot'
                    description: Settings for notification sound on boot
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
        put:
            description: Sets whether notification sounds on boot are enabled (non-GVA
                only)
            operationId: set-notification-on-boot
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NotificationOnBoot'
                description: the new notification sound settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotificationOnBoot'
                    description: the new settings were accepted
                '400':
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/datetime:
        get:
            description: getting the current datetime and timezone settings
            operationId: get-setup-datetime
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductDateTimeSetup'
                    description: the datetime and timezone configured on the product
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
        put:
            description: setting the current datetime and timezone. currenttime ignored
            operationId: set-setup-datetime
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductDateTimeSetup'
                description: the new datetime and timezone setting
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductDateTimeSetup'
                    description: accepted the updated datetime and timezone settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/enableusagereport:
        get:
            description: Get whether automatic upload of usage report to Google is
                currently allowed
            operationId: get-usage-report-enabled
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UsageReportEnabled'
                    description: Settings for automatic upload
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Chromecast
            - mozart
        put:
            description: Sets whether automatic upload of usage report to Google should
                be allowed
            operationId: set-usage-report-enabled
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UsageReportEnabled'
                description: the new usage report upload settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UsageReportEnabled'
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Chromecast
            - mozart
    /api/v1/setup/environment:
        get:
            description: get the currently active environment (live, development,
                integration). This is used to target the device to e.g. use an alternate
                server
            operationId: get-product-environment
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductEnvironment'
                    description: The currently active environment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
        post:
            description: sets the currently active environment (live, development,
                integration). This is used to target the device to e.g. use an alternate
                server
            operationId: set-product-environment
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductEnvironment'
                description: the changed environment
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductEnvironment'
                    description: The currently active environment after the update
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/factoryreset:
        put:
            description: Invoke this endpoint to trigger a factory reset.
            operationId: post-factory-reset
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The device is being factory reset and will reboot
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '500':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to factory reset
            tags:
            - Settings
            - mozart
    /api/v1/setup/generator:
        get:
            description: get the generator settings
            operationId: get-generator-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GeneratorSettings'
                    description: The generator settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
        put:
            description: set the generator settings
            operationId: set-generator-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GeneratorSettings'
                description: the generator settings
                required: true
            responses:
                '201':
                    description: The generator settings update was accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/linein:
        get:
            description: get the linein settings
            operationId: get-linein-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LineInSettings'
                    description: The linein settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - LineIn
            - mozart
        put:
            description: set the linein settings
            operationId: set-linein-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LineInSettings'
                description: the linein settings
                required: true
            responses:
                '202':
                    description: The linein settings update was accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - LineIn
            - mozart
    /api/v1/setup/locale:
        get:
            description: Returns the current locale.
            operationId: get-locale
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Locale'
                    description: Current locale
            tags:
            - Settings
            - mozart
        put:
            description: Change locale.
            operationId: set-locale
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Locale'
                description: New locale to apply. E.g. 'da_DK', 'en_US', 'de_DE'
                required: true
            responses:
                '204':
                    description: New locale has been applied.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/mode:
        get:
            description: Returns the current product mode. This is for "shop" or "normal"
                mode.
            operationId: get-product-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductMode'
                    description: Current product mode
            tags:
            - Settings
            - mozart
        put:
            description: Change product mode. This is for "shop" or "normal" mode.
            operationId: set-product-mode
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductMode'
                description: New product mode to apply
                required: true
            responses:
                '202':
                    description: 'The new product mode was accepted, but may not have
                        been applied yet. Applying the new mode may cause the device
                        to reboot or otherwise become temporarily unavailable.

                        '
                '204':
                    description: New product mode applied.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/presets:
        get:
            description: Returns the preset configuration
            operationId: get-presets
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PresetMap'
                    description: The preset audio source mapping
            tags:
            - Settings
            - mozart
    /api/v1/setup/presets/restore-default:
        post:
            description: Restore presets to factory default settings
            operationId: restore-default-presets
            responses:
                '204':
                    description: Successfully restored default presets
            tags:
            - Settings
            - mozart
    /api/v1/setup/presets/{presetId}/netradio:
        put:
            description: Stores a netradio station as preset
            operationId: set-preset-netradio
            parameters:
            -   description: The key identifying the preset to update
                in: path
                name: presetId
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NetRadioPreset'
                description: The netradio station to store as preset
                required: true
            responses:
                '204':
                    description: Successfully stored netradio preset
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/regional:
        get:
            description: getting the regional settings for the product
            operationId: get-setup-regional
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductRegionalSetup'
                    description: the regional settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
        put:
            description: setting the regional settings for the product
            operationId: set-setup-regional
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductRegionalSetup'
                description: the new regional settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductRegionalSetup'
                    description: the regional settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/remotes:
        delete:
            description: Removes a paired bluetooth remote
            operationId: delete-bluetooth-remote
            parameters:
            -   description: The MAC address of the bluetooth remote to remove
                in: query
                name: deviceAddress
                required: true
                schema:
                    type: string
            responses:
                '200':
                    description: Remote is being removed
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
        get:
            description: Gets a list of paired bluetooth remotes
            operationId: get-bluetooth-remotes
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PairedRemoteResponse'
                    description: List of paired remotes was obtained
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/setup/voice:
        get:
            description: get the voice settings
            operationId: get-voice-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VoiceSettings'
                    description: The voice settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
        put:
            description: set the voice settings
            operationId: set-voice-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VoiceSettings'
                description: the voice settings
                required: true
            responses:
                '201':
                    description: The voice settings update was accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Settings
            - mozart
    /api/v1/softwareupdate:
        get:
            description: get the current software update status
            operationId: get-softwareupdate-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoftwareUpdateStatus'
                    description: the software update status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Software update
            - mozart
    /api/v1/softwareupdate/settings:
        get:
            description: get the current software update settings
            operationId: get-softwareupdate-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoftwareUpdateSettings'
                    description: the software update settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Software update
            - mozart
        put:
            description: sets the current software update settings
            operationId: set-softwareupdate-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SoftwareUpdateSettings'
                description: the software update settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoftwareUpdateSettings'
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Software update
            - mozart
    /api/v1/softwareupdate/{swupdatecommand}:
        post:
            description: triggers a software update action
            operationId: post-softwareupdate-command
            parameters:
            -   description: the named command to execute
                in: path
                name: swupdatecommand
                required: true
                schema:
                    enum:
                    - download
                    - install
                    type: string
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Software update
            - mozart
    /api/v1/sound/features:
        get:
            description: Get available sound features. By default you will only get
                sound features that match the current role (standalone or multichannel),
                but you can use the `?all=true` query parameter to get sound features
                for all roles.
            operationId: get-sound-features
            parameters:
            -   description: Get sound features for all speaker roles
                in: query
                name: all
                schema:
                    type: boolean
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SupportedSoundFeatures'
                    description: Supported sound features
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes:
        get:
            description: 'Get available listening modes. By default you will only
                get listening

                modes that match the current role (standalone or multichannel), but
                you

                can use the `?all=true` query parameter to get listening modes for
                all

                roles.

                '
            operationId: get-listening-mode-set
            parameters:
            -   description: Get listening modes for all speaker roles
                in: query
                name: all
                schema:
                    type: boolean
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListeningModeSet'
                    description: the list of listening modes
            tags:
            - Sound
            - mozart
        post:
            description: Create a new listening mode
            operationId: create-listening-mode
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NewListeningMode'
            responses:
                '201':
                    content:
                        application/json:
                            example:
                                href: /api/v1/sound/listening-modes/42
                            schema:
                                $ref: '#/components/schemas/NewResource'
                    description: The listening mode has been successfully created
                '400':
                    $ref: '#/components/responses/BadListeningMode'
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes/active:
        get:
            description: Get the active listening mode
            operationId: get-active-listening-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListeningModeRef'
                    description: the active listening mode
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes/{id}:
        delete:
            description: Delete a specific listening mode
            operationId: delete-listening-mode
            responses:
                '204':
                    description: Listening mode deleted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot delete listening mode
                '404':
                    $ref: '#/components/responses/MissingListeningMode'
            tags:
            - Sound
            - mozart
        get:
            description: Get specific listening mode
            operationId: get-listening-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListeningMode'
                    description: Listening mode
                '404':
                    $ref: '#/components/responses/MissingListeningMode'
            tags:
            - Sound
            - mozart
        parameters:
        -   $ref: '#/components/parameters/ListeningModeID'
        put:
            description: Update a specific listening mode
            operationId: update-listening-mode
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ListeningModeUpdate'
            responses:
                '204':
                    description: Listening mode updated
                '400':
                    $ref: '#/components/responses/BadListeningMode'
                '404':
                    $ref: '#/components/responses/MissingListeningMode'
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes/{id}/activate:
        parameters:
        -   $ref: '#/components/parameters/ListeningModeID'
        post:
            description: Activate a listening mode
            operationId: activate-listening-mode
            responses:
                '204':
                    description: Listening mode active
                '404':
                    $ref: '#/components/responses/MissingListeningMode'
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings:
        get:
            description: get the sound settings
            operationId: get-sound-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoundSettings'
                    description: sound settings returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments:
        get:
            description: get the sound settings adjustments
            operationId: get-sound-settings-adjustments
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoundAdjustments'
                    description: sound settings adjustments returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/ambience:
        put:
            description: update the sound settings adjustments for ambience
            operationId: set-sound-settings-adjustments-ambience
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Ambience'
                description: the ambience
                required: true
            responses:
                '201':
                    description: accepted the ambience sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/bass:
        put:
            description: update the sound settings adjustments for bass
            operationId: set-sound-settings-adjustments-bass
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Bass'
                description: the bass level
                required: true
            responses:
                '201':
                    description: accepted the bass sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/directivity:
        put:
            description: update the sound settings adjustments for directivity
            operationId: set-sound-settings-adjustments-directivity
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Directivity'
                description: the directivity
                required: true
            responses:
                '201':
                    description: accepted the directivity sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/fadein:
        put:
            description: update the sound settings enable/disable fade-in of audio
            operationId: set-sound-settings-adjustments-fade-in
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/FadeIn'
                description: state of fade-in of audio playback
                required: true
            responses:
                '201':
                    description: accepted the fade-in settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/loudness:
        put:
            description: update the sound settings adjustments for loudness
            operationId: set-sound-settings-adjustments-loudness
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Loudness'
                description: the loudness mode
                required: true
            responses:
                '201':
                    description: accepted the loudness sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/treble:
        put:
            description: update the sound settings adjustments for treble
            operationId: set-sound-settings-adjustments-treble
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Treble'
                description: the treble level
                required: true
            responses:
                '201':
                    description: accepted the treble sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/roomCompensation:
        get:
            description: get the sound setting room compensation
            operationId: get-sound-settings-room-compensation
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RoomCompensationInfo'
                    description: sound settings room-compensation returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
        put:
            description: start the room-compensation
            operationId: start-sound-settings-room-compensation
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RoomCompensationType'
                description: The type of room compensation to run
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RoomCompensationInfo'
                    description: the room-compensation is started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: wrong roomCompensation type, microphone switch muted
                        or placement and charger requirement isn't fulfilled
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/roomcompensation/debug:
        put:
            description: enable or disable room-compensation debug mode
            operationId: set-sound-settings-room-compensation-debug
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RoomCompensationDebug'
                description: room-compensation debug
                required: true
            responses:
                '200':
                    description: room-compensation debug enabled or disabled
                '500':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: internal error
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/roomcompensation/enable:
        put:
            description: enable/disable calculated room compensation
            operationId: set-sound-settings-roomcompensation
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RoomCompensationEnabled'
                description: the room compensation mode
                required: true
            responses:
                '201':
                    description: accepted the room compensation sound setting
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failure enabling room compensation or placement and
                        charger requirement isn't fulfilled
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/toneTouch:
        get:
            description: get the sound settings tone touch
            operationId: get-sound-settings-tonetouch
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoundToneTouch'
                    description: sound settings tonetouch returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
        put:
            description: set the sound settings tone touch
            operationId: set-tone-touch-values
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SoundToneTouch'
                description: The tone touch values to apply
                required: true
            responses:
                '201':
                    description: tone touch values accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request (e.g. values cannot be set)
            tags:
            - Sound
            - mozart
    /api/v1/sound/speaker-preset/active:
        get:
            description: current selected speaker-preset id (or none)
            operationId: get-sound-speaker-preset-active
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerPresetActive'
                    description: speakerPreset identifier (or none)
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/speaker-preset/config:
        get:
            description: map power-link speakerPreset to soundDirection
            operationId: get-sound-speaker-preset
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerPresetList'
                    description: presets returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
        put:
            description: map power-link speakerPreset to soundDirection
            operationId: set-sound-speaker-preset
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerPresetList'
                description: map speakerPreset to soundDirection
                required: true
            responses:
                '201':
                    description: accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/speakergroup:
        post:
            description: Add a new speaker group
            operationId: post-speakergroup
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerGroup'
                description: Friendly name and optionally speaker group data for the
                    new speaker group.
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerGroup'
                    description: Speaker group added successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot add speaker group
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/speakergroup/active:
        get:
            description: Get the active speaker group
            operationId: get-speakergroup-active
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerGroupOverview'
                    description: The active speaker group, or empty if none
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/speakergroup/{id}:
        delete:
            description: 'Delete the speaker group with given id.

                If the active speaker group is deleted, the first speaker group in
                the list will

                automatically be made active.

                '
            operationId: delete-speakergroup
            parameters:
            -   description: ID of speaker group to delete
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/SpeakerGroupId'
            responses:
                '200':
                    description: Speaker group deleted successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Speaker group not found (invalid request)
            tags:
            - SpeakerGroup
            - mozart
        get:
            description: Get the speaker group with the given id
            operationId: get-speakergroup
            parameters:
            -   description: ID of the speaker group to get
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/SpeakerGroupId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerGroup'
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Speaker group with the given ID doesn't exist
            tags:
            - SpeakerGroup
            - mozart
        put:
            description: Modify speaker group with given id
            operationId: modify-speakergroup
            parameters:
            -   description: ID of the speaker group to modify
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/SpeakerGroupId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerGroup'
                description: Settings for given speaker group. Multiple settings can
                    be applied at once.
                required: true
            responses:
                '202':
                    description: speaker group update in process
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't update speaker groups
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/speakergroup/{id}/activate:
        post:
            description: Set active speaker group
            operationId: post-speakergroup-activate
            parameters:
            -   description: ID of the speaker group to activate
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/SpeakerGroupId'
            responses:
                '204':
                    description: Active speaker group updated successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't update active speaker group
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Speaker group with the given ID doesn't exist
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/speakergroups:
        get:
            description: Get list of configured speaker groups
            operationId: get-speakergroups
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerGroupList'
                    description: The speaker group list
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/volume:
        get:
            description: get the current volume state
            operationId: get-current-volume
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VolumeState'
                    description: The currently active volume
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sound/volume/level:
        put:
            description: set the current volume level
            operationId: set-current-volume-level
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VolumeLevel'
                description: The volume level to apply
                required: true
            responses:
                '201':
                    description: volume level change accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request (e.g. volume cannot be set)
            tags:
            - Sound
            - mozart
    /api/v1/sound/volume/mute:
        put:
            description: set the volume mute state
            operationId: set-volume-mute
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VolumeMute'
                description: The mute state to apply
                required: true
            responses:
                '201':
                    description: volume mute state accepted
                '400':
                    description: volume mute not accepted
            tags:
            - Sound
            - mozart
    /api/v1/sound/volume/settings:
        get:
            description: 'Get the current volume settings for default and maximum
                volume level

                '
            operationId: get-volume-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VolumeSettings'
                    description: returns the volume settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
        put:
            description: 'Set the current volume settings for default and maximum
                volume level

                '
            operationId: set-volume-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VolumeSettings'
                description: The settings to apply
                required: true
            responses:
                '201':
                    description: volume settings accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Sound
            - mozart
    /api/v1/sources/settings:
        delete:
            description: Reset all settings of all sources. Mostly for development
                purposes.
            operationId: reset-all-source-settings
            responses:
                '204':
                    description: Source settings reset
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - SourcesSettings
            - mozart
        get:
            description: Get all settings of all sources
            operationId: get-all-source-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SourceSettingsArray'
                    description: source settings returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - SourcesSettings
            - mozart
    /api/v1/sources/settings/order:
        delete:
            description: Reset the source order to the default order
            operationId: reset-source-order
            responses:
                '204':
                    description: Source order reset to the default order
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - SourcesSettings
            - mozart
    /api/v1/sources/settings/{id}:
        get:
            description: Get all settings of a source
            operationId: get-source-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SourceSettings'
                    description: source settings returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - SourcesSettings
            - mozart
        parameters:
        -   $ref: '#/components/parameters/SourceId'
    /api/v1/sources/settings/{id}/friendly-name:
        delete:
            description: Reset the friendly name to the default name.
            operationId: reset-source-friendly-name
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SourceFriendlyName'
                    description: Source friendly name after reset returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to reset friendly name
            tags:
            - SourcesSettings
            - mozart
        get:
            description: Get the friendly name of a source
            operationId: get-source-friendly-name
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SourceFriendlyName'
                    description: Source friendly name returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - SourcesSettings
            - mozart
        parameters:
        -   $ref: '#/components/parameters/SourceId'
        put:
            description: Set the friendly name of a source
            operationId: set-source-friendly-name
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SourceFriendlyName'
                required: true
            responses:
                '204':
                    description: Source friendly name updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to edit friendly name
            tags:
            - SourcesSettings
            - mozart
    /api/v1/sources/settings/{id}/order:
        get:
            description: Get the order of a source (zero based index)
            operationId: get-source-order
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SourceOrder'
                    description: Source order returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - SourcesSettings
            - mozart
        parameters:
        -   $ref: '#/components/parameters/SourceId'
        put:
            description: Set the order of a source (zero based index)
            operationId: set-source-order
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SourceOrder'
                required: true
            responses:
                '204':
                    description: Source order updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to edit source order
            tags:
            - SourcesSettings
            - mozart
    /api/v1/sources/settings/{id}/remote-lists:
        delete:
            description: Reset the remote lists setting to the default name.
            operationId: reset-remote-lists
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RemoteLists'
                    description: Remote lists setting after reset returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to reset remote lists setting
            tags:
            - SourcesSettings
            - mozart
        get:
            description: Get the remote lists setting of a source
            operationId: get-remote-lists
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RemoteLists'
                    description: Remote lists setting returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - SourcesSettings
            - mozart
        parameters:
        -   $ref: '#/components/parameters/SourceId'
        put:
            description: Set the remote lists setting of a source
            operationId: set-remote-lists
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RemoteLists'
                required: true
            responses:
                '204':
                    description: Remote lists setting updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to edit remote lists setting
            tags:
            - SourcesSettings
            - mozart
    /api/v1/speakerlink/channel:
        get:
            description: 'Returns the current audio channel this speaker will play.

                '
            operationId: get-speakerlink-channel
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerLinkChannel'
                    description: Current audio channel
            summary: Assigned channel
            tags:
            - SpeakerLink
            - mozart
        put:
            description: 'Changes the assigned audio channel this speaker will play.

                '
            operationId: set-speakerlink-channel
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerLinkChannel'
                required: true
            responses:
                '202':
                    description: Channel change in progress
                '400':
                    description: Missing/unknown channel
            summary: Change assigned channel
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/format:
        get:
            description: 'Returns the currently used SpeakerLink streaming format.

                '
            operationId: get-speakerlink-format
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerLinkFormat'
                    description: Format
            summary: Get SpeakerLink streaming format
            tags:
            - SpeakerLink
            - mozart
        put:
            description: 'Changes the SpeakerLink streaming format. If you have a
                problem-free

                wireless environment, use uncompressed 24-bit LPCM (`pcm` format name).

                In situations with crowded wireless environment, use the high quality

                compressed LC3+ format (`lc3plus`)

                '
            operationId: set-speakerlink-format
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerLinkFormat'
                required: true
            responses:
                '202':
                    description: Format change in progress
                '400':
                    description: Missing/unknown format
            summary: Set SpeakerLink streaming format
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/network-delay:
        get:
            description: 'Returns the currently configured network delay.

                '
            operationId: get-speakerlink-network-delay
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerLinkNetworkDelay'
                    description: Format
            summary: Get SpeakerLink currently configured network delay in milliseconds.
            tags:
            - SpeakerLink
            - mozart
        put:
            description: 'Changes the SpeakerLink network delay.

                '
            operationId: set-speakerlink-network-delay
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerLinkNetworkDelay'
                required: true
            responses:
                '202':
                    description: Network delay change in progress
                '400':
                    description: Value is out of bounds
            summary: Set SpeakerLink network delay in milliseconds.
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/peers:
        get:
            description: 'Returns a list of speakers that this speaker can be combined
                with to

                form a multi-channel setup.

                '
            operationId: get-speakerlink-peers
            responses:
                '200':
                    content:
                        application/json:
                            example: "[\n  {\n    \"baseUrl\": \"http://192.168.0.101\"\
                                ,\n    \"ipAddress\": \"192.168.0.101\",\n    \"serialNumber\"\
                                : \"12345678\"\n  }\n]\n"
                            schema:
                                items:
                                    $ref: '#/components/schemas/SpeakerLinkPeer'
                                type: array
                    description: Compatible multi-channel peers
            summary: Potential secondary speakers
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/psk:
        get:
            description: 'Returns the SpeakerLink multi-channel AP password.

                '
            operationId: get-speakerlink-psk
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerLinkPSK'
                    description: AP password
            summary: Get SpeakerLink AP password
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/role:
        get:
            description: "Speakers that are not part of a multi-channel setup will\
                \ return:\n\n```json\n{\n  \"role\": \"none\",\n  \"desired\": \"\
                none\"\n}\n```\n\nPrimary multi-channel speakers will return something\
                \ like:\n\n```json\n{\n  \"role\": \"primary\",\n  \"desired\": \"\
                primary\",\n  \"channel\": \"left\"\n}\n```\n\nSecondary multi-channel\
                \ speakers will return something like:\n\n```json\n{\n  \"role\":\
                \ \"secondary\",\n  \"desired\": \"secondary\",\n  \"primary\": \"\
                12345678\",\n  \"channel\": \"right\"\n}\n```\n\nSecondary multi-channel\
                \ speakers that are in progress of being setup:\n\n```json\n{\n  \"\
                role\": \"none\",\n  \"desired\": \"secondary\",\n  \"primary\": \"\
                12345678\",\n  \"channel\": \"right\"\n}\n```\n"
            operationId: get-speakerlink-role
            responses:
                '200':
                    content:
                        application/json:
                            example: "{\n  \"role\": \"primary\",\n  \"desired\":\
                                \ \"primary\",\n  \"channel\":\"left\"\n}\n"
                            schema:
                                $ref: '#/components/schemas/SpeakerLinkRole'
                    description: Multi-channel role
            summary: Get multi-channel role
            tags:
            - SpeakerLink
            - mozart
        put:
            description: "Bring a speaker out of a multi-channel setup by using the\
                \ \"none\" role:\n\n```json\n{\n  \"role\": \"none\"\n}\n```\n\nMake\
                \ a speaker the primary in a multi-channel setup by using the\n\"\
                primary\" role:\n\n```json\n{\n  \"role\": \"primary\",\n  \"channel\"\
                : \"left\"\n}\n```\n\nYou can optionally provide a channel to this\
                \ speaker should play or you\ncan provide that later using the\n[`/api/v1/speakerlink/channel`](#/speakerlink/set-speakerlink-channel)\
                \ end-point.\n\nMake a speaker a secondary in a multi-channel setup\
                \ by using the\n\"secondary\" role:\n\n```json\n{\n  \"role\": \"\
                secondary\",\n  \"primary\": \"12345678\",\n  \"channel\": \"right\"\
                \n}\n```\n\nLike primary speakers you can optionally configure the\
                \ channel now. You\nmust provide the serial number of the primary\
                \ speaker in the\nmulti-channel setup the speaker should join.\n"
            operationId: set-speakerlink-role
            requestBody:
                content:
                    application/json:
                        example: "{\n  \"role\": \"secondary\",\n  \"primary\": \"\
                            12345678\",\n  \"channel\": \"right\"\n}\n"
                        schema:
                            $ref: '#/components/schemas/SpeakerLinkRole'
                required: true
            responses:
                '202':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AsyncResult'
                    description: 'Role change in progress.

                        '
                '204':
                    description: Current state already matches the requested state.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Requested state is malformed.
            summary: Change multi-channel role
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/secondaries:
        get:
            description: 'Returns a list of secondary speakers currently associated
                with this

                speaker.

                '
            operationId: get-speakerlink-secondaries
            responses:
                '200':
                    content:
                        application/json:
                            example: "[\n  {\n    \"baseUrl\": \"http://192.168.0.101/proxy/12345678\"\
                                ,\n    \"ipAddress\": \"\"172.18.128.42\",\n    \"\
                                serialNumber\": \"12345678\"\n  }\n]\n"
                            schema:
                                items:
                                    $ref: '#/components/schemas/SpeakerLinkSecondary'
                                type: array
                    description: List of secondaries
            summary: Associated secondary speakers
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/secondaries/{id}:
        delete:
            description: 'Changes the role of a secondary back to "none".

                '
            operationId: remove-speakerlink-secondary
            responses:
                '202':
                    description: Secondary role change in progress
                '404':
                    description: Secondary does not exist
            summary: Break secondary association
            tags:
            - SpeakerLink
            - mozart
        head:
            operationId: has-speakerlink-secondary
            responses:
                '204':
                    description: Secondary exists
                '404':
                    description: Secondary does not exist
            summary: Secondary status
            tags:
            - SpeakerLink
            - mozart
        parameters:
        -   description: Secondary speaker serial number
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/SerialNumber'
    /api/v1/speakerlink/statisticsserver:
        delete:
            description: Unsets the current statistics server
            operationId: delete-statistics-server
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: 'Disconnection started

                        '
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Requested state is malformed.
            tags:
            - mozart
            - Developer
        get:
            description: Get current server for reporting statistics
            operationId: get-statistics-server
            responses:
                '200':
                    content:
                        application/json:
                            example: "[ \n  \"mqtt://192.168.0.1:1234\"\n]\n"
                            schema:
                                items:
                                    type: string
                                type: array
                    description: Current statistics server(s)
            tags:
            - mozart
            - Developer
        put:
            description: Set server(s) for reporting statistics. Will overwrite any
                current servers
            operationId: set-statistics-server
            requestBody:
                content:
                    application/json:
                        example: "[\n  \"mqtt://192.168.0.1:1234\",\n  \"mqtts://user:pass@192.168.0.1:8883\"\
                            \n]\n"
                        schema:
                            items:
                                type: string
                            type: array
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: 'Connection initialized

                        '
                '204':
                    description: Server already set to this value
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Requested state is malformed.
            tags:
            - mozart
            - Developer
    /api/v1/speakerlink/stats:
        get:
            description: Developer status overview of SpeakerLink statistics
            operationId: get-speakerlink-stats
            responses:
                '200':
                    content:
                        text/html:
                            schema:
                                type: string
                    description: HTML page of statistics
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            tags:
            - mozart
            - Developer
    /api/v1/speakers/wireless/wisa/resetpairing:
        put:
            description: Invoke this endpoint to trigger reset of any WISA pairing
            operationId: post-wisa-resetpairing
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: Any pairing has been reset and a new pairing is possible
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: WPL source not found
            tags:
            - Wisa
            - mozart
    /api/v1/speakers/wireless/wisa/settings:
        get:
            description: get the current WISA module settings
            operationId: get-wisa-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WisaSettings'
                    description: the WISA module settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: WPL source not found
            tags:
            - Wisa
            - mozart
        put:
            description: sets the current WISA module settings
            operationId: set-wisa-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WisaSettings'
                description: the WISA module settings
                required: true
            responses:
                '204':
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: WPL source not found
            tags:
            - Wisa
            - mozart
    /api/v1/speakers/wireless/wisa/status:
        get:
            description: get the current WISA module status
            operationId: get-wisa-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WisaStatus'
                    description: WISA status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: WPL source not found
            tags:
            - Wisa
            - mozart
    /api/v1/state:
        get:
            description: Get an overall state from the product.
            operationId: get-product-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductState'
                    description: A snapshot of the overall state of the product
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Product
            - mozart
    /api/v1/state/linein:
        get:
            description: Get state of linein
            operationId: get-linein-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LineInStateEnum'
                    description: linein state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - LineIn
            - mozart
    /api/v1/state/microphones:
        get:
            description: Get state of the microphones
            operationId: get-microphone-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MicrophonesState'
                    description: microphone states
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Microphone
            - mozart
        put:
            description: Change state of the microphones (software only)
            operationId: set-microphone-state-change
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MicrophoneState'
                description: the state of the microphones
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The microphone state change was successful
                '202':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The microphone state change was accepted but physical
                        switch is in off-position
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Microphone
            - mozart
    /api/v1/state/power:
        get:
            description: Get power state of the product
            operationId: get-power-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PowerStateEnum'
                    description: The power state of the product
            tags:
            - Power
            - mozart
        put:
            description: Changes the power state of the product
            operationId: set-power-state
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PowerStateEnum'
                description: The power state to be set
                required: true
            responses:
                '201':
                    description: Accepted the updated power state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Power
            - mozart
    /api/v1/state/power/standby/settings:
        get:
            description: Get standby settings of the product
            operationId: get-standby-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandbySettings'
                    description: The standby settings of the product
            tags:
            - Power
            - mozart
        put:
            description: Changes the standby settings of the product
            operationId: set-standby-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StandbySettings'
                description: The standby settings
                required: true
            responses:
                '201':
                    description: Accepted the updated standby setting
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Power
            - mozart
    /api/v1/state/reboot:
        put:
            description: Reboot the mozart device
            operationId: post-reboot
            responses:
                '200':
                    description: The device is being rebooted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Power
            - mozart
    /api/v1/state/standby:
        put:
            description: Puts the device in standby
            operationId: post-standby
            responses:
                '200':
                    description: The device is put in standby
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Power
            - mozart
    /api/v1/timer:
        post:
            description: Add a new timer to the product
            operationId: add-timer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Timer'
                description: New timer configuration
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Timer'
                    description: Timer added successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot add timer
            tags:
            - Alarms
            - mozart
    /api/v1/timer/{id}:
        get:
            description: Returns the running timer
            operationId: get-timer
            parameters:
            -   description: ID of the timer to get
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Timer'
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: No timer found
            tags:
            - Alarms
            - mozart
    /api/v1/timer/{id}/cancel:
        post:
            description: Cancels the running timer
            operationId: cancel-timer
            parameters:
            -   description: ID of the timer to cancel
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Timer cancelled
                '404':
                    description: Not found
            tags:
            - Alarms
            - mozart
    /api/v1/timer/{id}/pause:
        post:
            description: Pauses the running timer
            operationId: pause-timer
            parameters:
            -   description: ID of the timer to pause
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Timer paused
                '404':
                    description: Not found
            tags:
            - Alarms
            - mozart
    /api/v1/timer/{id}/resume:
        post:
            description: Resume the timer
            operationId: resume-timer
            parameters:
            -   description: ID of the timer to resume
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Timer resumed
                '404':
                    description: Not found
            tags:
            - Alarms
            - mozart
    /api/v1/timers:
        get:
            description: Returns a list of configured timers
            operationId: get-all-timers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TimerList'
                    description: Successful request
            tags:
            - Alarms
            - mozart
    /api/v1/timers/maximum-allowed:
        get:
            description: Returns the maximum allowed number of timers on the product
            operationId: get-maximum-allowed-timers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NumberOfAllowedAlarms'
                    description: Successful request
            tags:
            - Alarms
            - mozart
    /unbox/connect:
        post:
            description: Connect to the specified wireless network
            operationId: post-connect-attempt
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WifiCredentials'
                            description: The encrypted SSID and password
                            required:
                            - SSID
                            - password
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: Connect attempt succeeded.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Unabled to connect to the specified wifi network,
                        error model will describe the specific issue encountered
            tags:
            - Setup
            - mozart
    /unbox/networks:
        get:
            description: Get available wifi-networks
            operationId: get-available-wifi-networks
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WifiArray'
                    description: the list of available wifi networks.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Unable to retrieve the list of wifi networks, error
                        model will describe the specific issue encountered
            tags:
            - Setup
            - mozart
    /unbox/product:
        get:
            description: Get basic product advertising data
            operationId: get-product-advertisement-info
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicProductInfo'
                    description: retrieve basic product info needed for wifi provisioning
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Unable to retrieve the basic product info, error
                        model will describe the specific issue encountered
            tags:
            - Setup
            - mozart
    /unbox/publickey:
        get:
            description: Gets the public key. The key is expected to be encrypted
                using PKCS1_OAEP padding
            operationId: get-wifi-provisioning-public-key
            responses:
                '200':
                    content:
                        text/plain:
                            schema:
                                type: string
                    description: retrieve the public key for subsequent encryption
                        of wifi credentials
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Unable to retrieve the public key, error model will
                        describe the specific issue encountered
            tags:
            - Setup
            - mozart
    /unbox/regulatorydomain:
        get:
            description: getting the Wi-Fi regulatory domain info for the product
            operationId: get-wifi-regulatory
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WiFiRegulatorySetting'
                    description: the regulatory domain info
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Setup
            - mozart
        put:
            description: set the Wi-Fi regulatory domain  for the product
            operationId: set-wifi-regulatory
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WiFiRegulatorySetting'
                description: the new regulatory domain settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WiFiRegulatorySetting'
                    description: the regulatory domain settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Setup
            - mozart
    /unbox/scan:
        put:
            description: Trigger a Wi-Fi scan
            operationId: post-wifi-scan
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The Wi-Fi scan is triggered
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            tags:
            - Setup
            - mozart


components:
    parameters:
        ListeningModeID:
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/ListeningModeID'
        RecordId:
            in: path
            name: recordId
            required: true
            schema:
                type: string
        SourceId:
            in: path
            name: id
            required: true
            schema:
                type: string
        SpeakerId:
            description: Speaker ID
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/SpeakerId'
    responses:
        BadListeningMode:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorModel'
            description: Invalid listening mode
        BeolinkExperiencesResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BeolinkExperiencesRequest'
            description: |
                Scanning current experiences. This operation is asynchronous. You can
                check the results by matching the `requestID` in the response with that
                of the `` web socket event.
        BeolinkJoinResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BeolinkJoinRequest'
            description: |
                Join started

                Joining always happens asynchronously, use the `requestID` field in
                the response to match your request with a
                `WebsocketEventBeolinkJoinResult` web socket event.
        EmptySuccess:
            description: Success
        MissingListeningMode:
            description: No such listening mode
        NotFound:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorModel'
            description: Resource not found
    schemas:
        Action:
            description: |
                An action object. Examples:

                RadioAction:
                ```json
                {
                  "type": "radio",
                  "radioStationId": "8779112938791514"
                }
                ```

                ToneAction:
                ```json
                {
                  "type": "tone",
                  "toneName": "alarm_2"
                }
                ```

                SourcePresetAction:
                ```json
                {
                  "type": "sourcePreset",
                  "source": {
                    "value": "spotify"
                  },
                  "presetKey": "Preset3"
                }
                ```

                DeezerFlowAction:
                ```json
                {
                  "type": "deezerFlow",
                  "deezerUserId": "1234"
                }
                ```

                ActivateSourceAction:
                ```json
                {
                  "type": "activateSource",
                  "source": {
                    "value": "spotify"
                  }
                }
                ```

                PlayQueueAction:
                ```
                  {
                    "type": "playQueue",
                    "queueItem": {
                      "provider": {
                        "value": "deezer"
                      },
                      "startNowFromPosition": 0,
                      "type": "playlist",
                      "uri": "playlist:8074581462"
                    },
                    "queueSettings": {
                      "consume": false,
                      "repeat": "none",
                      "shuffle": false
                    }
                  }
                ```

                StandbyAction:
                ```json
                {
                  "type": "standby"
                }
                ```

                AllStandbyAction:
                ```json
                {
                  "type": "allStandby"
                }
                ```

                TouchToJoinAction:
                ```json
                {
                  "type": "touchToJoin"
                }
                ```

                ButtonShortPressAction:
                ```json
                {
                  "type": "buttonShortPress",
                  "buttonName": "preset1"
                }
                ```

                FallbackAction:
                ```json
                {
                  "type": "fallback"
                }
                ```

                VolumeAction:
                ```json
                {
                  "type": "volume",
                  "volumeLevel": 25
                }
                ```

                StopAction:
                ```json
                {
                  "type": "stop",
                  "stopDuration": 1300
                }
                ```

                TriggerContentAction:
                ```json
                {
                  "contentId": "tv://netflix",
                  "type": "triggerContent"
                }
                ```

                SpeakerGroupAction:
                ```json
                {
                  "type": "speakerGroup",
                  "speakerGroupId": "00112233-4455-6677-8899-aabbccddeeff"
                }
                ```

                ListeningModeAction:
                ```json
                {
                  "type": "listeningMode",
                  "listeningModeId": 1234
                }
                ```

                StandAction:
                ```json
                {
                  "type": "stand",
                  "standPosition": {
                    "angle": 7.5
                  }
                }
                ```
            properties:
                buttonName:
                    description: Name of the Button used for button-press types ('buttonShortPress')
                    enum:
                    - microphone
                    - bluetooth
                    - next
                    - previous
                    - playPause
                    - previousNext
                    - preset1
                    - preset2
                    - preset3
                    - preset4
                    nullable: true
                    type: string
                contentId:
                    description: Id of content only used for 'type=triggerContent'
                    nullable: true
                    type: string
                deezerUserId:
                    description: Id of user only used for 'type=deezerFlow' and is
                        optional
                    format: '[0-9]+'
                    nullable: true
                    type: string
                listeningModeId:
                    $ref: '#/components/schemas/ListeningModeID'
                    description: Only used for 'type=listeningMode'
                    nullable: true
                presetKey:
                    description: Only used for 'type=sourcePreset'
                    format: ^Preset[0-9]+$
                    nullable: true
                    type: string
                queueItem:
                    $ref: '#/components/schemas/PlayQueueItem'
                    description: PlayQueue item only used for 'type=playQueue'
                    nullable: true
                queueSettings:
                    $ref: '#/components/schemas/PlayQueueSettings'
                    description: PlayQueue settings only used for 'type=playQueue'
                        and is optional
                    nullable: true
                radioStationId:
                    description: Id of RadioStation only used for 'type=radio'
                    format: '[0-9]+'
                    nullable: true
                    type: string
                source:
                    $ref: '#/components/schemas/SourceTypeEnum'
                    nullable: true
                speakerGroupId:
                    $ref: '#/components/schemas/SpeakerGroupId'
                    description: Only used for 'type=speakerGroup'
                    nullable: true
                standPosition:
                    $ref: '#/components/schemas/StandPosition'
                    description: Only used for 'type=stand'
                stopDuration:
                    description: The duration to wait (seconds) until stopping only
                        used for 'type=stop'
                    format: int32
                    minimum: 0
                    nullable: true
                    type: integer
                toneName:
                    description: Name of the tone only used for 'type=tone'
                    enum:
                    - alarm_1
                    - alarm_2
                    nullable: true
                    type: string
                type:
                    description: The type of Action
                    enum:
                    - standby
                    - tone
                    - radio
                    - sourcePreset
                    - deezerFlow
                    - activateSource
                    - playQueue
                    - buttonShortPress
                    - allStandby
                    - touchToJoin
                    - fallback
                    - volume
                    - stop
                    - triggerContent
                    - speakerGroup
                    - listeningMode
                    - stand
                    type: string
                volumeLevel:
                    description: The volume level to configure only used for 'type=volume'
                    format: int32
                    maximum: 100
                    minimum: 0
                    nullable: true
                    type: integer
            required:
            - type
            type: object
        ActionList:
            description: An ordered list of Actions to run on the product
            example:
            -   type: volume
                volumeLevel: 35
            -   radioStationId: '8779112938791514'
                type: radio
            -   stopDuration: 1300
                type: stop
            items:
                $ref: '#/components/schemas/Action'
            type: array
        ActiveStateTriggerMap:
            additionalProperties:
                $ref: '#/components/schemas/SceneTriggerBaseProperties'
            example:
                active:
                    actionList:
                    -   standPosition:
                            angle: 35.5
                        type: stand
                inactive:
                    actionList:
                    -   standPosition:
                            angle: 7.5
                        type: stand
            type: object
        AirplayCredentials:
            properties:
                password:
                    $ref: '#/components/schemas/EncryptedText'
            type: object
        AirplayPasswordState:
            properties:
                set:
                    type: boolean
            type: object
        AlarmId:
            format: uuid
            type: string
        AlarmInstance:
            properties:
                actionList:
                    $ref: '#/components/schemas/ActionList'
                autoRepeat:
                    description: Whether the alarm repeats automatically or not
                    type: boolean
                content:
                    $ref: '#/components/schemas/ContentItem'
                    nullable: true
                enabled:
                    description: Whether or not the alarm is actually enabled
                    type: boolean
                id:
                    $ref: '#/components/schemas/AlarmId'
                    description: Unique ID tied to the Alarm - Generated by the product!
                    nullable: true
                label:
                    $ref: '#/components/schemas/AlarmLabel'
                schedule:
                    $ref: '#/components/schemas/AlarmSchedule'
            required:
            - enabled
            - autoRepeat
            - schedule
            - actionList
            type: object
        AlarmLabel:
            description: Label for an alarm
            maxLength: 128
            type: string
        AlarmSchedule:
            description: Object containing the time of day and day(s) of an alarm
            example:
                days:
                - sunday
                - saturday
                timeOfDay: 43200
            properties:
                days:
                    description: The days on which the alarm will trigger
                    items:
                        enum:
                        - sunday
                        - monday
                        - tuesday
                        - wednesday
                        - thursday
                        - friday
                        - saturday
                        type: string
                    minItems: 1
                    type: array
                    uniqueItems: true
                timeOfDay:
                    $ref: '#/components/schemas/TimeOfDaySeconds'
            required:
            - timeOfDay
            - days
            type: object
        AlarmTimerEventData:
            properties:
                event:
                    enum:
                    - add
                    - update
                    - delete
                    type: string
                id:
                    $ref: '#/components/schemas/AlarmId'
                type:
                    enum:
                    - alarm
                    - timer
                    type: string
            type: object
        AlarmToneList:
            description: List of alarmTones
            properties:
                alarmTones:
                    items:
                        $ref: '#/components/schemas/AlarmToneObject'
                    type: array
            type: object
        AlarmToneObject:
            description: AlarmTone
            type: string
        AlarmTonePreviewConfig:
            description: Configuration object for previewing alarmTones
            properties:
                alarmTone:
                    $ref: '#/components/schemas/AlarmToneObject'
                duration:
                    description: |
                        The duration of the preview in seconds.
                        Default is 10 seconds
                    format: int32
                    minimum: 1
                    nullable: true
                    type: integer
                volume:
                    description: |
                        The volume at which to play the alarmTone.
                        Does not persist after preview is done.
                        Default is the current volume configured on the speaker.
                    format: int32
                    maximum: 100
                    minimum: 0
                    nullable: true
                    type: integer
            required:
            - toneName
            type: object
        AlarmTriggeredInfo:
            properties:
                id:
                    $ref: '#/components/schemas/AlarmId'
                label:
                    $ref: '#/components/schemas/AlarmLabel'
            type: object
        AlarmsList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/AlarmInstance'
                    type: array
            type: object
        Ambience:
            properties:
                value:
                    description: Selected ambience value
                    format: double
                    type: number
            required:
            - value
            type: object
        AmbienceFeature:
            allOf:
            -   $ref: '#/components/schemas/Ambience'
            -   $ref: '#/components/schemas/AmbienceRange'
        AmbienceRange:
            properties:
                default:
                    $ref: '#/components/schemas/Ambience'
                    description: Product and role specific default ambience value
                range:
                    description: Product and role specific ambience range
                    items:
                        $ref: '#/components/schemas/Ambience'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        Art:
            properties:
                hasLocalImage:
                    type: boolean
                key:
                    type: string
                size:
                    type: string
                type:
                    type: string
                url:
                    type: string
            type: object
        AsyncResult:
            example: |
                {
                  "status": "http://192.168.0.42/api/v1/product/info"
                }
            properties:
                status:
                    description: URL to poll for async result
                    format: uri
                    type: string
            type: object
        Balance:
            properties:
                value:
                    description: Selected balance value
                    format: double
                    type: number
            required:
            - value
            type: object
        BalanceFeature:
            allOf:
            -   $ref: '#/components/schemas/Balance'
            -   $ref: '#/components/schemas/BalanceRange'
        BalanceRange:
            properties:
                default:
                    $ref: '#/components/schemas/Balance'
                    description: Default balance value
                range:
                    description: balance range
                    items:
                        $ref: '#/components/schemas/Balance'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        BasicProductInfo:
            description: The collection of properties made available during initial
                wifi provisioning at the customer
            properties:
                networkStatus:
                    $ref: '#/components/schemas/NetworkStatusEnum'
                    description: |
                        The current connectivity status
                productTypeNumber:
                    description: |
                        The product type number retrieved from production data.
                    type: string
            type: object
        BasicWirelessNetworkInformation:
            properties:
                rssiLevel:
                    format: int32
                    type: integer
                ssid:
                    type: string
            type: object
        Bass:
            properties:
                value:
                    description: Selected bass value
                    format: int32
                    type: integer
            required:
            - value
            type: object
        BassFeature:
            allOf:
            -   $ref: '#/components/schemas/Bass'
            -   $ref: '#/components/schemas/BassRange'
        BassManagement:
            properties:
                value:
                    description: Selected bass-management value
                    enum:
                    - 'on'
                    - 'off'
                    type: string
            required:
            - value
            type: object
        BassManagementFeature:
            allOf:
            -   $ref: '#/components/schemas/BassManagement'
            -   $ref: '#/components/schemas/BassManagementRange'
        BassManagementRange:
            properties:
                default:
                    $ref: '#/components/schemas/BassManagement'
                    description: Default bass-management value
                range:
                    description: bass-management range
                    items:
                        $ref: '#/components/schemas/BassManagement'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        BassRange:
            properties:
                default:
                    $ref: '#/components/schemas/Bass'
                    description: Product and role specific default bass value
                range:
                    description: Product and role specific bass range
                    items:
                        $ref: '#/components/schemas/Bass'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        BatteryState:
            properties:
                batteryLevel:
                    description: |
                        Batterylevel in percent
                    type: integer
                isCharging:
                    type: boolean
                remainingChargingTimeMinutes:
                    description: Remaining charging time in minutes
                    type: integer
                remainingPlayingTimeMinutes:
                    description: Remaining playing time in minutes
                    type: integer
            type: object
        BeoRemoteButton:
            properties:
                Key:
                    type: string
                Type:
                    enum:
                    - KeyPress
                    - KeyRelease
            type: object
        BeolinkAirplayAllowed:
            properties:
                allowed:
                    default: false
                    type: boolean
            required:
            - allowed
            type: object
        BeolinkAvailableListener:
            properties:
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            type: object
        BeolinkEnabled:
            properties:
                enabled:
                    default: true
                    type: boolean
            required:
            - enabled
            type: object
        BeolinkExperience:
            properties:
                category:
                    description: Source category
                    enum:
                    - TV
                    - RADIO
                    - MUSIC
                    - MEDIA
                    - UNKNOWN
                    type: string
                id:
                    description: experience id, e.g. "RADIO" or "toslink"
                    type: string
                linkable:
                    description: Linkable means "Does pressing play on this source
                        make sense"
                    type: boolean
                name:
                    description: Experience name, e.g. "Bluetooth" or "B&O Radio"
                    type: string
                productFriendlyName:
                    description: Optional product friendly name
                    type: string
                sourceFriendlyName:
                    description: Optional friendly name for source
                    type: string
                type:
                    description: Source type. This corresponds to the exhaustive list
                        or sources provided by the control layer
                    type: string
                uniqueSourceId:
                    description: The actual device jabber id that the experience comes
                        from
                    type: string
            required:
            - id
            - name
            - type
            - category
            - uniqueSourceId
            - linkable
            type: object
        BeolinkExperiencesRequest:
            properties:
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
            required:
            - requestID
            type: object
        BeolinkExperiencesResult:
            properties:
                experiences:
                    items:
                        $ref: '#/components/schemas/BeolinkExperience'
                    type: array
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
                status:
                    description: |
                        Current scan status.
                        * busy: there is another scan in progress
                        * timeout: the scan timed out. The results will be partial
                    enum:
                    - ok
                    - busy
                    - timeout
                    type: string
            required:
            - requestID
            - status
            - experiences
            type: object
        BeolinkJoinRequest:
            properties:
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
                result:
                    description: Relative URL of the join result
                    format: uri
                    type: string
            required:
            - requestID
            - result
            type: object
        BeolinkJoinResult:
            properties:
                error:
                    description: Join error
                    enum:
                    - ok
                    - busy
                    - leaderless
                    - alone
                    - silent
                    - missing
                    - rejected
                    - timeout
                    type: string
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
                status:
                    description: Overall join status
                    enum:
                    - idle
                    - joined
                    - failed
                    type: string
                type:
                    description: The type of join request this is a result of
                    enum:
                    - join
                    - joinRequested
                    - expand
                    - expandRequested
                    type: string
            required:
            - requestID
            - status
            - jid
            - type
            type: object
        BeolinkLatency:
            properties:
                wiredMs:
                    type: integer
                wirelessMs:
                    type: integer
            type: object
        BeolinkLeader:
            properties:
                friendlyName:
                    type: string
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            - friendlyName
            type: object
        BeolinkListener:
            properties:
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            type: object
        BeolinkPeer:
            properties:
                friendlyName:
                    type: string
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            - friendlyName
            type: object
        BeolinkPeerID:
            description: Beolink peer ID
            example: 2714.1200304.26451293@products.bang-olufsen.com
            type: string
        BeolinkRequestID:
            description: Beolink request ID
            example: 48985a4f-a4de-4b44-9757-c9a7407b8882
            format: uuid
            type: string
        BeolinkSecurityBuffer:
            properties:
                bufferMs:
                    type: integer
            required:
            - bufferMs
            type: object
        BluetoothDevice:
            properties:
                address:
                    type: string
                connected:
                    type: boolean
                name:
                    type: string
            type: object
        BluetoothDeviceList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/BluetoothDevice'
                    type: array
            type: object
        BluetoothVisibility:
            properties:
                visibilityOn:
                    type: boolean
            type: object
        BootLoaderInfo:
            properties:
                version:
                    type: string
            type: object
        ButtonEvent:
            properties:
                button:
                    description: identifies the button
                    type: string
                state:
                    description: identifies the state change
                    type: string
            type: object
        CastState:
            properties:
                setup:
                    type: boolean
                stereoPaired:
                    type: boolean
            required:
            - setup
            - stereoPaired
            type: object
        CastTosAcceptanceState:
            properties:
                accepted:
                    type: boolean
            type: object
        CastVersion:
            properties:
                version:
                    type: string
            type: object
        ComponentVersion:
            properties:
                component:
                    type: string
                version:
                    type: string
            type: object
        ComponentVersionArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/ComponentVersion'
                    type: array
        Compression:
            properties:
                value:
                    description: Selected compression value
                    enum:
                    - 'off'
                    - medium
                    - maximum
                    type: string
            required:
            - value
            type: object
        CompressionFeature:
            allOf:
            -   $ref: '#/components/schemas/Compression'
            -   $ref: '#/components/schemas/CompressionRange'
        CompressionRange:
            properties:
                default:
                    $ref: '#/components/schemas/Compression'
                    description: Default compression value
                range:
                    description: compression range
                    items:
                        $ref: '#/components/schemas/Compression'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        ContentCategoryList:
            items:
                enum:
                - music
                - movie
                - tv
                - hdmi
                - app
                type: string
            type: array
        ContentItem:
            example:
                contentUri: tv://netflix
                label: Netflix
            properties:
                categories:
                    $ref: '#/components/schemas/ContentCategoryList'
                    nullable: true
                contentUri:
                    type: string
                label:
                    nullable: true
                    type: string
                source:
                    $ref: '#/components/schemas/SourceTypeEnum'
            required:
            - contentUri
            - source
            type: object
        ContentItemMap:
            additionalProperties:
                $ref: '#/components/schemas/ContentItem'
            example:
                475169e4-32bb-59ad-b88d-a6d53c289838:
                    contentUri: tv://netflix
                    label: Netflix
            type: object
        ContentTriggerMap:
            additionalProperties:
                $ref: '#/components/schemas/ContentTriggerObject'
            example:
                radio:
                    actionList:
                    -   speakerGroupId: 5cbf10a6-7184-4703-9d4c-dc502188d258
                        type: speakerGroup
                    -   listeningModeId: 20
                        type: listeningMode
                    label: Radio stuff
                tv://hdmi_0:
                    actionList:
                    -   speakerGroupId: 5cbf10a6-7184-4703-9d4c-dc502188d258
                        type: speakerGroup
                    -   listeningModeId: 20
                        type: listeningMode
                    label: HDMI stuff
            type: object
        ContentTriggerObject:
            allOf:
            -   $ref: '#/components/schemas/ContentTriggerUserProperties'
            -   properties:
                    available:
                        default: true
                        description: |
                            If content can be used on this device.
                            E.g. this is useful if external content has been removed.
                            Like TV content which can be removed by the user or if it
                            gets discontinued.
                        nullable: true
                        type: boolean
                    categories:
                        $ref: '#/components/schemas/ContentCategoryList'
                        nullable: true
                    originalLabel:
                        nullable: true
                        type: string
                type: object
        ContentTriggerUserProperties:
            allOf:
            -   $ref: '#/components/schemas/SceneTriggerBaseProperties'
            -   properties:
                    label:
                        nullable: true
                        type: string
                type: object
        CountryCode:
            description: two character codes https://en.wikipedia.org/wiki/ISO_3166-2
            properties:
                automaticCountryCode:
                    type: boolean
                iso3166CountryCode:
                    type: string
            type: object
        CurtainAngle:
            properties:
                value:
                    description: ~0-330 degrees (with physical limits)
                    format: int32
                    minimum: 0
                    type: integer
        CurtainDebugLevel:
            properties:
                value:
                    description: 0=none, larger values increase verbosity
                    format: int32
                    minimum: 0
                    type: integer
        CurtainPosition:
            properties:
                value:
                    enum:
                    - none
                    - closed
                    - narrow
                    - wide
                    - custom
                    type: string
        CurtainStatus:
            properties:
                debugLevel:
                    format: int32
                    minimum: 0
                    type: integer
                maxAngleValid:
                    format: float
                    type: number
                minAngleValid:
                    format: float
                    type: number
                motor1Angle:
                    format: float
                    type: number
                motor2Angle:
                    format: float
                    type: number
                moving:
                    type: boolean
                position:
                    enum:
                    - none
                    - closed
                    - narrow
                    - wide
                    - custom
                    type: string
                targetAngle:
                    format: int32
                    minimum: 0
                    type: integer
                totalErrorCount:
                    format: int32
                    minimum: 0
                    type: integer
            type: object
        DailyReboot:
            properties:
                enabled:
                    type: boolean
            type: object
        DiagnosticsBatteryValues:
            properties:
                batteryCapacityPercent:
                    description: |
                        The battery charge capacity compared to a new battery in percent
                    format: float
                    type: number
                batteryLevelPercent:
                    description: |
                        The remaining power level of the battery in percent
                    format: float
                    type: number
                current:
                    description: |
                        The battery current in ampere
                    format: float
                    type: number
                cycleCount:
                    description: |
                        The number of charging cycles
                    type: integer
                deviceName:
                    description: |
                        The battery device name
                    type: string
                isPogoDetected:
                    description: |
                        Flag indicating whether the battery charger is using pogo pins
                    type: boolean
                manufacturerDate:
                    description: |
                        The battery manufacturer date in format yyyy-M-d
                    type: string
                manufacturerName:
                    description: |
                        The battery manufacturer name
                    type: string
                remainingChargingTimeMinutes:
                    description: |
                        An estimated remaining charging time in minutes at the current battery level
                    type: integer
                remainingPlayingTimeMinutes:
                    description: |
                        An estimated remaining playing time in minutes at the current battery level
                    type: integer
                state:
                    description: |
                        The current battery state
                    enum:
                    - BatteryFull
                    - BatteryMedium
                    - BatteryLow
                    - BatteryVeryLow
                    - Charging
                    - ChargingInputError
                    - ChargingTemperatureError
                    - ChargingBatteryError
                    - BatteryNotPresent
                    type: string
                voltage:
                    description: |
                        The battery voltage in volt
                    format: float
                    type: number
            type: object
        DiagnosticsFlashLifetime:
            type: string
        DiagnosticsFlashValues:
            properties:
                lifetimeEstimationA:
                    $ref: '#/components/schemas/DiagnosticsFlashLifetime'
                lifetimeEstimationB:
                    $ref: '#/components/schemas/DiagnosticsFlashLifetime'
                preEolInformation:
                    enum:
                    - unknown
                    - normal
                    - aging
                    - urgent
                    - reserved
                    type: string
            type: object
        DiagnosticsNtcValue:
            properties:
                id:
                    type: string
                name:
                    type: string
                value:
                    type: number
            type: object
        DiagnosticsNtcValueArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/DiagnosticsNtcValue'
                    type: array
        DiagnosticsWisaTx:
            properties:
                activeWifiCh:
                    format: int32
                    minimum: 0
                    type: integer
                chDiags:
                    items:
                        $ref: '#/components/schemas/DiagnosticsWisaTxChannel'
                    type: array
                enabledChCount:
                    format: int32
                    minimum: 0
                    type: integer
                monitorWifiCh:
                    format: int32
                    minimum: 0
                    type: integer
                state:
                    type: string
                totalEnergyEvents:
                    format: int32
                    minimum: 0
                    type: integer
                totalNqHopEvents:
                    format: int32
                    minimum: 0
                    type: integer
                totalRadarEvents:
                    format: int32
                    minimum: 0
                    type: integer
            type: object
        DiagnosticsWisaTxChannel:
            properties:
                busyCountdown:
                    format: int32
                    minimum: 0
                    type: integer
                chIndex:
                    format: int32
                    minimum: 0
                    type: integer
                checkCountdown:
                    format: int32
                    minimum: 0
                    type: integer
                mode:
                    type: string
                state:
                    type: string
                wifiCh:
                    format: int32
                    minimum: 0
                    type: integer
            type: object
        Directivity:
            properties:
                value:
                    enum:
                    - front
                    - left
                    - right
                    - omni
                    - narrow
                    - wide
                    - standalone
                    type: string
            required:
            - value
            type: object
        DirectivityFeature:
            allOf:
            -   $ref: '#/components/schemas/Directivity'
            -   $ref: '#/components/schemas/DirectivityRange'
        DirectivityRange:
            properties:
                default:
                    $ref: '#/components/schemas/Directivity'
                    description: Product and role specific default directivity value
                range:
                    description: Product and role specific list of directivities
                    items:
                        $ref: '#/components/schemas/Directivity'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        EncryptedText:
            type: string
        ErrorModel:
            description: the general error model
            properties:
                errorCode:
                    description: |
                        A wellknown code that signal the error, can be used by callers
                    type: string
                errorId:
                    description: |
                        A unique identifier used to e.g. quick find in logs
                    type: string
                errorMessage:
                    description: |
                        A textual representation, human readable and suitable for logs
                    type: string
            type: object
        FadeIn:
            properties:
                value:
                    type: boolean
        Fader:
            properties:
                value:
                    description: Selected fader value
                    format: double
                    type: number
            required:
            - value
            type: object
        FaderFeature:
            allOf:
            -   $ref: '#/components/schemas/Fader'
            -   $ref: '#/components/schemas/FaderRange'
        FaderRange:
            properties:
                default:
                    $ref: '#/components/schemas/Fader'
                    description: Default fader value
                range:
                    description: fader range
                    items:
                        $ref: '#/components/schemas/Fader'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        FastSwitchSetting:
            properties:
                value:
                    type: boolean
            type: object
        FepInfo:
            properties:
                version:
                    type: string
            type: object
        GeneratorSettings:
            properties:
                frequency:
                    format: double
                    type: number
                waveForm:
                    enum:
                    - sine
                    - square
                    - saw
                    - triangle
                    - silence
                    - whiteNoise
                    - pinkNoise
                    - sineTable
                    - ticks
                    - gaussianNoise
                    - redNoise
                    - blueNoise
                    - violetNoise
                    type: string
            type: object
        HasToken:
            properties:
                hasToken:
                    type: boolean
            type: object
        HdcpLicenseStatus:
            properties:
                licenseId:
                    description: HDCP license id
                    type: string
                serialNumber:
                    description: serial number of HDMI chip
                    type: string
                status:
                    enum:
                    - Activated
                    - NotActivated
                    - RebootNeeded
                    type: string
            type: object
        HdcpLicenseUpdate:
            properties:
                licenseData:
                    description: base64 encoded HDCP license data matching chip serial
                        number
                    format: byte
                    type: string
                serialNumber:
                    description: serial number of HDMI chip
                    type: string
            required:
            - serialNumber
            - licenseData
            type: object
        HdmiDebugUartState:
            properties:
                value:
                    type: boolean
            type: object
        HdmiIdType:
            type: string
        HdmiInput:
            properties:
                contentUri:
                    description: This points to the editable content trigger for this
                        specific hdmi input
                    type: string
                input:
                    $ref: '#/components/schemas/HdmiIdType'
            type: object
        HdmiInputSettings:
            allOf:
            -   $ref: '#/components/schemas/HdmiInput'
            -   $ref: '#/components/schemas/HdmiSettings'
        HdmiInputSettingsList:
            items:
                $ref: '#/components/schemas/HdmiInputSettings'
            type: array
        HdmiSettings:
            properties:
                cecDisabled:
                    nullable: true
                    type: boolean
                deepColorEnabled:
                    nullable: true
                    type: boolean
            type: object
        HdmiVideoFormat:
            properties:
                pixelFormat:
                    $ref: '#/components/schemas/VideoPixelFormat'
                vIC:
                    format: int32
                    minimum: 0
                    type: integer
                videoTimings:
                    $ref: '#/components/schemas/VideoTimings'
            type: object
        HomeControlUri:
            properties:
                uri:
                    type: string
            type: object
        IPv4:
            description: IPv4 address
            example: 192.168.0.101
            format: ipv4
            type: string
        IdentificationSound:
            properties:
                enabled:
                    description: Identification is started if true and stopped if
                        false
                    example: true
                    nullable: false
                    type: boolean
                repeat:
                    description: Identification sound is repeated if `true`, if the
                        sound is already repeating on the speaker, 'false' will stop
                        it
                    example: false
                    nullable: true
                    type: boolean
                sound:
                    enum:
                    - short
                    - long
                    example: short
                    nullable: true
                    type: string
            type: object
        InstallRecordIdState:
            properties:
                value:
                    enum:
                    - idle
                    - gettingUrl
                    - urlInvalid
                    - downloading
                    - downloadFinished
                    - downloadFailed
                    type: string
        IpV4Info:
            properties:
                alternativeDns:
                    type: string
                defaultGateway:
                    type: string
                ipAddress:
                    type: string
                isDhcp:
                    type: boolean
                preferredDns:
                    type: string
                subnetMask:
                    type: string
            type: object
        Latency:
            properties:
                ns:
                    type: number
            type: object
        LatencyRangeVal:
            properties:
                max:
                    type: number
                min:
                    type: number
                val:
                    type: number
            type: object
        LightSensorSettings:
            properties:
                disabled:
                    type: boolean
            type: object
        LineInSettings:
            properties:
                delayMs:
                    description: Desired line-in delay in milliseconds
                    type: integer
                lineinSensitivity:
                    enum:
                    - high
                    - medium
                    - low
                    - disabled
                    type: string
            type: object
        LineInStateEnum:
            properties:
                value:
                    enum:
                    - disconnected
                    - connected
                    - audio
                    - spdif
                    type: string
        ListeningMode:
            allOf:
            -   $ref: '#/components/schemas/ListeningModeProps'
            required:
            - features
            - id
            - name
            - role
            - triggers
        ListeningModeFeatures:
            description: Sound features to apply
            properties:
                ambience:
                    $ref: '#/components/schemas/Ambience'
                balance:
                    $ref: '#/components/schemas/Balance'
                bassManagement:
                    $ref: '#/components/schemas/BassManagement'
                compression:
                    $ref: '#/components/schemas/Compression'
                directivity:
                    $ref: '#/components/schemas/Directivity'
                fader:
                    $ref: '#/components/schemas/Fader'
                roomCompensation:
                    $ref: '#/components/schemas/RoomCompensation'
                spatialEnvelopment:
                    $ref: '#/components/schemas/SpatialEnvelopment'
                spatialHeight:
                    $ref: '#/components/schemas/SpatialHeight'
                spatialProcessing:
                    $ref: '#/components/schemas/SpatialProcessing'
                spatialSurround:
                    $ref: '#/components/schemas/SpatialSurround'
                spatialWidth:
                    $ref: '#/components/schemas/SpatialWidth'
                speechEnhance:
                    $ref: '#/components/schemas/SpeechEnhance'
                toneTouch:
                    $ref: '#/components/schemas/ToneTouch'
            type: object
        ListeningModeID:
            format: int32
            minimum: 0
            type: integer
        ListeningModeProps:
            properties:
                clientCtx:
                    description: |
                        An optional generic string property supplied from the client. If
                        provided, it will be stored without changes.
                        If not supplied, any current clientCtx will remain unchanged.
                    maxLength: 4096
                    nullable: true
                    type: string
                features:
                    $ref: '#/components/schemas/ListeningModeFeatures'
                id:
                    $ref: '#/components/schemas/ListeningModeID'
                name:
                    description: Friendly name
                    type: string
                origin:
                    description: User created, default or an edited default listening
                        mode
                    enum:
                    - user
                    - default
                    - edited
                    type: string
                role:
                    description: Role a listening mode applies to
                    enum:
                    - standalone
                    - multichannel
                    type: string
                triggers:
                    items:
                        $ref: '#/components/schemas/ListeningModeTrigger'
                    type: array
            type: object
        ListeningModeRef:
            description: Reference to a listening mode
            properties:
                href:
                    description: |
                        Host relative URI of the listening mode or `null` if there is no
                        active listening mode.
                    format: uri
                    nullable: true
                    type: string
                id:
                    description: |
                        ID of the active listening mode or `null` if there is no active
                        listening mode.
                    format: int32
                    minimum: 0
                    nullable: true
                    type: integer
            required:
            - id
            - href
            type: object
        ListeningModeSet:
            items:
                allOf:
                -   $ref: '#/components/schemas/ListeningMode'
            type: array
        ListeningModeTrigger:
            oneOf:
            -   $ref: '#/components/schemas/PowerLinkTrigger'
        ListeningModeUpdate:
            oneOf:
            -   $ref: '#/components/schemas/ListeningModeProps'
        Locale:
            properties:
                locale:
                    type: string
            type: object
        LocalisationMode:
            properties:
                enabled:
                    type: boolean
            type: object
        LocalisationNoise:
            properties:
                enabled:
                    type: boolean
            type: object
        LockState:
            properties:
                state:
                    enum:
                    - locked
                    - unlocked
                    type: string
            type: object
        LockedAPI:
            description: API is locked
            properties:
                message:
                    type: string
            type: object
        LogLevelSetting:
            properties:
                area:
                    description: application name or "all" for all applications
                    type: string
                expiry:
                    description: currently ignored
                    format: date-time
                    type: string
                level:
                    enum:
                    - trace
                    - debug
                    - info
                    - notice
                    - warning
                    - error
                    - critical
                    - 'off'
                    type: string
            type: object
        LogLevelSettings:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/LogLevelSetting'
                    type: array
        LogUploadData:
            properties:
                description:
                    type: string
                sessionKey:
                    type: string
            type: object
        Loudness:
            properties:
                value:
                    type: boolean
        MicrophoneId:
            format: int32
            minimum: 0
            type: integer
        MicrophoneInput:
            properties:
                id:
                    $ref: '#/components/schemas/MicrophoneId'
                microphoneState:
                    $ref: '#/components/schemas/MicrophoneState'
            type: object
        MicrophoneInputList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/MicrophoneInput'
                    type: array
            type: object
        MicrophoneRecordingState:
            properties:
                state:
                    type: boolean
            type: object
        MicrophoneState:
            properties:
                value:
                    enum:
                    - 'on'
                    - 'off'
                    type: string
            type: object
        MicrophonesState:
            description: state of microphones, both physical switches and software
                state
            properties:
                microphoneState:
                    $ref: '#/components/schemas/MicrophoneState'
                microphoneSwitchState:
                    $ref: '#/components/schemas/MicrophoneState'
            type: object
        MozartResult:
            properties:
                message:
                    type: string
                result:
                    type: boolean
            type: object
        MultiroomSettings:
            properties:
                provider:
                    enum:
                    - chromecast
                    - beolink
                    type: string
            type: object
        NamedMacAddress:
            description: The mac address for a named networkinterface
            properties:
                mac:
                    description: the mac address, formatted like 00:11:22:33:44:55
                    type: string
                name:
                    description: name of the interface, e.g. ehternet, bluetooth,
                        wlanSta, wlanAp1, wlanAp2
                    type: string
            type: object
        NamedMacAddressList:
            properties:
                macAddresses:
                    items:
                        $ref: '#/components/schemas/NamedMacAddress'
                    type: array
            type: object
        NetRadioPreset:
            properties:
                stationId:
                    type: string
            required:
            - stationId
            type: object
        NetworkConfig:
            description: The static network configuration. Only relevant for manual
                configuration
            properties:
                address:
                    type: string
                alternateDns:
                    type: string
                gateway:
                    type: string
                mask:
                    type: string
                preferredDns:
                    type: string
        NetworkMethodEnum:
            description: The method used to configure the network device
            properties:
                value:
                    enum:
                    - manual
                    - dhcp
                    type: string
        NetworkStatus:
            properties:
                activeInterface:
                    enum:
                    - unknown
                    - none
                    - wired
                    - wireless
                    type: string
                wired:
                    $ref: '#/components/schemas/WiredNetworkStatus'
                wireless:
                    $ref: '#/components/schemas/WirelessNetworkStatus'
            type: object
        NetworkStatusEnum:
            properties:
                value:
                    enum:
                    - unknown
                    - inactive
                    - disconnected
                    - connected
                    type: string
        NewListeningMode:
            oneOf:
            -   $ref: '#/components/schemas/ListeningModeProps'
            required:
            - features
            - id
            - name
            - role
        NewResource:
            description: Reference to a new resource
            properties:
                href:
                    format: uri
                    type: string
            required:
            - href
            type: object
        NotificationOnBoot:
            properties:
                enabled:
                    type: boolean
            type: object
        NumberOfAllowedAlarms:
            properties:
                value:
                    type: integer
            type: object
        OnOffState:
            properties:
                value:
                    enum:
                    - 'on'
                    - 'off'
                    type: string
        OutputClientDeactivationState:
            properties:
                value:
                    type: boolean
            type: object
        OverlayPlayRequest:
            allOf:
            -   $ref: '#/components/schemas/OverlayPlayRequestCommon'
            -   $ref: '#/components/schemas/OverlayPlayRequestUri'
            -   $ref: '#/components/schemas/OverlayPlayRequestTextToSpeech'
            -   $ref: '#/components/schemas/OverlayPlayRequestFromUsb'
        OverlayPlayRequestCommon:
            properties:
                volumeAbsolute:
                    description: |
                        An optional absolute volume level at which to play the URI. If not provided, the URI will play at the currently configured volume level on the product. The level should be provided in volume steps [0, 100]
                    format: int32
                    maximum: 100
                    minimum: 0
                    nullable: true
                    type: integer
            type: object
        OverlayPlayRequestFromUsb:
            nullable: true
            properties:
                fromUsb:
                    properties:
                        fileLocation:
                            description: |
                                Required field containing the relative path (i.e. from the USB drive root) and file name with extension (if one exists) that will be played. A maximum length of 1024 characters is allowed.
                            maxLength: 1024
                            type: string
                    required:
                    - fileLocation
                    type: object
            type: object
        OverlayPlayRequestTextToSpeech:
            nullable: true
            properties:
                textToSpeech:
                    description: |
                        Object used for performing a text-to-speech operation on the product. This object should be updated alongside the BeoCloud API as it is intended to replicate the BeoCloud endpoint[1] [1] BeoCloud: /api/v1/Voice/text-to-speech
                    properties:
                        lang:
                            description: |
                                An optional specification of the language to use. The default value is ultimately decided by the Cloud API, but currently it defaults to `en-us`.
                            example: en-us
                            nullable: true
                            type: string
                        text:
                            description: |
                                Required field containing the actual text that will be converted to speech (audio). A maximum length of 2048 characters is allowed.
                            maxLength: 2048
                            type: string
                    required:
                    - text
                    type: object
            type: object
        OverlayPlayRequestUri:
            nullable: true
            properties:
                uri:
                    $ref: '#/components/schemas/Uri'
            type: object
        PairedRemote:
            properties:
                address:
                    type: string
                name:
                    type: string
            required:
            - address
            - name
            type: object
        PairedRemoteList:
            items:
                $ref: '#/components/schemas/PairedRemote'
            type: array
        PairedRemoteResponse:
            properties:
                items:
                    $ref: '#/components/schemas/PairedRemoteList'
        PcbRevision:
            properties:
                pcb:
                    type: string
                revision:
                    type: string
            type: object
        PcbRevisionArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/PcbRevision'
                    type: array
        PlacementEnum:
            properties:
                value:
                    enum:
                    - unknown
                    - standing
                    - flat
                    - wall
                    type: string
        PlayQueueId:
            properties:
                id:
                    $ref: '#/components/schemas/PlayQueueIdType'
                    nullable: true
            type: object
        PlayQueueIdType:
            format: uuid
            type: string
        PlayQueueItem:
            properties:
                index:
                    format: int32
                    type: integer
                metadata:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
                    nullable: true
                provider:
                    $ref: '#/components/schemas/PlayQueueItemType'
                startNowFromPosition:
                    description: Start playing specified track as soon as possible.
                        This works for any type, for `track` set to 0 and for `playlist`
                        specify the wanted track from position 0
                    format: int32
                    nullable: true
                    type: integer
                type:
                    enum:
                    - track
                    - playlist
                    type: string
                uri:
                    description: This can be url, track id, playlist id, radio id
                        and suchlike
                    type: string
            required:
            - provider
            - type
            - uri
            type: object
        PlayQueueItemArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/PlaybackContentMetadata'
                    type: array
        PlayQueueItemType:
            properties:
                value:
                    enum:
                    - uri
                    - dlna
                    - radio
                    - deezer
                    - beoCloud
                    type: string
            required:
            - value
        PlayQueueSettings:
            properties:
                consume:
                    type: boolean
                gapless:
                    type: boolean
                repeat:
                    enum:
                    - all
                    - track
                    - none
                    type: string
                shuffle:
                    type: boolean
        PlaybackContentMetadata:
            properties:
                albumName:
                    type: string
                art:
                    items:
                        $ref: '#/components/schemas/Art'
                    type: array
                artistName:
                    type: string
                bitdepth:
                    format: int32
                    type: integer
                bitrate:
                    format: int32
                    type: integer
                containerName:
                    type: string
                encoding:
                    enum:
                    - pcm
                    - wav
                    - mp3
                    - oggvorbis
                    - aac
                    - flac
                    - sbc
                    - alac
                    - opus
                    - DolbyDigital
                    - DolbyDigitalPlus
                    - DolbyTrueHD
                    - unknown
                    type: string
                genre:
                    type: string
                id:
                    type: integer
                inputChannelProcessing:
                    description: |
                        Input processing/decoding on top of the base codec indicated in encoding. E.g. Dolby Atmos on top of Dolby TrueHD or Dolby Surround on top of PCM. For Dolby, this value has priority over encoding, meaning that if inputChannelProcessing has a value, it must be indicated in the app, and optionally the encoding value can be indicated as well. If inputChannelProcessing does not have value the encoding value must be indicated.
                    enum:
                    - dolbySurround
                    - dolbyAtmos
                    nullable: true
                    type: string
                inputChannels:
                    description: e.g. 5.1
                    nullable: true
                    type: string
                organization:
                    description: |
                        This can be filled by gstreamers GST_TAG_ORGANIZATION. Mozart can also fill this with netradio station name like "P3" and tv content like "Netflix". This is needed so it's possible to show who the provider is for the playing audio track/content.
                    type: string
                outputChannelProcessing:
                    description: e.g. downmix
                    enum:
                    - Direct
                    - Downmix
                    - TrueImage
                    nullable: true
                    type: string
                outputChannels:
                    description: e.g. 7.1
                    nullable: true
                    type: string
                queueId:
                    $ref: '#/components/schemas/PlayQueueIdType'
                remoteLeader:
                    $ref: '#/components/schemas/BeolinkLeader'
                remoteSource:
                    nullable: true
                    type: string
                samplerate:
                    format: int32
                    type: integer
                source:
                    type: string
                sourceInternalId:
                    type: string
                title:
                    type: string
                totalDuration:
                    description: to be removed once all devices and apps are updated
                    format: int32
                    nullable: true
                    type: integer
                totalDurationSeconds:
                    format: int32
                    nullable: true
                    type: integer
                track:
                    format: int32
                    type: integer
                trackCount:
                    format: int32
                    type: integer
                uri:
                    type: string
            type: object
        PlaybackError:
            properties:
                error:
                    type: string
                item:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
            type: object
        PlaybackProgress:
            properties:
                id:
                    type: string
                progress:
                    format: int32
                    type: integer
                totalDuration:
                    format: int32
                    nullable: true
                    type: integer
            type: object
        PlaybackState:
            properties:
                metadata:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
                progress:
                    $ref: '#/components/schemas/PlaybackProgress'
                source:
                    $ref: '#/components/schemas/Source'
                state:
                    $ref: '#/components/schemas/RenderingState'
            type: object
        PowerDeliveryInfo:
            properties:
                version:
                    type: string
            type: object
        PowerLinkSettings:
            description: PowerLink settings
            properties:
                audio-latency-ms:
                    description: desired latency from input to output, can also be
                        adjusted from PowerLink
                    format: int32
                    type: integer
                channel-select:
                    description: audio channels used from PowerLink cable, default=left
                    enum:
                    - left
                    - right
                    - stereo
                    type: string
                disabled:
                    type: boolean
            type: object
        PowerLinkStatus:
            properties:
                audio-latency-ms:
                    description: actual latency from input to output
                    format: int32
                    type: integer
                state:
                    enum:
                    - disabled
                    - disconnected
                    - connected
                    - playing
                    - paused
                    type: string
            type: object
        PowerLinkTrigger:
            properties:
                powerLinkPreset:
                    description: PowerLink preset
                    type: integer
            type: object
        PowerStateEnum:
            properties:
                value:
                    enum:
                    - networkStandby
                    - 'on'
                    - standby
                    - shutdown
                    - storage
                    type: string
        Preset:
            allOf:
            -   $ref: '#/components/schemas/SceneTriggerBaseProperties'
            -   properties:
                    content:
                        $ref: '#/components/schemas/ContentItem'
                        nullable: true
                    id:
                        type: string
                    name:
                        nullable: true
                        type: string
                    source:
                        $ref: '#/components/schemas/SourceTypeEnum'
                        nullable: true
                    title:
                        type: string
                type: object
        PresetMap:
            additionalProperties:
                $ref: '#/components/schemas/Preset'
            type: object
        PresetProperties:
            allOf:
            -   $ref: '#/components/schemas/SceneTriggerBaseProperties'
            -   properties:
                    label:
                        nullable: true
                        type: string
                type: object
        ProductApple:
            properties:
                homeApp:
                    description: Set to true if product is added to Apple Home app
                    type: boolean
            type: object
        ProductCountryList:
            properties:
                items:
                    items:
                        type: string
                    type: array
        ProductCurtainPosition:
            properties:
                value:
                    enum:
                    - closed
                    - narrow
                    - wide
                    type: string
        ProductCurtainStatus:
            properties:
                moving:
                    type: boolean
                position:
                    enum:
                    - unknown
                    - closed
                    - narrow
                    - wide
                    type: string
        ProductDateTimeSetup:
            properties:
                currenttime:
                    format: datetime
                    type: string
                datetime:
                    type: string
                timezone:
                    type: string
            type: object
        ProductEncryptionInfo:
            properties:
                algorithm:
                    type: string
                keyLength:
                    format: int32
                    type: integer
                publicKey:
                    type: string
            type: object
        ProductEnvironment:
            properties:
                environment:
                    enum:
                    - live
                    - integration
                    - development
                    type: string
            type: object
        ProductFriendlyName:
            properties:
                friendlyName:
                    description: |
                        The friendly name of the product, assignable by the end user, e.g. 'Kitchen speaker'
                    type: string
            type: object
        ProductInformation:
            properties:
                apple:
                    $ref: '#/components/schemas/ProductApple'
                bootloader:
                    $ref: '#/components/schemas/BootLoaderInfo'
                componentVersions:
                    $ref: '#/components/schemas/ComponentVersionArray'
                encryptionInfo:
                    $ref: '#/components/schemas/ProductEncryptionInfo'
                fep:
                    $ref: '#/components/schemas/FepInfo'
                name:
                    $ref: '#/components/schemas/ProductFriendlyName'
                pcbRevisions:
                    $ref: '#/components/schemas/PcbRevisionArray'
                powerDelivery:
                    $ref: '#/components/schemas/PowerDeliveryInfo'
                production:
                    $ref: '#/components/schemas/ProductionStatusInformation'
                touch:
                    $ref: '#/components/schemas/TouchInfo'
            type: object
        ProductLicenseArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/ProductLicenseEntry'
                    type: array
        ProductLicenseEntry:
            properties:
                licenseString:
                    type: string
                licenses:
                    items:
                        $ref: '#/components/schemas/ProductLicenseItem'
                    type: array
                name:
                    type: string
                version:
                    type: string
            type: object
        ProductLicenseItem:
            properties:
                link:
                    type: string
                name:
                    type: string
            type: object
        ProductMode:
            properties:
                mode:
                    enum:
                    - normal
                    - shop
                    type: string
            type: object
        ProductRegionalSetup:
            properties:
                country:
                    type: string
            type: object
        ProductState:
            properties:
                microphones:
                    $ref: '#/components/schemas/MicrophonesState'
                playback:
                    $ref: '#/components/schemas/PlaybackState'
                powerState:
                    $ref: '#/components/schemas/PowerStateEnum'
                softwareUpdateState:
                    $ref: '#/components/schemas/SoftwareUpdateState'
                soundSettings:
                    $ref: '#/components/schemas/SoundSettings'
                source:
                    $ref: '#/components/schemas/Source'
                tv:
                    $ref: '#/components/schemas/TvState'
                volume:
                    $ref: '#/components/schemas/VolumeState'
            type: object
        ProductTimeZoneList:
            properties:
                items:
                    items:
                        type: string
                    type: array
        ProductionAudioPathChannel:
            properties:
                id:
                    description: identifier for the individual channel
                    type: string
                muted:
                    type: boolean
            type: object
        ProductionAudioPathChannels:
            properties:
                channels:
                    items:
                        $ref: '#/components/schemas/ProductionAudioPathChannel'
                    type: array
            type: object
        ProductionAutoCalibrationInfo:
            properties:
                status:
                    enum:
                    - unknown
                    - notStarted
                    - running
                    - done
                    - error
                    type: string
                values:
                    items:
                        $ref: '#/components/schemas/ProductionAutoCalibrationType'
                    type: array
            type: object
        ProductionAutoCalibrationType:
            properties:
                id:
                    type: string
                values:
                    items:
                        $ref: '#/components/schemas/ProductionAutoCalibrationValue'
                    type: array
            type: object
        ProductionAutoCalibrationValue:
            properties:
                id:
                    type: string
                value:
                    format: double
                    type: number
            type: object
        ProductionCalibrationInfo:
            properties:
                id:
                    type: string
                value:
                    format: double
                    type: number
            type: object
        ProductionCalibrationInfoArray:
            properties:
                values:
                    items:
                        $ref: '#/components/schemas/ProductionCalibrationInfo'
                    type: array
            type: object
        ProductionCalibrationUpdate:
            properties:
                value:
                    format: double
                    type: number
            type: object
        ProductionCurtainCalibrationInfo:
            properties:
                status:
                    enum:
                    - unknown
                    - running
                    - done
                    - error
                    type: string
                values:
                    items:
                        type: integer
                    type: array
            type: object
        ProductionHdmiPort:
            properties:
                portId:
                    $ref: '#/components/schemas/ProductionHdmiPortId'
            type: object
        ProductionHdmiPortId:
            type: string
        ProductionHdmiPortList:
            items:
                $ref: '#/components/schemas/ProductionHdmiPort'
            type: array
        ProductionSerialPort:
            allOf:
            -   $ref: '#/components/schemas/SerialPortId'
            -   $ref: '#/components/schemas/SerialPortSettings'
        ProductionSerialPortList:
            properties:
                serialPorts:
                    items:
                        $ref: '#/components/schemas/ProductionSerialPort'
                    type: array
            type: object
        ProductionStatusInformation:
            properties:
                hardwareRevision:
                    type: string
                itemNumber:
                    type: string
                macAddresses:
                    $ref: '#/components/schemas/NamedMacAddressList'
                    description: The list of named mac addresses, typically used in
                        a service/troubleshooting scenario
                productDefaultName:
                    description: default name for the product type, e.g. BeoSound
                        1
                    type: string
                productionSite:
                    description: a name signalling where this device was produced
                    type: string
                productionTimestamp:
                    description: the date and time (in UTC) of the production of this
                        product
                    type: string
                serialNumber:
                    type: string
                typeNumber:
                    type: string
                wifiCountryCode:
                    type: string
            type: object
        ProductionTestingAudioPathProcessingByPass:
            properties:
                steps:
                    items:
                        $ref: '#/components/schemas/ProductionTestingAudioPathProcessingStepByPass'
                    type: array
            type: object
        ProductionTestingAudioPathProcessingMode:
            properties:
                value:
                    enum:
                    - normal
                    - simpleCrossOver
                    - passthroughFromLeftInput
                    - thermalTesting
                    type: string
        ProductionTestingAudioPathProcessingStepByPass:
            properties:
                enabled:
                    type: boolean
                id:
                    type: string
                name:
                    type: string
            type: object
        ProductionTestingBatteryLevelMax:
            properties:
                level:
                    description: value in percent
                    format: int32
                    maximum: 100
                    minimum: 1
                    type: integer
            type: object
        ProductionTestingButton:
            properties:
                press:
                    enum:
                    - short
                    - long
                    - verylong
                    type: string
            type: object
        ProductionTestingButtonStatus:
            properties:
                sensitivity:
                    format: int32
                    minimum: 0
                    type: integer
                statusMask:
                    format: int32
                    minimum: 0
                    type: integer
            type: object
        ProductionTestingIOLEDUpdate:
            properties:
                color:
                    type: string
                enabled:
                    type: boolean
            type: object
        ProductionTestingLightSensorResult:
            properties:
                lux:
                    format: float
                    type: number
            type: object
        ProductionTestingProximityResult:
            properties:
                presence:
                    type: boolean
                range:
                    format: int32
                    minimum: 0
                    type: integer
                ranges:
                    items:
                        format: int32
                        type: integer
                    minimum: 0
                    type: array
            type: object
        ProductionTestingSelfTestErrorMessage:
            properties:
                device:
                    type: string
                message:
                    type: string
            type: object
        ProductionTestingSelfTestIndividualResult:
            properties:
                errorMessages:
                    items:
                        $ref: '#/components/schemas/ProductionTestingSelfTestErrorMessage'
                    nullable: true
                    type: array
                identifier:
                    type: string
                result:
                    type: boolean
            required:
            - identifier
            - result
            type: object
        ProductionTestingSelfTestResult:
            properties:
                testResults:
                    items:
                        $ref: '#/components/schemas/ProductionTestingSelfTestIndividualResult'
                    type: array
            type: object
        ProximitySettings:
            properties:
                disabled:
                    type: boolean
            type: object
        PucFile:
            properties:
                fileDescription:
                    type: string
                fileName:
                    type: string
            type: object
        PucFilesArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/PucFile'
                    type: array
            required:
            - items
            type: object
        PucOutputState:
            properties:
                output:
                    description: Puc multiplexer output. 0 is all disconnected. 1
                        - 3 are actual outputs
                    format: int32
                    maximum: 3
                    minimum: 0
                    type: integer
                state:
                    description: In active state a connected IR blaster will be emitting
                        light.
                    enum:
                    - active
                    - inactive
                    type: string
        PucSettings:
            properties:
                modulationEnabled:
                    type: boolean
                output:
                    enum:
                    - puc_a
                    - puc_b
                    type: string
                pucFile:
                    type: string
                standbyOption:
                    enum:
                    - OffAtTvStandby
                    - OffAtSourceChange
                    - AlwaysOn
                    - ManualControl
                    type: string
            type: object
        PucSource:
            properties:
                displayName:
                    type: string
                id:
                    type: string
                pucSettings:
                    $ref: '#/components/schemas/PucSettings'
            type: object
        PucSourceSettingsArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/PucSource'
                    type: array
            required:
            - items
            type: object
        RemoteMenuItem:
            allOf:
            -   $ref: '#/components/schemas/RemoteMenuItemProperties'
            -   properties:
                    available:
                        nullable: true
                        type: boolean
                    content:
                        $ref: '#/components/schemas/ContentItem'
                    fixed:
                        description: True if this is a fixed menu item. A fixed item
                            can't be deleted or moved
                        type: boolean
                    id:
                        description: Unique ID for this menu item
                        format: uuid
                        type: string
                required:
                - id
                - fixed
                type: object
        RemoteMenuItemMap:
            additionalProperties:
                $ref: '#/components/schemas/RemoteMenuItem'
            example:
                6c2ab917-2a9e-42dd-87c6-1fa2fabcdeb0:
                    contentUri: netRadio://123456
                    label: P3
                ee5196ce-65c4-4c56-9a48-1943c4afef9c:
                    contentUri: tv://netflix
                    label: Netflix
            type: object
        RemoteMenuItemProperties:
            allOf:
            -   $ref: '#/components/schemas/SceneTriggerBaseProperties'
            -   properties:
                    disabled:
                        nullable: true
                        type: boolean
                    dynamicList:
                        description: |
                            Let mozart create a dynamic list. This list will be attached as children to the menu item. If dynamicList is set it's not possible to change or manipulate any of the children because mozart can alter them at any given time
                        enum:
                        - none
                        - radioFavorites
                        nullable: true
                        type: string
                    firstChildMenuItemId:
                        description: ID of the first child menu item
                        format: uuid
                        nullable: true
                        type: string
                    label:
                        description: Alternative label, if omitted mozart will try
                            its best
                        nullable: true
                        type: string
                    nextSiblingMenuItemId:
                        description: ID of the next sibling menu item
                        format: uuid
                        nullable: true
                        type: string
                    parentMenuItemId:
                        description: ID of the parent menu item
                        format: uuid
                        nullable: true
                        type: string
                type: object
        RemoteSupportedKey:
            properties:
                displayName:
                    type: string
                enabled:
                    type: boolean
                name:
                    type: string
            required:
            - name
            - enabled
            - displayName
            type: object
        RemoteSupportedKeyList:
            items:
                $ref: '#/components/schemas/RemoteSupportedKey'
            type: array
        RemoteSupportedKeySetting:
            properties:
                enabled:
                    type: boolean
            required:
            - enabled
            type: object
        RemoteSupportedKeysResponse:
            properties:
                items:
                    $ref: '#/components/schemas/RemoteSupportedKeyList'
        RemoteUIKeyArray:
            example:
                items:
                - Select
                - Up
                - Down
                - Left
                - Right
                - Exit
                - Back
                - Root
                - StepUp
                - StepDown
                - Home
                - Blue
                - Red
                - Green
                - Yellow
            properties:
                items:
                    items:
                        type: string
                    type: array
        RemoteUIKeyState:
            properties:
                state:
                    description: |
                        The state of the pressed key. ShortPress and LongPress's duration are determined by the remote. Whereas Down, Continue, and Release reflect the state of the key and press duration is the time between a Down and a Release state. Continue indicates that a button is pressed and the key event should be handled multiple times until a release is received.
                    enum:
                    - ShortPress
                    - LongPress
                    - Down
                    - Continue
                    - Release
                    type: string
            type: object
        RenderingState:
            properties:
                value:
                    enum:
                    - idle
                    - buffering
                    - started
                    - paused
                    - stopped
                    - ended
                    - error
                    - unknown
                    type: string
        RequiredEnable:
            properties:
                enabled:
                    type: boolean
            required:
            - enabled
            type: object
        RoomCompensation:
            properties:
                value:
                    $ref: '#/components/schemas/RoomCompensationValue'
            required:
            - value
            type: object
        RoomCompensationCurrentMeasurement:
            description: |
                State and speaker ID of the currently running measurement.
                Is only relevant for advanced room compensation.
            properties:
                speakerId:
                    $ref: '#/components/schemas/SpeakerId'
                    description: Speaker ID of the speaker being measured.
                state:
                    description: |
                        State of the measurement for the speaker.
                        started:
                          The measurement has started.
                        done:
                          The measurement has ended sucessfully.
                        lastDone:
                          The last measurement in the run has ended sucessfully.
                        error:
                          An error occurred during measurement.
                    enum:
                    - started
                    - done
                    - lastDone
                    - error
                    type: string
            type: object
        RoomCompensationDebug:
            properties:
                value:
                    type: boolean
        RoomCompensationEnabled:
            properties:
                value:
                    type: boolean
        RoomCompensationErrorDetails:
            properties:
                errorList:
                    description: List of the speakers where measurement failed, including
                        error type.
                    items:
                        $ref: '#/components/schemas/RoomCompensationMeasurementError'
                    type: array
            type: object
        RoomCompensationFeature:
            allOf:
            -   $ref: '#/components/schemas/RoomCompensation'
            -   $ref: '#/components/schemas/RoomCompensationRange'
        RoomCompensationInfo:
            properties:
                debug:
                    $ref: '#/components/schemas/RoomCompensationDebug'
                enabled:
                    $ref: '#/components/schemas/RoomCompensationEnabled'
                lastResult:
                    $ref: '#/components/schemas/RoomCompensationResult'
                lastRun:
                    $ref: '#/components/schemas/RoomCompensationState'
                type:
                    $ref: '#/components/schemas/RoomCompensationType'
                version:
                    $ref: '#/components/schemas/RoomCompensationVersion'
            type: object
        RoomCompensationMeasurementError:
            properties:
                error:
                    description: |
                        noError:
                          The measurement went OK.
                        lowSignal:
                          When there is too low signal in the recording, e.g. due to a loudspeaker being placed at
                          too great a distance from the microphone.
                        speakerSilent:
                          No signal could be measured.
                          Could be because:
                            - The speaker is powered off or not connected.
                            - The left/right switch on a wired powerlink speaker is set in the wrong position.
                            - The speaker is placed in another room behind closed doors.
                        noisy<Left/Right/External>Microphone:
                          When the recording of the given microphone is too noisy.
                          Could be because:
                            - Something is blocking the microphone
                        externalMicrophoneLocation:
                          When the location of the external microphone is invalid.
                        externalMicrophoneMissing:
                          If the external microphone was missing/disconnected during a measurement.
                        microphonesDisabled:
                          If the microphones are either muted or disabled.
                        noisyMeasurement:
                          When too much background noise has been detected during the measurement
                        internalError:
                          Something went wrong internally - can not be fixed by the user. Try again.
                    enum:
                    - noError
                    - lowSignal
                    - speakerSilent
                    - noisyLeftMicrophone
                    - noisyRightMicrophone
                    - noisyExternalMicrophone
                    - externalMicrophoneLocation
                    - externalMicrophoneMissing
                    - microphonesDisabled
                    - noisyMeasurement
                    - internalError
                    type: string
                speakerId:
                    $ref: '#/components/schemas/SpeakerId'
                    description: |
                        Speaker ID of the speaker with measurement error.
                        Is only relevant for advanced room compensation.
            type: object
        RoomCompensationProperties:
            allOf:
            -   $ref: '#/components/schemas/RoomCompensationType'
            -   properties:
                    action:
                        description: |
                            Must be set if room compensation type is advanced.
                            runAll:
                              Do measurements on all connected speakers.
                            continue:
                              Continue from and including the speaker where last interrupted (stopped or failed).
                            useSpeakerList:
                              Do measurements on the speakers in the list property.
                        enum:
                        - runAll
                        - continue
                        - useSpeakerList
                        nullable: true
                        type: string
                    continueOnError:
                        description: |
                            On failing measurement on a speaker, default behavior is to stop measurement and skip the remaining speakers.
                            Setting continueOnError to true will make the measuremnt process continue and finish measurement on all speakers,
                            even though an error ocurred on one of the speakers.
                        nullable: true
                        type: boolean
                    skipAutomaticRoleAssignment:
                        description: Skip calculation of automatic role assignment.
                        nullable: true
                        type: boolean
                    speakerList:
                        description: |
                            List of speaker IDs to include in room compensation / automatic role assignment measurement.
                            Relevant e.g. if you want to create a speaker group without the external speakers included.
                            This can not be used for doing measurements on a partial speaker group, only on all
                            speakers in an existing group or for all speakers in a new group.
                        items:
                            $ref: '#/components/schemas/SpeakerId'
                        nullable: true
                        type: array
                    speakerPreset:
                        description: The Powerlink preset to use for the external
                            PL/WPL speakers.
                        format: uint8
                        nullable: true
                        type: integer
                type: object
        RoomCompensationRange:
            properties:
                default:
                    $ref: '#/components/schemas/RoomCompensationValue'
                    description: Product and role specific default room compensation
                        value
                maxItems:
                    description: Maximum number of items in the `value` field
                    maximum: 20
                    minimum: 1
                    type: integer
                range:
                    description: Possible values for the `value` field
                    example:
                    - internal
                    - external
                    items:
                        type: string
                    type: array
            required:
            - default
            - range
            type: object
        RoomCompensationResponse:
            properties:
                frequency:
                    format: int32
                    type: integer
                gain:
                    format: double
                    type: number
        RoomCompensationResult:
            properties:
                compensation:
                    items:
                        $ref: '#/components/schemas/RoomCompensationResponse'
                    type: array
                measuredResponse:
                    items:
                        $ref: '#/components/schemas/RoomCompensationResponse'
                    type: array
                placement:
                    enum:
                    - free
                    - nearWall
                    - unknown
                    type: string
                referenceResponse:
                    items:
                        $ref: '#/components/schemas/RoomCompensationResponse'
                    type: array
                speakerGroupSuggestion:
                    $ref: '#/components/schemas/SpeakerGroup'
                    description: |
                        Result from automatic speaker role assignment and room compensation measurements.
                        Is only relevant for advanced room compensation.
                        Includes id, type, role, gain, distance and location for requested speakers,
                        together with the ID of the room compensation result.
                        This is not persisted on Mozart side, but can be used by the client,
                        e.g. as basis for a new speaker group.
                timeStamp:
                    format: date-time
                    type: string
            type: object
        RoomCompensationState:
            allOf:
            -   $ref: '#/components/schemas/RoomCompensationStateValue'
            -   properties:
                    error:
                        description: |
                            microphoneMuted:
                              The microphone is muted (soft-off, using touch button).
                            microphoneSwitchOff:
                              The microphone switch is set in its off position.
                            externalMicrophoneMissing:
                              The external microphone is not connected.
                              Is only relevant for advanced room compensation.
                            externalMicrophoneInvalidPosition:
                              The external microphone is placed in an invalid position,
                              e.g. placed too close or in an extreme angle to the internal speakers.
                              Is only relevant for advanced room compensation.
                            noisyEnvironment:
                              Too much environment noise to get a valid measurement.
                            speakerMeasurementFailed:
                              A measurement failed, related to one of the individual speakers.
                              See the errorDetails property for details about the error and which speaker measurement failed.
                              Is only relevant for advanced room compensation.
                            invalidSpeakerList:
                              The speaker list contains invalid speakers.
                              Valid speakers are: all external speakers and non-virtual internal speakers.
                              Is only relevant for advanced room compensation.
                            invalidAction
                              Could not start with given action.
                              Eg. can't run from last failed speaker if there isn't any failed run.
                              Is only relevant for advanced room compensation.
                            internalError:
                              Internal product error.
                        enum:
                        - noError
                        - microphoneMuted
                        - microphoneSwitchOff
                        - externalMicrophoneMissing
                        - externalMicrophoneInvalidPosition
                        - noisyEnvironment
                        - speakerMeasurementFailed
                        - invalidSpeakerList
                        - invalidAction
                        - internalError
                        type: string
                    errorDetails:
                        $ref: '#/components/schemas/RoomCompensationErrorDetails'
                    lastRunAvailable:
                        description: |
                            When true, measurements have been cached due to manual interrupt or failure,
                            making it possible to use the action "continue" where the system will continue from the speaker where interrupted.
                            The cached measurements are only temporary and will be cleared after some time (default 15min),
                            in which case lastRunAvailable becomes false.
                        type: boolean
                    properties:
                        $ref: '#/components/schemas/RoomCompensationProperties'
                    timeStamp:
                        format: date-time
                        type: string
                type: object
        RoomCompensationStateValue:
            properties:
                state:
                    enum:
                    - notStarted
                    - running
                    - done
                    - error
                    - stopped
                    type: string
            type: object
        RoomCompensationType:
            properties:
                value:
                    description: |
                        The type of roomcompensation used / to use.
                        simple:
                          For speakers without external speakers.
                        advanced:
                          For products with external speakers or other advanced multichannel capabilities.
                          This requries that at least action in the other properties of RoomCompensationProperties is set.
                    enum:
                    - simple
                    - advanced
                    type: string
        RoomCompensationValue:
            description: |
                List of room compensation sweeps to combine. No room compensation is done
                if this list is empty. The maximum length of this list is product
                specific.
            items:
                type: string
            type: array
        RoomCompensationVersion:
            properties:
                algorithm:
                    format: int32
                    minimum: 0
                    type: integer
                coefficients:
                    format: int32
                    minimum: 0
                    type: integer
        RssiInfo:
            properties:
                chain:
                    items:
                        format: int32
                        type: integer
                    type: array
                level:
                    format: int32
                    type: integer
            type: object
        Scene:
            allOf:
            -   $ref: '#/components/schemas/SceneProperties'
            -   $ref: '#/components/schemas/SceneClassification'
        SceneClassification:
            properties:
                classification:
                    description: The classification of Scene
                    enum:
                    - system
                    - userDefined
                    nullable: true
                    type: string
            type: object
        SceneId:
            properties:
                id:
                    description: The id of Scene
                    format: uuid
                    type: string
            required:
            - id
            type: object
        SceneList:
            description: A list of scenes
            items:
                format: uuid
                type: string
            type: array
        SceneMap:
            additionalProperties:
                $ref: '#/components/schemas/Scene'
            example:
                fdecf968-3ab9-46dc-a71d-e4204ef47fdb:
                    actionList:
                    -   type: volume
                        volumeLevel: 35
                    -   radioStationId: '8779112938791514'
                        type: radio
                    -   stopDuration: 20
                        type: stop
                    label: New label
            type: object
        SceneMatch:
            properties:
                label:
                    nullable: true
                    type: string
                tags:
                    $ref: '#/components/schemas/SceneTags'
                    nullable: true
            type: object
        SceneProperties:
            properties:
                actionList:
                    $ref: '#/components/schemas/ActionList'
                label:
                    nullable: true
                    type: string
                tags:
                    $ref: '#/components/schemas/SceneTags'
                    nullable: true
            required:
            - actionList
            type: object
        SceneTags:
            description: A list of user defined tags. This allows a client to create
                virtual lists
            items:
                type: string
            type: array
        SceneTriggerBaseProperties:
            description: Base properties for a scene trigger
            properties:
                actionList:
                    $ref: '#/components/schemas/ActionList'
                    nullable: true
                sceneList:
                    $ref: '#/components/schemas/SceneList'
                    description: |
                        Actions will be extracted from all scenes in this list and will be merged together with (`actionList`).
                        On colliding actions the priority will be: (N represent last index in `sceneList`)
                        1. `actionList`
                        2. scene N in `sceneList`
                        ...
                        3. scene 0 in `sceneList`
                    nullable: true
            type: object
        SerialNumber:
            description: Speaker serial number
            example: '12345678'
            pattern: ^\d{8}
            type: string
        SerialPortId:
            properties:
                id:
                    $ref: '#/components/schemas/SerialPortIdType'
            type: object
        SerialPortIdType:
            type: string
        SerialPortSettings:
            properties:
                loopbackEnabled:
                    type: boolean
            type: object
        SoftwareUpdateSettings:
            properties:
                automaticUpdate:
                    description: updates are automatically downloaded and installed
                    type: boolean
            type: object
        SoftwareUpdateState:
            properties:
                secondsRemaining:
                    format: int32
                    type: integer
                value:
                    enum:
                    - idle
                    - checking
                    - updateCheckFailed
                    - noUpdatesAvailable
                    - updateAvailable
                    - downloadingUpdate
                    - updateDownloaded
                    - downloadFailed
                    - installingUpdate
                    - installationFailed
                    - schedulerFailed
                    - rebooting
                    type: string
        SoftwareUpdateStatus:
            properties:
                availableUpdate:
                    $ref: '#/components/schemas/SoftwareVersion'
                lastCheck:
                    format: date-time
                    type: string
                lastUpdate:
                    format: date-time
                    type: string
                softwareVersion:
                    $ref: '#/components/schemas/SoftwareVersion'
                state:
                    $ref: '#/components/schemas/SoftwareUpdateState'
                updateProgress:
                    format: int32
                    type: integer
            required:
            - softwareVersion
            - state
            type: object
        SoftwareVersion:
            type: string
        SoundAdjustments:
            properties:
                ambience:
                    format: double
                    type: number
                bass:
                    format: int32
                    type: integer
                directivity:
                    type: string
                ecoMode:
                    type: boolean
                fadein:
                    type: boolean
                loudness:
                    type: boolean
                treble:
                    format: int32
                    type: integer
            type: object
        SoundFeatureSet:
            properties:
                ambience:
                    $ref: '#/components/schemas/AmbienceFeature'
                balance:
                    $ref: '#/components/schemas/BalanceFeature'
                bass:
                    $ref: '#/components/schemas/BassFeature'
                bass-management:
                    $ref: '#/components/schemas/BassManagementFeature'
                compression:
                    $ref: '#/components/schemas/CompressionFeature'
                directivity:
                    $ref: '#/components/schemas/DirectivityFeature'
                fader:
                    $ref: '#/components/schemas/FaderFeature'
                roomCompensation:
                    $ref: '#/components/schemas/RoomCompensationFeature'
                spatial-envelopment:
                    $ref: '#/components/schemas/SpatialEnvelopmentFeature'
                spatial-height:
                    $ref: '#/components/schemas/SpatialHeightFeature'
                spatial-processing:
                    $ref: '#/components/schemas/SpatialProcessingFeature'
                spatial-surround:
                    $ref: '#/components/schemas/SpatialSurroundFeature'
                spatial-width:
                    $ref: '#/components/schemas/SpatialWidthFeature'
                speech-enhance:
                    $ref: '#/components/schemas/SpeechEnhanceFeature'
                toneTouchX:
                    $ref: '#/components/schemas/ToneTouchXFeature'
                toneTouchY:
                    $ref: '#/components/schemas/ToneTouchYFeature'
                treble:
                    $ref: '#/components/schemas/TrebleFeature'
            type: object
        SoundSettings:
            properties:
                adjustments:
                    $ref: '#/components/schemas/SoundAdjustments'
                roomCompensation:
                    $ref: '#/components/schemas/RoomCompensationInfo'
                toneTouch:
                    $ref: '#/components/schemas/SoundToneTouch'
            type: object
        SoundToneTouch:
            properties:
                x:
                    format: double
                    type: number
                y:
                    format: double
                    type: number
                z:
                    format: double
                    type: number
            type: object
        Source:
            properties:
                id:
                    type: string
                isEnabled:
                    description: some sources require an explicit activation or accept
                        of terms before being enabled
                    type: boolean
                isPlayable:
                    type: boolean
                name:
                    type: string
                type:
                    $ref: '#/components/schemas/SourceTypeEnum'
            type: object
        SourceArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Source'
                    type: array
        SourceTypeEnum:
            properties:
                value:
                    enum:
                    - beolink
                    - bluetooth
                    - dlna
                    - qplay
                    - airPlay
                    - lineIn
                    - chromeCast
                    - uriStreamer
                    - netRadio
                    - local
                    - generator
                    - spotify
                    - spdif
                    - pl
                    - wpl
                    - tv
                    - deezer
                    - classicsAdapter
                    - usb
                    - tidalConnect
                    - unknown
                    type: string
        SpatialEnvelopment:
            properties:
                value:
                    description: Selected spatial-envelopment value
                    format: double
                    type: number
            required:
            - value
            type: object
        SpatialEnvelopmentFeature:
            allOf:
            -   $ref: '#/components/schemas/SpatialEnvelopment'
            -   $ref: '#/components/schemas/SpatialEnvelopmentRange'
        SpatialEnvelopmentRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpatialEnvelopment'
                    description: Default spatial-envelopment value
                range:
                    description: spatial-envelopment range
                    items:
                        $ref: '#/components/schemas/SpatialEnvelopment'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        SpatialHeight:
            properties:
                value:
                    description: Selected spatial-height value
                    format: double
                    type: number
            required:
            - value
            type: object
        SpatialHeightFeature:
            allOf:
            -   $ref: '#/components/schemas/SpatialHeight'
            -   $ref: '#/components/schemas/SpatialHeightRange'
        SpatialHeightRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpatialHeight'
                    description: Default spatial-height value
                range:
                    description: spatial-height range
                    items:
                        $ref: '#/components/schemas/SpatialHeight'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        SpatialProcessing:
            properties:
                value:
                    description: Selected spatial-processing value
                    enum:
                    - direct
                    - trueimage
                    - downmix
                    type: string
            required:
            - value
            type: object
        SpatialProcessingFeature:
            allOf:
            -   $ref: '#/components/schemas/SpatialProcessing'
            -   $ref: '#/components/schemas/SpatialProcessingRange'
        SpatialProcessingRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpatialProcessing'
                    description: Default spatial-processing value
                range:
                    description: spatial-processing range
                    items:
                        $ref: '#/components/schemas/SpatialProcessing'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        SpatialSurround:
            properties:
                value:
                    description: Selected spatial-surround value
                    format: double
                    type: number
            required:
            - value
            type: object
        SpatialSurroundFeature:
            allOf:
            -   $ref: '#/components/schemas/SpatialSurround'
            -   $ref: '#/components/schemas/SpatialSurroundRange'
        SpatialSurroundRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpatialSurround'
                    description: Default spatial-surround value
                range:
                    description: spatial-surround range
                    items:
                        $ref: '#/components/schemas/SpatialSurround'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        SpatialWidth:
            properties:
                value:
                    description: Selected spatial-width value
                    format: double
                    type: number
            required:
            - value
            type: object
        SpatialWidthFeature:
            allOf:
            -   $ref: '#/components/schemas/SpatialWidth'
            -   $ref: '#/components/schemas/SpatialWidthRange'
        SpatialWidthRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpatialWidth'
                    description: Default spatial-width value
                range:
                    description: spatial-width range
                    items:
                        $ref: '#/components/schemas/SpatialWidth'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        Speaker:
            properties:
                firmwareVersion:
                    type: string
                friendlyName:
                    type: string
                id:
                    type: string
                isConfigurable:
                    type: boolean
                isDeleteable:
                    type: boolean
                macAddress:
                    type: string
                outputType:
                    enum:
                    - internal
                    - internalReflective
                    - virtual
                    - powerLink
                    - wisa
                    - other
                    type: string
                serialNumber:
                    type: string
                speakerGroups:
                    description: List of SpeakerGroups that the output participates
                        in
                    items:
                        $ref: '#/components/schemas/SpeakerGroupId'
                    nullable: true
                    type: array
                status:
                    enum:
                    - unavailable
                    - offline
                    - online
                    type: string
                type:
                    type: string
                typeId:
                    type: string
            type: object
        SpeakerArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Speaker'
                    type: array
        SpeakerGroup:
            properties:
                crossoverFrequency:
                    description: Crossover frequency for bass management in Hz
                    format: int32
                    maximum: 300
                    minimum: 20
                    nullable: true
                    type: integer
                enablePhaseCompensation:
                    description: Enable phase compensation in bass management.
                    nullable: true
                    type: boolean
                friendlyName:
                    description: |
                        Friendly name of the SpeakerGroup.
                        Required when creating a new group
                    nullable: true
                    type: string
                id:
                    $ref: '#/components/schemas/SpeakerGroupId'
                    nullable: true
                isDeleteable:
                    nullable: true
                    type: boolean
                items:
                    items:
                        $ref: '#/components/schemas/SpeakerGroupMember'
                    nullable: true
                    type: array
                roomCompensationId:
                    description: |
                        ID of the calculated coefficents for this group, made during advanced room compensation.
                        When updating an existing group, an empty string will clear roomCompensationId.
                    format: uuid
                    nullable: true
                    type: string
                speakerPreset:
                    description: Speaker preset / listening mode eg. BL28 curtain
                        position etc.
                    format: int32
                    maximum: 99
                    minimum: 0
                    nullable: true
                    type: integer
            type: object
        SpeakerGroupId:
            format: uuid
            type: string
        SpeakerGroupList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/SpeakerGroupOverview'
                    type: array
            type: object
        SpeakerGroupMember:
            properties:
                distance:
                    description: Distance from listening position in cm
                    format: int32
                    maximum: 1000
                    minimum: 0
                    nullable: true
                    type: integer
                friendlyName:
                    nullable: true
                    type: string
                gain:
                    description: Level in dB
                    format: float
                    maximum: 6.0
                    minimum: -24.0
                    nullable: true
                    type: number
                id:
                    type: string
                location:
                    description: |
                        Coordinates of the speaker position in cm.
                        Location is only relevant when the group is based on the automatic role assignment of advanced room compensation.
                        The location is relative to the external microphone used during advanced room compensation measurements:
                          x=0, y=0, z=0: The location of the external microphone used during measurement.
                          x<0: To the left of the external microphone.
                          x>0: To the right of the external microphone.
                          y<0: Behind the external microphone.
                          y>0: In front of the external microphone.
                          z<0: Above the external microphone (may not be reliable).
                          z>0: Below the external microphone (may not be reliable).
                    nullable: true
                    properties:
                        x:
                            format: int32
                            type: integer
                        y:
                            format: int32
                            type: integer
                        z:
                            format: int32
                            type: integer
                    required:
                    - x
                    - y
                    - z
                    type: object
                redirectionLevel:
                    description: Redirection level for bass management in dB
                    format: int32
                    maximum: 6
                    minimum: -100
                    nullable: true
                    type: integer
                role:
                    $ref: '#/components/schemas/SpeakerRole'
                type:
                    nullable: true
                    type: string
            required:
            - id
            type: object
        SpeakerGroupOverview:
            properties:
                friendlyName:
                    type: string
                id:
                    $ref: '#/components/schemas/SpeakerGroupId'
                isDeleteable:
                    type: boolean
            required:
            - friendlyName
            - id
            - isDeleteable
            type: object
        SpeakerId:
            example: FrontLeft
            type: string
        SpeakerLinkChannel:
            example: |
                {
                  "channel": "left"
                }
            properties:
                channel:
                    enum:
                    - all
                    - left
                    - right
                    type: string
            required:
            - channel
            type: object
        SpeakerLinkFormat:
            example: |
                {
                  "format": "lc3plus"
                }
            properties:
                format:
                    enum:
                    - pcm
                    - lc3plus
                    type: string
            required:
            - format
            type: object
        SpeakerLinkNetworkDelay:
            properties:
                networkDelayMs:
                    format: int32
                    minimum: 0
                    type: integer
            required:
            - value
            type: object
        SpeakerLinkPSK:
            properties:
                kid:
                    type: string
                psk:
                    description: |
                        AP encrypted using the key identified by `kid`.
                    type: string
            required:
            - kid
            - key
            type: object
        SpeakerLinkPeer:
            properties:
                baseUrl:
                    $ref: '#/components/schemas/URI'
                ipAddress:
                    $ref: '#/components/schemas/IPv4'
                serialNumber:
                    $ref: '#/components/schemas/SerialNumber'
            required:
            - baseUrl
            - ipAddress
            - serialNumber
            type: object
        SpeakerLinkRole:
            properties:
                channel:
                    enum:
                    - all
                    - left
                    - right
                    type: string
                desired:
                    enum:
                    - none
                    - primary
                    - secondary
                    type: string
                primary:
                    $ref: '#/components/schemas/SerialNumber'
                role:
                    enum:
                    - none
                    - primary
                    - secondary
                    type: string
            required:
            - role
            type: object
        SpeakerLinkSecondary:
            properties:
                baseUrl:
                    $ref: '#/components/schemas/URI'
                ipAddress:
                    $ref: '#/components/schemas/IPv4'
                serialNumber:
                    $ref: '#/components/schemas/SerialNumber'
            required:
            - baseUrl
            - ipAddress
            - serialNumber
            type: object
        SpeakerMacAddrArray:
            properties:
                items:
                    items:
                        description: MAC address, example 02:EA:4D:00:00:86
                        type: string
                    type: array
        SpeakerPreset:
            properties:
                directivity:
                    type: string
                id:
                    type: integer
            type: object
        SpeakerPresetActive:
            properties:
                id:
                    type: integer
            type: object
        SpeakerPresetList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/SpeakerPreset'
                    type: array
            type: object
        SpeakerRole:
            nullable: true
            type: string
        SpeakerRoleEnum:
            properties:
                value:
                    enum:
                    - standalone
                    - multichannel
                    type: string
        SpeakerRoles:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/SpeakerRole'
                    type: array
            type: object
        SpeakerTypes:
            properties:
                items:
                    items:
                        type: string
                    type: array
        SpeechEnhance:
            properties:
                value:
                    description: Selected speech-enhance value
                    format: double
                    type: number
            required:
            - value
            type: object
        SpeechEnhanceFeature:
            allOf:
            -   $ref: '#/components/schemas/SpeechEnhance'
            -   $ref: '#/components/schemas/SpeechEnhanceRange'
        SpeechEnhanceRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpeechEnhance'
                    description: Default speech-enhance value
                range:
                    description: speech-enhance range
                    items:
                        $ref: '#/components/schemas/SpeechEnhance'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        StandAutoCalibrationState:
            properties:
                autoCalibrationState:
                    enum:
                    - calibrationNotConnected
                    - calibrationNotStarted
                    - calibrationRunning
                    - calibrationSuccess
                    - calibrationFailed
                    type: string
            type: object
        StandConnected:
            properties:
                connected:
                    type: boolean
            type: object
        StandEndstop:
            properties:
                angle:
                    format: float
                    type: number
                direction:
                    enum:
                    - counterClockWise
                    - clockWise
                    type: string
                id:
                    format: uuid
                    type: string
            required:
            - direction
            type: object
        StandEndstopId:
            format: uuid
            type: string
        StandEndstopList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/StandEndstop'
                    type: array
            type: object
        StandInfo:
            properties:
                applicationVersion:
                    type: string
                bootloaderVersion:
                    type: string
                serialNumber:
                    type: string
                standType:
                    enum:
                    - wallBracketLeft
                    - wallBracketRight
                    - floorStand
                    type: string
                supportedAxes:
                    items:
                        enum:
                        - turn
                        type: string
                    type: array
            type: object
        StandMovement:
            properties:
                angle:
                    format: float
                    nullable: true
                    type: number
                ignoreEndstop:
                    example: false
                    type: boolean
                standMotion:
                    enum:
                    - continuousCCW
                    - stepCCW
                    - stop
                    - stepCW
                    - continuousCW
                    type: string
            type: object
        StandMovementStatus:
            properties:
                movementState:
                    enum:
                    - stopped
                    - movingCW
                    - movingCCW
                    - blocked
                    type: string
            type: object
        StandNamedPosition:
            properties:
                angle:
                    format: float
                    type: number
                friendlyName:
                    type: string
                id:
                    format: uuid
                    type: string
            type: object
        StandPosition:
            properties:
                angle:
                    format: float
                    type: number
            type: object
        StandPositionId:
            format: uuid
            type: string
        StandPositionList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/StandNamedPosition'
                    type: array
            type: object
        StandStatus:
            properties:
                manuallyadjusted:
                    type: boolean
                movementstatus:
                    $ref: '#/components/schemas/StandMovementStatus'
                position:
                    $ref: '#/components/schemas/StandPosition'
                targetAngle:
                    format: float
                    type: number
            type: object
        StandType:
            properties:
                standType:
                    enum:
                    - wallBracketLeft
                    - wallBracketRight
                    - floorStand
                    type: string
            type: object
        StandbySettings:
            properties:
                batteryTimeout:
                    description: |
                        Timeout in minutes from when nothing is playing until the product
                        enters standby when running on battery (0 is disabled)
                    type: integer
            type: object
        SupportedSoundFeatures:
            additionalProperties:
                $ref: '#/components/schemas/SoundFeatureSet'
            description: Supported sound features
            type: object
        TestImage:
            properties:
                testImage:
                    description: |
                        Test Image format:
                         * 'None', No test image.
                         * 'SMPTE1080p', SMPTE (Society of Motion Picture and Television Engineers) color bars.
                         * 'Rainbow1080p', Diagonal rainbow color bars.
                    enum:
                    - None
                    - SMPTE1080p
                    - Rainbow1080p
                    type: string
            type: object
        TestImagesList:
            items:
                type: string
            type: array
        TimeOfDaySeconds:
            description: Time of day in seconds from midnight
            format: int32
            maximum: 86399
            minimum: 0
            type: integer
        Timer:
            description: Object for a timer on the product
            properties:
                actionList:
                    $ref: '#/components/schemas/ActionList'
                content:
                    $ref: '#/components/schemas/ContentItem'
                    nullable: true
                duration:
                    description: The duration of the timer in seconds
                    format: int32
                    minimum: 0
                    type: integer
                id:
                    $ref: '#/components/schemas/AlarmId'
                    nullable: true
                label:
                    maxLength: 128
                    type: string
                lastStateChange:
                    $ref: '#/components/schemas/TimeOfDaySeconds'
                    description: |
                        The last time the state of the timer was changed.
                        Time point is seconds from midnight.
                        Generated by the product!
                    nullable: true
                state:
                    description: The state of the timer
                    enum:
                    - started
                    - paused
                    type: string
            required:
            - label
            - actionList
            - duration
            - state
            type: object
        TimerList:
            description: List of timers
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Timer'
                    type: array
            type: object
        ToneTouch:
            properties:
                x:
                    $ref: '#/components/schemas/ToneTouchType'
                y:
                    $ref: '#/components/schemas/ToneTouchType'
            type: object
        ToneTouchType:
            properties:
                value:
                    format: double
                    type: number
            required:
            - value
            type: object
        ToneTouchTypeRange:
            properties:
                default:
                    $ref: '#/components/schemas/ToneTouchType'
                    description: Product and role specific default ToneTouch X or
                        Y
                range:
                    description: Product and role specific tone touch X or Y range
                    items:
                        $ref: '#/components/schemas/ToneTouchType'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        ToneTouchXFeature:
            allOf:
            -   $ref: '#/components/schemas/ToneTouchType'
            -   $ref: '#/components/schemas/ToneTouchTypeRange'
        ToneTouchYFeature:
            allOf:
            -   $ref: '#/components/schemas/ToneTouchType'
            -   $ref: '#/components/schemas/ToneTouchTypeRange'
        TouchInfo:
            properties:
                version:
                    type: string
            type: object
        Treble:
            properties:
                value:
                    description: Selected treble value
                    format: int32
                    type: integer
            required:
            - value
            type: object
        TrebleFeature:
            allOf:
            -   $ref: '#/components/schemas/Treble'
            -   $ref: '#/components/schemas/TrebleRange'
        TrebleRange:
            properties:
                default:
                    $ref: '#/components/schemas/Treble'
                    description: Product and role specific default treble value
                range:
                    description: Product and role specific treble range
                    items:
                        $ref: '#/components/schemas/Treble'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        TvInfoEventData:
            properties:
                integration:
                    $ref: '#/components/schemas/TvIntegrationTypes'
            type: object
        TvIntegrationTypes:
            properties:
                value:
                    enum:
                    - ThirdParty
                    - Lge
                    type: string
        TvProperties:
            properties:
                integrationSupported:
                    $ref: '#/components/schemas/TvIntegrationTypes'
                name:
                    nullable: true
                    type: string
                year:
                    nullable: true
                    type: integer
            type: object
        TvSource:
            properties:
                id:
                    type: string
                name:
                    type: string
            type: object
        TvSourceArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/TvSource'
                    type: array
        TvState:
            properties:
                integration:
                    $ref: '#/components/schemas/TvIntegrationTypes'
                tvInfo:
                    $ref: '#/components/schemas/TvProperties'
            type: object
        TvTargetLatencyOffset:
            properties:
                offset:
                    default: 0
                    maximum: 100
                    minimum: -100
                    type: integer
            required:
            - offset
            type: object
        URI:
            description: Reference to another resource
            example: http://speaker.local/api/v1/version
            format: uri
            type: string
        UnlockToken:
            properties:
                token:
                    description: The actual JWT token
                    type: string
            type: object
        Uri:
            properties:
                location:
                    type: string
            type: object
        UriRepeat:
            properties:
                repeat:
                    type: boolean
            type: object
        UsageReportEnabled:
            properties:
                enabled:
                    type: boolean
            type: object
        UserDataUpload:
            properties:
                allowed:
                    type: boolean
            type: object
        UserFlow:
            properties:
                userId:
                    format: int64
                    type: string
            type: object
        VideoPixelFormat:
            properties:
                bitdepth:
                    enum:
                    - bit8
                    - bit10
                    - bit12
                    type: string
                chromaSubsample:
                    enum:
                    - yCbCr444RGB
                    - yCbCr422
                    - yCbCr420
                    type: string
                colorimetry:
                    enum:
                    - rGB
                    - opRGB
                    - rGBP3D65
                    - rGBP3DCI
                    - rGB2020
                    - yCC601
                    - yCC709
                    - xvYCC601
                    - xvYCC709
                    - sYCC601
                    - opYCC601
                    - yCC2020NCL
                    - yCC2020NL
                    type: string
                fullRange:
                    type: boolean
            type: object
        VideoTimings:
            properties:
                horizontalResolution:
                    type: integer
                interlaced:
                    type: boolean
                refreshRate:
                    format: double
                    type: number
                verticalResolution:
                    type: integer
            type: object
        VoiceSettings:
            properties:
                detectionThreshold:
                    format: int32
                    minimum: 0
                    type: integer
                voiceService:
                    enum:
                    - none
                    - gva
                    - tencent
                    type: string
            type: object
        VolumeLevel:
            properties:
                level:
                    format: int32
                    type: integer
            type: object
        VolumeMute:
            properties:
                muted:
                    type: boolean
            type: object
        VolumeSettings:
            properties:
                default:
                    $ref: '#/components/schemas/VolumeLevel'
                maximum:
                    $ref: '#/components/schemas/VolumeLevel'
            type: object
        VolumeState:
            properties:
                default:
                    $ref: '#/components/schemas/VolumeLevel'
                level:
                    $ref: '#/components/schemas/VolumeLevel'
                maximum:
                    $ref: '#/components/schemas/VolumeLevel'
                muted:
                    $ref: '#/components/schemas/VolumeMute'
            type: object
        WebSocketEventActiveHdmiInputSignal:
            properties:
                eventData:
                    $ref: '#/components/schemas/HdmiInput'
                eventType:
                    type: string
            type: object
        WebSocketEventActiveListeningMode:
            properties:
                eventData:
                    $ref: '#/components/schemas/ListeningModeProps'
                eventType:
                    type: string
            type: object
        WebSocketEventActiveSpeakerGroup:
            properties:
                eventData:
                    $ref: '#/components/schemas/SpeakerGroupOverview'
                eventType:
                    type: string
            type: object
        WebSocketEventAlarmTimer:
            properties:
                eventData:
                    $ref: '#/components/schemas/AlarmTimerEventData'
                eventType:
                    type: string
            type: object
        WebSocketEventAlarmTriggered:
            properties:
                eventData:
                    $ref: '#/components/schemas/AlarmTriggeredInfo'
                eventType:
                    type: string
            type: object
        WebSocketEventBattery:
            properties:
                eventData:
                    $ref: '#/components/schemas/BatteryState'
                eventType:
                    type: string
            type: object
        WebSocketEventBeoRemoteButton:
            properties:
                eventData:
                    $ref: '#/components/schemas/BeoRemoteButton'
                eventType:
                    type: string
            type: object
        WebSocketEventBeolinkExperiencesResult:
            properties:
                eventData:
                    $ref: '#/components/schemas/BeolinkExperiencesResult'
                eventType:
                    type: string
            required:
            - eventType
            - eventData
            type: object
        WebSocketEventBeolinkJoinResult:
            properties:
                eventData:
                    $ref: '#/components/schemas/BeolinkJoinResult'
                eventType:
                    type: string
            required:
            - eventType
            - eventData
            type: object
        WebSocketEventButton:
            properties:
                eventData:
                    $ref: '#/components/schemas/ButtonEvent'
                eventType:
                    type: string
            type: object
        WebSocketEventCurtains:
            properties:
                eventData:
                    $ref: '#/components/schemas/ProductCurtainStatus'
                eventType:
                    type: string
            type: object
        WebSocketEventHdmiVideoFormatSignal:
            properties:
                eventData:
                    $ref: '#/components/schemas/HdmiVideoFormat'
                eventType:
                    type: string
            type: object
        WebSocketEventNotification:
            description: This telegram is used to send a tagged notification.
            properties:
                eventData:
                    $ref: '#/components/schemas/WebsocketNotificationTag'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackError:
            properties:
                eventData:
                    $ref: '#/components/schemas/PlaybackError'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackMetadata:
            properties:
                eventData:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackProgress:
            properties:
                eventData:
                    $ref: '#/components/schemas/PlaybackProgress'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackSource:
            properties:
                eventData:
                    $ref: '#/components/schemas/Source'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackState:
            properties:
                eventData:
                    $ref: '#/components/schemas/RenderingState'
                eventType:
                    type: string
            type: object
        WebSocketEventPowerState:
            properties:
                eventData:
                    $ref: '#/components/schemas/PowerStateEnum'
                eventType:
                    type: string
            type: object
        WebSocketEventPucInstallRemoteIdStatus:
            properties:
                eventData:
                    $ref: '#/components/schemas/InstallRecordIdState'
                eventType:
                    type: string
            type: object
        WebSocketEventRole:
            properties:
                eventData:
                    $ref: '#/components/schemas/SpeakerRoleEnum'
                eventType:
                    type: string
            type: object
        WebSocketEventRoomCompensationCurrentMeasurementEvent:
            description: |
                Sent when a room compensation measurement is started/done.
                Is only sent when room compensation type is advanced.
            properties:
                eventData:
                    $ref: '#/components/schemas/RoomCompensationCurrentMeasurement'
                eventType:
                    type: string
            type: object
        WebSocketEventRoomCompensationState:
            properties:
                eventData:
                    $ref: '#/components/schemas/RoomCompensationStateValue'
                eventType:
                    type: string
            type: object
        WebSocketEventSoftwareUpdateState:
            properties:
                eventData:
                    $ref: '#/components/schemas/SoftwareUpdateState'
                eventType:
                    type: string
            type: object
        WebSocketEventSoundSettings:
            properties:
                eventData:
                    $ref: '#/components/schemas/SoundSettings'
                eventType:
                    type: string
            type: object
        WebSocketEventSourceChange:
            properties:
                eventData:
                    $ref: '#/components/schemas/Source'
                eventType:
                    type: string
            type: object
        WebSocketEventSpeakerGroupChanged:
            properties:
                eventData:
                    $ref: '#/components/schemas/SpeakerGroupId'
                eventType:
                    type: string
            type: object
        WebSocketEventStandConnected:
            properties:
                eventData:
                    $ref: '#/components/schemas/StandConnected'
                eventType:
                    type: string
            type: object
        WebSocketEventStandPosition:
            properties:
                eventData:
                    $ref: '#/components/schemas/StandPosition'
                eventType:
                    type: string
            type: object
        WebSocketEventTvInfo:
            properties:
                eventData:
                    $ref: '#/components/schemas/TvInfoEventData'
                eventType:
                    type: string
            type: object
        WebSocketEventVolume:
            properties:
                eventData:
                    $ref: '#/components/schemas/VolumeState'
                eventType:
                    type: string
            type: object
        WebSocketEventWisaOutState:
            description: Speaker Discovery State changed
            properties:
                eventData:
                    $ref: '#/components/schemas/WisaOutState'
                eventType:
                    type: string
            required:
            - eventType
            - eventData
            type: object
        WebsocketNotificationTag:
            properties:
                value:
                    enum:
                    - configuration
                    - uri
                    - generatorSettings
                    - lineInSettings
                    - bluetoothDevices
                    - remoteControlDevices
                    - secondariesList
                    - queueHasBeenChanged
                    - endOfQueueHasBeenReached
                    - beolinkPeers
                    - beolinkListeners
                    - beolinkAvailableListeners
                    - bluetoothPairingStateChanged
                    - outputsChanged
                    - speakerGroupOverviewChanged
                    - remoteMenuChanged
                    - proximityPresenceDetected
                    - proximityPresenceNotDetected
                    type: string
        WiFiRegulatorySetting:
            properties:
                code:
                    type: string
            type: object
        WifiArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/BasicWirelessNetworkInformation'
                    type: array
        WifiCredentials:
            description: The credentials needed to connect to a wifi network
            properties:
                SSID:
                    description: |
                        The network SSID to connect to.
                    type: string
                password:
                    $ref: '#/components/schemas/EncryptedText'
                    description: |
                        the password encrypted with the public key.
            type: object
        WiredConfig:
            properties:
                method:
                    $ref: '#/components/schemas/NetworkMethodEnum'
                staticConfig:
                    $ref: '#/components/schemas/NetworkConfig'
            type: object
        WiredNetworkStatus:
            properties:
                ipInfo:
                    $ref: '#/components/schemas/IpV4Info'
                isActive:
                    type: boolean
                status:
                    $ref: '#/components/schemas/NetworkStatusEnum'
            type: object
        WirelessBitrateInfo:
            properties:
                bitrate:
                    format: int32
                    minimum: 0
                    type: integer
                bytes:
                    format: int32
                    minimum: 0
                    type: integer
                failed:
                    format: int32
                    minimum: 0
                    type: integer
                packets:
                    format: int32
                    minimum: 0
                    type: integer
                retries:
                    format: int32
                    minimum: 0
                    type: integer
            type: object
        WirelessChargingSettings:
            properties:
                enabled:
                    type: boolean
            required:
            - enabled
            type: object
        WirelessChargingState:
            properties:
                state:
                    description: |
                        'unknown' indicates that the system failed to receive state update from the wireless charging hardware
                        'noDevice' indicates that no device is registered and thereby also not charging.
                        'Charging' indicates that a device is registered and is currently charging.
                        'Full' indicates that a device is registered and the battery is fully charged.
                        'Error' indicates that a device is registered and charging has been suspended due to charging error (eg. overheating).
                        'Paused' indicates that a device is registered and the charging has been suspended due to system overwrite (eg. low power available).
                    enum:
                    - unknown
                    - noDevice
                    - charging
                    - full
                    - error
                    - paused
                    type: string
            type: object
        WirelessChargingStatus:
            allOf:
            -   $ref: '#/components/schemas/WirelessChargingSettings'
            -   $ref: '#/components/schemas/WirelessChargingState'
        WirelessConfig:
            properties:
                method:
                    $ref: '#/components/schemas/NetworkMethodEnum'
                ssid:
                    type: string
                staticConfig:
                    $ref: '#/components/schemas/NetworkConfig'
            type: object
        WirelessNetworkInformation:
            properties:
                bandwidth:
                    format: int32
                    minimum: 0
                    type: integer
                bssid:
                    type: string
                channel:
                    format: int32
                    maximum: 255
                    minimum: 0
                    type: integer
                encryption:
                    enum:
                    - unknown
                    - none
                    - wep
                    - psk
                    type: string
                frequency:
                    format: int32
                    minimum: 0
                    type: integer
                quality:
                    enum:
                    - none
                    - weak
                    - average
                    - good
                    - excellent
                    type: string
                rssi:
                    $ref: '#/components/schemas/RssiInfo'
                rssiAverage:
                    $ref: '#/components/schemas/RssiInfo'
                rxInfo:
                    $ref: '#/components/schemas/WirelessBitrateInfo'
                ssid:
                    type: string
                txInfo:
                    $ref: '#/components/schemas/WirelessBitrateInfo'
            type: object
        WirelessNetworkStatus:
            properties:
                ipInfo:
                    $ref: '#/components/schemas/IpV4Info'
                isActive:
                    type: boolean
                networkInfo:
                    $ref: '#/components/schemas/WirelessNetworkInformation'
                status:
                    $ref: '#/components/schemas/NetworkStatusEnum'
            type: object
        WisaOutState:
            properties:
                state:
                    enum:
                    - idle
                    - discovering
                    - deleting
                    type: string
            type: object
        WisaRegisterValue:
            description: Register Value in hexadecimal
            properties:
                register-value-hexadecimal:
                    type: string
            type: object
        WisaSettings:
            properties:
                autoSelectSource:
                    type: boolean
                disabled:
                    type: boolean
            type: object
        WisaStatus:
            properties:
                firmwareVersion:
                    type: string
                localMacAddress:
                    type: string
                state:
                    enum:
                    - disabled
                    - poweroff
                    - pairing
                    - unpairing
                    - reconnect
                    - connected
                    - streaming
                    type: string
            type: object
        WisaTxChannel:
            description: Defines channels used (manual channel selection in RF test)
            properties:
                channelHopEnabled:
                    description: Similar to CLI "dfs dfsover 0|1"
                    type: boolean
                monitoringWifiChannel:
                    description: Similar to CLI "diag chw 1 <channel no>" but using
                        WiFi channel numbers
                    format: int32
                    minimum: 0
                    type: integer
                workingWifiChannel:
                    description: Similar to CLI "diag chw 0 <channel no>" but using
                        WiFi channel numbers
                    format: int32
                    minimum: 0
                    type: integer
            type: object
info:
    contact:
        email: support@bang-olufsen.dk
        name: Bang & Olufsen
        url: https://support.bang-olufsen.com/
    description: |
        # Mozart Open API

        The Mozart API is an auto-generated REST API with async capabilities and WebSocket notification channel for immediate state information.

        On top of the auto-generated API, a helper file, mozart_client.py, has been made that makes the API more pythonic. We recommend using this.

        Another file, mozart_cli.py, has been made for using the Mozart API in a simple CLI program. This has been set as the "entry point" for the API.

        Currently supported by:

        - [BeoLab 28](https://www.bang-olufsen.com/en/dk/speakers/beolab-28)
        - [Beosound Balance](https://www.bang-olufsen.com/en/dk/speakers/beosound-balance)
        - [Beosound Emerge](https://www.bang-olufsen.com/en/dk/speakers/beosound-emerge)
        - [Beosound Level](https://www.bang-olufsen.com/en/dk/speakers/beosound-level)

        ## Installation

        The Mozart Open API can be installed with pip. For more information about required Python version, check the [PyPI page](https://pypi.org/project/mozart-api/).

        Install using pip:

        ```terminal
        pip3 install mozart-api
        ```

        ## API usage

        Create a MozartClient object, listen to all WebSocket notifications, set the volume level, activate a preset and expand the Beolink session to a peer, then finally print Beolink listeners.

        <!--
        type: tab
        title: Synchronous
        -->

        ### Synchronous

        <!-- title: "Synchronous API usage example"
        lineNumbers: true
        -->

        ```python
        from mozart_api.models import VolumeLevel
        from mozart_api.mozart_client import MozartClient


        def all_notifications(notification):
            """Notification handler."""
            print(notification)

        # Setup API and WebSocket listener
        mozart_client = MozartClient(host="192.168.0.1")
        mozart_client.get_all_notifications(all_notifications)

        # Connect to the WebSocket notification channel
        mozart_client.connect_notifications(remote_control=True)

        # Run commands
        mozart_client.set_current_volume_level(volume_level=VolumeLevel(level=50))
        mozart_client.activate_preset(id=2)
        mozart_client.post_beolink_expand(jid="1234.1234567.12345678@products.bang-olufsen.com")

        listeners = mozart_client.get_beolink_listeners()
        print(listeners)
        ```

        <!--
        type: tab
        title: Asynchronous
        -->

        ### Asynchronous

        <!-- title: "Asynchronous API usage example"
        lineNumbers: true
        -->

        ```python
        from mozart_api.models import VolumeLevel
        from mozart_api.mozart_client import MozartClient


        def all_notifications(notification):
            """Notification handler."""
            print(notification)

        # Setup API and WebSocket listener
        mozart_client = MozartClient(host="192.168.0.1")
        mozart_client.get_all_notifications(all_notifications)

        # Connect to the WebSocket notification channel
        mozart_client.connect_notifications(remote_control=True)

        # Run commands
        mozart_client.set_current_volume_level(volume_level=VolumeLevel(level=50), async_req=True)
        mozart_client.activate_preset(id=2, async_req=True)
        mozart_client.post_beolink_expand(jid="1234.1234567.12345678@products.bang-olufsen.com", async_req=True)

        listeners = mozart_client.get_beolink_listeners(async_req=True).get()
        print(listeners)
        ```

        <!-- type: tab-end -->

        Where `192.168.0.1` is a Mozart device's IP-address.

        ## Example CLI program

        The CLI program carries out one command and then exits afterwards. The program needs to do a device-discovery on each command, which in noisy environments could take some time. If speed is important, an IP-address can be used instead.

        Additionally since the CLI uses MDNS for device discovery, port number 5353 needs to be open.

        ### Usage example

        This example shows device discovery and afterwards joining a Beolink session with WebSocket events being printed.

        ![example gif](/docs/discovery_join.gif)

        ### Device discovery

        <!--
        type: tab
        title: Discover
        -->

        #### discover

        Discover Mozart devices on the network.

        ```terminal
        mozart_api discover
        ```

        <!--
        type: tab
        title: Serial number
        -->

        #### serial number

        Ensure that the serial number is reachable on the network.

        ```terminal
        mozart_api 12345678
        ```

        <!-- type: tab-end -->

        ### Options

        <!--
        type: tab
        title: Verbose
        -->

        #### verbose

        Add as option to add verbose output.

        ```terminal
        mozart_api serial_number command command_args -v

        mozart_api serial_number command command_args --verbose
        ```

        <!--
        type: tab
        title: Timeout
        -->

        #### timeout

        Add as option with parameter to modify MDNS discovery timeout.

        Optionally use '-1' to have a user-interrupted device discovery:

        ```terminal
        mozart_api serial_number command command_args -t 20

        mozart_api serial_number command command_args --timeout 20

        mozart_api serial_number command command_args --timeout -1
        ```

        <!--
        type: tab
        title: WebSocket
        -->

        #### websocket

        Add as option to show WebSocket notifications before and after command execution.

        Upon connection the overall state of the device will be immediately transferred.

        ```terminal
        mozart_api serial_number command command_args -w

        mozart_api serial_number command command_args --websocket
        ```

        <!-- type: tab-end -->

        ### Commands

        <!--
        type: tab
        title: Playback
        -->

        #### preset

        Will activate the _preset_ command.

        ```terminal
        mozart_api 12345678 preset 1
        ```

        #### play

        Will activate the _play_ playback command.

        ```terminal
        mozart_api 12345678 play
        ```

        #### pause

        Will activate the _pause_ playback command.

        ```terminal
        mozart_api 12345678 pause
        ```

        #### next

        Will activate the _next_ playback command.

        ```terminal
        mozart_api 12345678 next
        ```

        #### previous

        Will activate the _previous_ playback command.

        ```terminal
        mozart_api 12345678 previous
        ```

        <!--
        type: tab
        title: Volume
        -->

        #### mute

        Will activate the mute command.

        ```terminal
        mozart_api 12345678 mute
        ```

        #### unmute

        Will activate the unmute command.

        ```terminal
        mozart_api 12345678 unmute
        ```

        #### volume

        Will activate the modify volume level command on the device (0-100).

        ```terminal
        mozart_api 12345678 volume 50
        ```

        <!--
        type: tab
        title: Beolink
        -->

        #### join

        Will join a Beolink experience if available or will join a specific Beolink experience if available.

        ```terminal
        mozart_api 12345678 join

        mozart_api 12345678 join 23456789
        ```

        #### allstandby

        Will set all connected Beolink devices to networkStandby.

        ```terminal
        mozart_api 12345678 allstandby
        ```

        <!--
        type: tab
        title: Miscellaneous
        -->

        #### info

        Will print device information.

        ```terminal
        mozart_api 12345678 info
        ```

        <!-- type: tab-end -->
    license:
        name: MIT
        url: https://opensource.org/licenses/MIT
    title: Mozart platform API
    version: 0.2.0
openapi: 3.0.0
paths:
    /api/v1/active-state-trigger/{state}:
        put:
            description: |-
                Use the `put-active-state-trigger` endpoint with one of:
                ```mozart_client
                mozart_client.put_active_state_trigger()
                ```
                ```mozart_api
                mozart_api.put_active_state_trigger()
                ```
                ```scenetrigger_api
                scenetrigger_api.put_active_state_trigger()
                ```
            operationId: put-active-state-trigger
            parameters:
            -   description: Name of
                in: path
                name: state
                required: true
                schema:
                    enum:
                    - active
                    - inactive
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SceneTriggerBaseProperties'
                required: true
            responses:
                '204':
                    description: Successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request
            summary: Add/update active state trigger
            tags:
            - SceneTrigger
            - mozart
    /api/v1/active-state-triggers:
        get:
            description: |-
                Get active state triggers
                This will trigger when this device goes into standby/inactive and streaming/active

                Use the `get-active-state-triggers` endpoint with one of:
                ```mozart_client
                mozart_client.get_active_state_triggers()
                ```
                ```mozart_api
                mozart_api.get_active_state_triggers()
                ```
                ```scenetrigger_api
                scenetrigger_api.get_active_state_triggers()
                ```
            operationId: get-active-state-triggers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ActiveStateTriggerMap'
                    description: All active state triggers
            summary: Get state trigger
            tags:
            - SceneTrigger
            - mozart
    /api/v1/airplay/password:
        delete:
            description: |-
                Use the `delete-airplay-password` endpoint with one of:
                ```mozart_client
                mozart_client.delete_airplay_password()
                ```
                ```mozart_api
                mozart_api.delete_airplay_password()
                ```
                ```airplay_api
                airplay_api.delete_airplay_password()
                ```
            operationId: delete-airplay-password
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The password has been deleted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Unsets the airplay password
            tags:
            - Airplay
            - mozart
        get:
            description: |-
                Use the `get-airplay-password-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_airplay_password_state()
                ```
                ```mozart_api
                mozart_api.get_airplay_password_state()
                ```
                ```airplay_api
                airplay_api.get_airplay_password_state()
                ```
            operationId: get-airplay-password-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AirplayPasswordState'
                    description: If a password has been set on the device
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Returns if a password has been set. Will NOT return the password
            tags:
            - Airplay
            - mozart
        post:
            description: |-
                Use the `post-airplay-password` endpoint with one of:
                ```mozart_client
                mozart_client.post_airplay_password()
                ```
                ```mozart_api
                mozart_api.post_airplay_password()
                ```
                ```airplay_api
                airplay_api.post_airplay_password()
                ```
            operationId: post-airplay-password
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AirplayCredentials'
                            description: The encrypted password
                            required:
                            - password
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The password has successfully been set
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Sets the new airplay password
            tags:
            - Airplay
            - mozart
    /api/v1/alarm:
        post:
            description: |-
                Use the `add-alarm` endpoint with one of:
                ```mozart_client
                mozart_client.add_alarm()
                ```
                ```mozart_api
                mozart_api.add_alarm()
                ```
                ```alarms_api
                alarms_api.add_alarm()
                ```
            operationId: add-alarm
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AlarmInstance'
                description: New alarm instance
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlarmInstance'
                    description: Alarm added successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot add alarm
            summary: Add a configured alarm to the product
            tags:
            - Alarms
            - mozart
    /api/v1/alarm/tone-preview:
        post:
            description: |-
                Use the `post-tone-preview` endpoint with one of:
                ```mozart_client
                mozart_client.post_tone_preview()
                ```
                ```mozart_api
                mozart_api.post_tone_preview()
                ```
                ```alarms_api
                alarms_api.post_tone_preview()
                ```
            operationId: post-tone-preview
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AlarmTonePreviewConfig'
                description: Preview configuration object; tone, volume, duration
                required: true
            responses:
                '202':
                    description: successful request; alarmTone will play shortly
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Tone not found
            summary: Preview an alarm tone on the speaker
            tags:
            - Alarms
            - mozart
    /api/v1/alarm/{id}:
        delete:
            description: |-
                Use the `delete-alarm` endpoint with one of:
                ```mozart_client
                mozart_client.delete_alarm()
                ```
                ```mozart_api
                mozart_api.delete_alarm()
                ```
                ```alarms_api
                alarms_api.delete_alarm()
                ```
            operationId: delete-alarm
            parameters:
            -   description: ID of alarm to delete
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Alarm deleted successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Alarm not found (invalid request)
            summary: Delete an alarm from the product
            tags:
            - Alarms
            - mozart
        get:
            description: |-
                Use the `get-alarm` endpoint with one of:
                ```mozart_client
                mozart_client.get_alarm()
                ```
                ```mozart_api
                mozart_api.get_alarm()
                ```
                ```alarms_api
                alarms_api.get_alarm()
                ```
            operationId: get-alarm
            parameters:
            -   description: ID of the alarm to get
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlarmInstance'
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Alarm with the given ID doesn't exist
            summary: Get a single alarm from the product
            tags:
            - Alarms
            - mozart
        put:
            description: |-
                Use the `edit-alarm` endpoint with one of:
                ```mozart_client
                mozart_client.edit_alarm()
                ```
                ```mozart_api
                mozart_api.edit_alarm()
                ```
                ```alarms_api
                alarms_api.edit_alarm()
                ```
            operationId: edit-alarm
            parameters:
            -   description: ID of the alarm to update
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AlarmInstance'
                description: New alarm instance
                required: true
            responses:
                '202':
                    description: Alarm updated successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't update alarm
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Alarm with the given ID doesn't exist
            summary: Replace an already existing alarm on the product
            tags:
            - Alarms
            - mozart
    /api/v1/alarm/{id}/disable:
        post:
            description: |-
                Use the `disable-alarm` endpoint with one of:
                ```mozart_client
                mozart_client.disable_alarm()
                ```
                ```mozart_api
                mozart_api.disable_alarm()
                ```
                ```alarms_api
                alarms_api.disable_alarm()
                ```
            operationId: disable-alarm
            parameters:
            -   description: ID of the alarm to disable
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Alarm disabled
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't disable the alarm
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Alarm with the given ID doesn't exist
            summary: Disable an existing alarm
            tags:
            - Alarms
            - mozart
    /api/v1/alarm/{id}/enable:
        post:
            description: |-
                Use the `enable-alarm` endpoint with one of:
                ```mozart_client
                mozart_client.enable_alarm()
                ```
                ```mozart_api
                mozart_api.enable_alarm()
                ```
                ```alarms_api
                alarms_api.enable_alarm()
                ```
            operationId: enable-alarm
            parameters:
            -   description: ID of the alarm to enable
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Alarm enabled
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't enable the alarm
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Alarm with the given ID doesn't exist
            summary: Enable an existing alarm
            tags:
            - Alarms
            - mozart
    /api/v1/alarms:
        get:
            description: |-
                Use the `get-all-alarms` endpoint with one of:
                ```mozart_client
                mozart_client.get_all_alarms()
                ```
                ```mozart_api
                mozart_api.get_all_alarms()
                ```
                ```alarms_api
                alarms_api.get_all_alarms()
                ```
            operationId: get-all-alarms
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlarmsList'
                    description: Successful request
            summary: Returns a JSON containing all configured alarms
            tags:
            - Alarms
            - mozart
    /api/v1/alarms/maximum-allowed:
        get:
            description: |-
                Use the `get-maximum-allowed` endpoint with one of:
                ```mozart_client
                mozart_client.get_maximum_allowed()
                ```
                ```mozart_api
                mozart_api.get_maximum_allowed()
                ```
                ```alarms_api
                alarms_api.get_maximum_allowed()
                ```
            operationId: get-maximum-allowed
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NumberOfAllowedAlarms'
                    description: Success
                '400':
                    description: Failed
            summary: Returns the number of alarms the product supports
            tags:
            - Alarms
            - mozart
    /api/v1/alarms/tones-available:
        get:
            description: |-
                Use the `get-available-tones` endpoint with one of:
                ```mozart_client
                mozart_client.get_available_tones()
                ```
                ```mozart_api
                mozart_api.get_available_tones()
                ```
                ```alarms_api
                alarms_api.get_available_tones()
                ```
            operationId: get-available-tones
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AlarmToneList'
                    description: successful request
            summary: Returns the available alarmTones
            tags:
            - Alarms
            - mozart
    /api/v1/battery:
        get:
            description: |-
                Use the `get-battery-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_battery_state()
                ```
                ```public_api
                public_api.get_battery_state()
                ```
                ```mozart_api
                mozart_api.get_battery_state()
                ```
                ```power_api
                power_api.get_battery_state()
                ```
            operationId: get-battery-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatteryState'
                    description: The battery state of the product
            summary: Get battery state of the product
            tags:
            - Power
            - mozart
            - public
    /api/v1/beolink/airplay-allowed:
        get:
            description: |-
                Use the `get-beolink-airplay` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_airplay()
                ```
                ```mozart_api
                mozart_api.get_beolink_airplay()
                ```
                ```beolink_api
                beolink_api.get_beolink_airplay()
                ```
            operationId: get-beolink-airplay
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkAirplayAllowed'
                    description: successful operation
                '400':
                    description: Failed to get airplay allowed
            summary: Get airplay allowed value
            tags:
            - Beolink
            - mozart
        put:
            description: |-
                Use the `set-beolink-airplay` endpoint with one of:
                ```mozart_client
                mozart_client.set_beolink_airplay()
                ```
                ```mozart_api
                mozart_api.set_beolink_airplay()
                ```
                ```beolink_api
                beolink_api.set_beolink_airplay()
                ```
            operationId: set-beolink-airplay
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeolinkAirplayAllowed'
                description: Set if airplay is allowed or not
                required: true
            responses:
                '204':
                    description: successful operation
                '400':
                    description: Failed to post airplay allowed
            summary: Sets airplay allowed
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/allstandby:
        post:
            description: |-
                Use the `post-beolink-allstandby` endpoint with one of:
                ```mozart_client
                mozart_client.post_beolink_allstandby()
                ```
                ```public_api
                public_api.post_beolink_allstandby()
                ```
                ```mozart_api
                mozart_api.post_beolink_allstandby()
                ```
                ```beolink_api
                beolink_api.post_beolink_allstandby()
                ```
            operationId: post-beolink-allstandby
            responses:
                '202':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
            summary: Broadcast an all standby event to turn all beolink devices off
            tags:
            - Beolink
            - mozart
            - public
    /api/v1/beolink/audioleader:
        get:
            description: |-
                Use the `get-beolink-audio-leader` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_audio_leader()
                ```
                ```mozart_api
                mozart_api.get_beolink_audio_leader()
                ```
                ```beolink_api
                beolink_api.get_beolink_audio_leader()
                ```
            operationId: get-beolink-audio-leader
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkLeader'
                                nullable: true
                    description: Success
                '204':
                    description: Success, but no leader
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled
            summary: current audio leader (or null if no leader)
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/available-listeners:
        get:
            description: |-
                Get a list of devices that can be listening to this device active experience

                Use the `get-beolink-available-listeners` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_available_listeners()
                ```
                ```public_api
                public_api.get_beolink_available_listeners()
                ```
                ```mozart_api
                mozart_api.get_beolink_available_listeners()
                ```
                ```beolink_api
                beolink_api.get_beolink_available_listeners()
                ```
            operationId: get-beolink-available-listeners
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/BeolinkAvailableListener'
                                type: array
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
            summary: available listeners
            tags:
            - Beolink
            - mozart
            - public
    /api/v1/beolink/configleader:
        get:
            description: |-
                Use the `get-beolink-config-leader` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_config_leader()
                ```
                ```mozart_api
                mozart_api.get_beolink_config_leader()
                ```
                ```beolink_api
                beolink_api.get_beolink_config_leader()
                ```
            operationId: get-beolink-config-leader
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkLeader'
                    description: Success
                '204':
                    description: Success, but no leader
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled
            summary: current config leader (or null if no leader)
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/enabled:
        get:
            description: |-
                Get whether or not beolink multiroom is enabled on this device
                Use the `get-beolink-enabled` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_enabled()
                ```
                ```mozart_api
                mozart_api.get_beolink_enabled()
                ```
                ```beolink_api
                beolink_api.get_beolink_enabled()
                ```
            operationId: get-beolink-enabled
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkEnabled'
                    description: successful operation
            summary: Get if beolink multiroom is enabled
            tags:
            - Beolink
            - mozart
        put:
            description: |-
                Sets whether or not beolink multiroom is enabled on this device
                Use the `set-beolink-enabled` endpoint with one of:
                ```mozart_client
                mozart_client.set_beolink_enabled()
                ```
                ```mozart_api
                mozart_api.set_beolink_enabled()
                ```
                ```beolink_api
                beolink_api.set_beolink_enabled()
                ```
            operationId: set-beolink-enabled
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeolinkEnabled'
                description: Set if beolink is enabled or not
                required: true
            responses:
                '204':
                    description: successful operation
            summary: enables/disables beolink
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/expand/{jid}:
        parameters:
        -   description: Jabber id of peer to expand the active experience to
            in: path
            name: jid
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkPeerID'
        post:
            description: |-
                Expand the current active experience to another device with jabber id {jid}.

                Use the `post-beolink-expand` endpoint with one of:
                ```mozart_client
                mozart_client.post_beolink_expand()
                ```
                ```public_api
                public_api.post_beolink_expand()
                ```
                ```mozart_api
                mozart_api.post_beolink_expand()
                ```
                ```beolink_api
                beolink_api.post_beolink_expand()
                ```
            operationId: post-beolink-expand
            responses:
                '202':
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to initiate join
                '404':
                    description: Remote device not found
            summary: Expand the current active experience
            tags:
            - Beolink
            - mozart
            - public
    /api/v1/beolink/join:
        post:
            description: |-
                Use the `join-latest-beolink-experience` endpoint with one of:
                ```mozart_client
                mozart_client.join_latest_beolink_experience()
                ```
                ```public_api
                public_api.join_latest_beolink_experience()
                ```
                ```mozart_api
                mozart_api.join_latest_beolink_experience()
                ```
                ```beolink_api
                beolink_api.join_latest_beolink_experience()
                ```
            operationId: join-latest-beolink-experience
            responses:
                '202':
                    $ref: '#/components/responses/BeolinkJoinResponse'
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to initiate join
            summary: Touch to join
            tags:
            - Beolink
            - mozart
            - public
    /api/v1/beolink/join-result/{id}:
        get:
            description: |-
                Returns the result of a join request.

                **WARNING:** This end-point is only for testing purposes. Only a limited
                number of results are kept, so if there are multiple API clients using
                the device at the same time, and you are polling this end-point, you may
                miss the result of your join request.

                Use the `get-beolink-join-result` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_join_result()
                ```
                ```public_api
                public_api.get_beolink_join_result()
                ```
                ```mozart_api
                mozart_api.get_beolink_join_result()
                ```
                ```beolink_api
                beolink_api.get_beolink_join_result()
                ```
            operationId: get-beolink-join-result
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkJoinResult'
                    description: Join result available
                '404':
                    description: Join result unavailable
            summary: Test-endpoint; join result
            tags:
            - Beolink
            - mozart
            - public
        parameters:
        -   description: Join request ID
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkRequestID'
    /api/v1/beolink/join/{jid}:
        parameters:
        -   description: Jabber ID of peer to join
            in: path
            name: jid
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkPeerID'
        -   description: Ask to join a specific source on peer
            in: query
            name: source
            required: false
            schema:
                type: string
        post:
            description: |-
                Join the experience currently active on peer with Jabber ID `jid`.

                Use the `join-beolink-peer` endpoint with one of:
                ```mozart_client
                mozart_client.join_beolink_peer()
                ```
                ```public_api
                public_api.join_beolink_peer()
                ```
                ```mozart_api
                mozart_api.join_beolink_peer()
                ```
                ```beolink_api
                beolink_api.join_beolink_peer()
                ```
            operationId: join-beolink-peer
            responses:
                '202':
                    $ref: '#/components/responses/BeolinkJoinResponse'
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to initiate join
            summary: Join multi-room experience
            tags:
            - Beolink
            - mozart
            - public
    /api/v1/beolink/latency:
        get:
            description: |-
                Use the `get-beolink-latency` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_latency()
                ```
                ```mozart_api
                mozart_api.get_beolink_latency()
                ```
                ```beolink_api
                beolink_api.get_beolink_latency()
                ```
            operationId: get-beolink-latency
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkLatency'
                    description: successful operation
                '400':
                    description: Failed to get latency
            summary: Gets the beolink latency
            tags:
            - Beolink
            - mozart
        put:
            description: |-
                Use the `set-beolink-latency` endpoint with one of:
                ```mozart_client
                mozart_client.set_beolink_latency()
                ```
                ```mozart_api
                mozart_api.set_beolink_latency()
                ```
                ```beolink_api
                beolink_api.set_beolink_latency()
                ```
            operationId: set-beolink-latency
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeolinkLatency'
                description: The desired latency
                required: true
            responses:
                '204':
                    description: successful operation
                '400':
                    description: Failed to post latency
            summary: Sets the beolink latency
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/leave:
        post:
            description: |-
                Use the `post-beolink-leave` endpoint with one of:
                ```mozart_client
                mozart_client.post_beolink_leave()
                ```
                ```public_api
                public_api.post_beolink_leave()
                ```
                ```mozart_api
                mozart_api.post_beolink_leave()
                ```
                ```beolink_api
                beolink_api.post_beolink_leave()
                ```
            operationId: post-beolink-leave
            responses:
                '202':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
                '404':
                    description: No active experience found
            summary: Leave the ongoing experience (disconnect this device from remote)
            tags:
            - Beolink
            - mozart
            - public
    /api/v1/beolink/listeners:
        get:
            description: |-
                Get a list of devices that are listening to this device active experience (that have joined)

                Use the `get-beolink-listeners` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_listeners()
                ```
                ```public_api
                public_api.get_beolink_listeners()
                ```
                ```mozart_api
                mozart_api.get_beolink_listeners()
                ```
                ```beolink_api
                beolink_api.get_beolink_listeners()
                ```
            operationId: get-beolink-listeners
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/BeolinkListener'
                                type: array
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
            summary: Joined peers
            tags:
            - Beolink
            - mozart
            - public
    /api/v1/beolink/peers:
        get:
            description: |-
                Get information about the beolink peers discovered by this device

                Use the `get-beolink-peers` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_peers()
                ```
                ```public_api
                public_api.get_beolink_peers()
                ```
                ```mozart_api
                mozart_api.get_beolink_peers()
                ```
                ```beolink_api
                beolink_api.get_beolink_peers()
                ```
            operationId: get-beolink-peers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/BeolinkPeer'
                                type: array
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
            summary: discovered peers
            tags:
            - Beolink
            - mozart
            - public
    /api/v1/beolink/scan-experiences:
        post:
            description: |-
                Scans for the current available experiences. Check the websockets for the results
                Use the `beolink-scan-current-experiences` endpoint with one of:
                ```mozart_client
                mozart_client.beolink_scan_current_experiences()
                ```
                ```mozart_api
                mozart_api.beolink_scan_current_experiences()
                ```
                ```beolink_api
                beolink_api.beolink_scan_current_experiences()
                ```
            operationId: beolink-scan-current-experiences
            responses:
                '202':
                    $ref: '#/components/responses/BeolinkExperiencesResponse'
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
            summary: current available experiences
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/security-buffer:
        get:
            description: |-
                Get if the security buffer is enabled. May be needed for ASE products to perform
                Use the `get-beolink-security-buffer` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_security_buffer()
                ```
                ```mozart_api
                mozart_api.get_beolink_security_buffer()
                ```
                ```beolink_api
                beolink_api.get_beolink_security_buffer()
                ```
            operationId: get-beolink-security-buffer
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkSecurityBuffer'
                    description: successful operation
            summary: get security buffer
            tags:
            - Beolink
            - mozart
        put:
            description: |-
                Sets whether or not the security buffer is enabled on this device
                Use the `set-beolink-security-buffer` endpoint with one of:
                ```mozart_client
                mozart_client.set_beolink_security_buffer()
                ```
                ```mozart_api
                mozart_api.set_beolink_security_buffer()
                ```
                ```beolink_api
                beolink_api.set_beolink_security_buffer()
                ```
            operationId: set-beolink-security-buffer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BeolinkSecurityBuffer'
                description: Set if beolink security buffer is enabled or not
                required: true
            responses:
                '204':
                    description: successful operation
            summary: Set security buffer
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/self:
        get:
            description: |-
                Returns Beolink information like about this device. This can be useful if you want to expand _to_ this device.

                Use the `get-beolink-self` endpoint with one of:
                ```mozart_client
                mozart_client.get_beolink_self()
                ```
                ```public_api
                public_api.get_beolink_self()
                ```
                ```mozart_api
                mozart_api.get_beolink_self()
                ```
                ```beolink_api
                beolink_api.get_beolink_self()
                ```
            operationId: get-beolink-self
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkPeer'
                    description: successful operation
            summary: Information about this device
            tags:
            - Beolink
            - mozart
            - public
    /api/v1/beolink/unexpand/{jid}:
        parameters:
        -   description: Jabber id of peer to unexpand
            in: path
            name: jid
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkPeerID'
        post:
            description: |-
                Disconnect the device with jabber id {jid} from the current active experience.

                Use the `post-beolink-unexpand` endpoint with one of:
                ```mozart_client
                mozart_client.post_beolink_unexpand()
                ```
                ```public_api
                public_api.post_beolink_unexpand()
                ```
                ```mozart_api
                mozart_api.post_beolink_unexpand()
                ```
                ```beolink_api
                beolink_api.post_beolink_unexpand()
                ```
            operationId: post-beolink-unexpand
            responses:
                '202':
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
                '404':
                    description: Remote device not found
            summary: Unexpand (disconnect) a device from the multiroom session
            tags:
            - Beolink
            - mozart
            - public
    /api/v1/cast/accept-tos:
        post:
            description: |-
                Use the `set-cast-tos-accepted` endpoint with one of:
                ```mozart_client
                mozart_client.set_cast_tos_accepted()
                ```
                ```mozart_api
                mozart_api.set_cast_tos_accepted()
                ```
                ```chromecast_api
                chromecast_api.set_cast_tos_accepted()
                ```
            operationId: set-cast-tos-accepted
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The acceptance was registered
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '406':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: The acceptance could not be registered
            summary: Indicates that the user has accepted the Terms of Service of
                Chromecast/GVA
            tags:
            - Chromecast
            - mozart
    /api/v1/cast/setup-state:
        get:
            description: |-
                Use the `get-cast-setup-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_cast_setup_state()
                ```
                ```mozart_api
                mozart_api.get_cast_setup_state()
                ```
                ```chromecast_api
                chromecast_api.get_cast_setup_state()
                ```
            operationId: get-cast-setup-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CastState'
                    description: Successfully got the cast setup state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the cast setup state
            tags:
            - Chromecast
            - mozart
    /api/v1/cast/tos-accepted:
        get:
            description: |-
                Use the `get-cast-tos-accepted` endpoint with one of:
                ```mozart_client
                mozart_client.get_cast_tos_accepted()
                ```
                ```mozart_api
                mozart_api.get_cast_tos_accepted()
                ```
                ```chromecast_api
                chromecast_api.get_cast_tos_accepted()
                ```
            operationId: get-cast-tos-accepted
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CastTosAcceptanceState'
                    description: Indication of whether the user has accepted the Terms
                        of Service of Chromecast/GVA
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the current Terms-of-Service acceptance state of Chromecast/GVA
            tags:
            - Chromecast
            - mozart
    /api/v1/cast/version:
        get:
            description: |-
                Use the `get-cast-version` endpoint with one of:
                ```mozart_client
                mozart_client.get_cast_version()
                ```
                ```mozart_api
                mozart_api.get_cast_version()
                ```
                ```chromecast_api
                chromecast_api.get_cast_version()
                ```
            operationId: get-cast-version
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CastVersion'
                    description: Current Chromecast version information
                '503':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Version not available
            summary: Get the currently installed Chromecast version
            tags:
            - Chromecast
            - mozart
    /api/v1/content:
        get:
            description: |-
                Use the `get-content` endpoint with one of:
                ```mozart_client
                mozart_client.get_content()
                ```
                ```mozart_api
                mozart_api.get_content()
                ```
                ```content_api
                content_api.get_content()
                ```
            operationId: get-content
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ContentItemMap'
                    description: Successful request
            summary: Returns a list of available content
            tags:
            - Content
            - mozart
        parameters:
        -   description: Filter result that start with x. It could be input source
                "tv", "netradio" or content "tv://TV", "tv://netflix"
            in: query
            name: startWith
            required: false
            schema:
                type: string
    /api/v1/content-trigger/{uri}:
        parameters:
        -   description: The content uri
            in: path
            name: uri
            required: true
            schema:
                type: string
        put:
            description: |-
                Use the `put-modify-content-trigger` endpoint with one of:
                ```mozart_client
                mozart_client.put_modify_content_trigger()
                ```
                ```mozart_api
                mozart_api.put_modify_content_trigger()
                ```
                ```content_api
                content_api.put_modify_content_trigger()
                ```
            operationId: put-modify-content-trigger
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ContentTriggerUserProperties'
                required: true
            responses:
                '204':
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Modify content trigger
            tags:
            - Content
            - mozart
    /api/v1/content-trigger/{uri}/reset:
        parameters:
        -   description: The uri identifying content
            in: path
            name: uri
            required: true
            schema:
                type: string
        post:
            description: |-
                Use the `post-reset-content-trigger` endpoint with one of:
                ```mozart_client
                mozart_client.post_reset_content_trigger()
                ```
                ```mozart_api
                mozart_api.post_reset_content_trigger()
                ```
                ```content_api
                content_api.post_reset_content_trigger()
                ```
            operationId: post-reset-content-trigger
            responses:
                '204':
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Root content trigger not found
            summary: Reset content trigger
            tags:
            - Content
            - mozart
    /api/v1/content-triggers:
        get:
            description: |-
                Use the `get-content-triggers` endpoint with one of:
                ```mozart_client
                mozart_client.get_content_triggers()
                ```
                ```mozart_api
                mozart_api.get_content_triggers()
                ```
                ```content_api
                content_api.get_content_triggers()
                ```
            operationId: get-content-triggers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ContentTriggerMap'
                    description: Current content triggers
            summary: Returns all content triggers.
            tags:
            - Content
            - mozart
        parameters:
        -   description: Filter result that start with x. It could be input source
                "tv", "netradio" or content "tv://TV", "tv://netflix"
            in: query
            name: startWith
            required: false
            schema:
                type: string
    /api/v1/content-triggers/reset:
        post:
            description: |-
                Use the `post-content-triggers-reset` endpoint with one of:
                ```mozart_client
                mozart_client.post_content_triggers_reset()
                ```
                ```mozart_api
                mozart_api.post_content_triggers_reset()
                ```
                ```content_api
                content_api.post_content_triggers_reset()
                ```
            operationId: post-content-triggers-reset
            responses:
                '204':
                    description: Reset all content triggers successful
            summary: Reset all content triggers
            tags:
            - Content
            - mozart
    /api/v1/content/{id}/trigger:
        parameters:
        -   description: ID of the content
            in: path
            name: id
            required: true
            schema:
                type: string
        post:
            description: |-
                Use the `post-content-trigger` endpoint with one of:
                ```mozart_client
                mozart_client.post_content_trigger()
                ```
                ```mozart_api
                mozart_api.post_content_trigger()
                ```
                ```content_api
                content_api.post_content_trigger()
                ```
            operationId: post-content-trigger
            responses:
                '204':
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Content not supported
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Content not found
            summary: Trigger specific content
            tags:
            - Content
            - mozart
    /api/v1/develop/output/client-deactivation:
        get:
            description: |-
                Use the `get-output-client-deactivation` endpoint with one of:
                ```mozart_client
                mozart_client.get_output_client_deactivation()
                ```
                ```mozart_api
                mozart_api.get_output_client_deactivation()
                ```
                ```developer_api
                developer_api.get_output_client_deactivation()
                ```
            operationId: get-output-client-deactivation
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OutputClientDeactivationState'
                    description: The current value of output client deactivation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the current value of client deactivation
            tags:
            - Developer
            - mozart
        post:
            description: |-
                Use the `set-output-client-deactivation` endpoint with one of:
                ```mozart_client
                mozart_client.set_output_client_deactivation()
                ```
                ```mozart_api
                mozart_api.set_output_client_deactivation()
                ```
                ```developer_api
                developer_api.set_output_client_deactivation()
                ```
            operationId: set-output-client-deactivation
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OutputClientDeactivationState'
                description: The desired value of output client deactivation
                required: true
            responses:
                '200':
                    description: Successfully set output client deactivation state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the state of output client deactivation
            tags:
            - Developer
            - mozart
    /api/v1/developer/hdmi/debug-uart:
        post:
            description: |-
                Use the `post-hdmi-debug-uart` endpoint with one of:
                ```mozart_client
                mozart_client.post_hdmi_debug_uart()
                ```
                ```mozart_api
                mozart_api.post_hdmi_debug_uart()
                ```
                ```developer_api
                developer_api.post_hdmi_debug_uart()
                ```
            operationId: post-hdmi-debug-uart
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HdmiDebugUartState'
                description: The desired value of hdmi debug uart
                required: true
            responses:
                '204':
                    description: Successfully set hdmi debug uart
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Enable or disable the low level hdmi debug uart. HDMI audio will
                be disabled when debug uart is enabled.
            tags:
            - Developer
            - mozart
    /api/v1/developer/hdmi/{id}/hot-plug:
        parameters:
        -   description: HDMI id
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/HdmiIdType'
        post:
            description: |-
                Use the `post-hdmi-hot-plug` endpoint with one of:
                ```mozart_client
                mozart_client.post_hdmi_hot_plug()
                ```
                ```mozart_api
                mozart_api.post_hdmi_hot_plug()
                ```
                ```developer_api
                developer_api.post_hdmi_hot_plug()
                ```
            operationId: post-hdmi-hot-plug
            responses:
                '204':
                    description: successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Hdmi input not found
            summary: Perform Hot-Plug toggle
            tags:
            - Developer
            - mozart
    /api/v1/developer/tvsources:
        get:
            description: |-
                Use the `get-available-tv-sources` endpoint with one of:
                ```mozart_client
                mozart_client.get_available_tv_sources()
                ```
                ```developer_api
                developer_api.get_available_tv_sources()
                ```
                ```mozart_api
                mozart_api.get_available_tv_sources()
                ```
            operationId: get-available-tv-sources
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TvSourceArray'
                    description: Returns a list of available TV sources
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Retrieve all the available TV sources.
            tags:
            - mozart
            - Developer
    /api/v1/developer/tvsources/active:
        get:
            description: |-
                Use the `get-active-tv-source` endpoint with one of:
                ```mozart_client
                mozart_client.get_active_tv_source()
                ```
                ```developer_api
                developer_api.get_active_tv_source()
                ```
                ```mozart_api
                mozart_api.get_active_tv_source()
                ```
            operationId: get-active-tv-source
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TvSource'
                    description: Returns the currently active TV source
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Retrieve the currently active TV source, if any
            tags:
            - mozart
            - Developer
    /api/v1/developer/tvsources/active/{sourceId}:
        post:
            description: |-
                Use the `set-active-tv-source` endpoint with one of:
                ```mozart_client
                mozart_client.set_active_tv_source()
                ```
                ```developer_api
                developer_api.set_active_tv_source()
                ```
                ```mozart_api
                mozart_api.set_active_tv_source()
                ```
            operationId: set-active-tv-source
            parameters:
            -   description: the id of the tv source to activate
                in: path
                name: sourceId
                required: true
                schema:
                    type: string
            responses:
                '201':
                    description: Successfully changed the active TV source
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the active TV source
            tags:
            - mozart
            - Developer
    /api/v1/diagnostics/battery:
        get:
            description: |-
                Use the `get-diagnostics-battery` endpoint with one of:
                ```mozart_client
                mozart_client.get_diagnostics_battery()
                ```
                ```mozart_api
                mozart_api.get_diagnostics_battery()
                ```
                ```diagnostics_api
                diagnostics_api.get_diagnostics_battery()
                ```
            operationId: get-diagnostics-battery
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DiagnosticsBatteryValues'
                    description: The current battery status
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: This product has no battery
            summary: Get the battery status of the product
            tags:
            - Diagnostics
            - mozart
    /api/v1/diagnostics/flash:
        get:
            description: |-
                Use the `get-diagnostics-flash` endpoint with one of:
                ```mozart_client
                mozart_client.get_diagnostics_flash()
                ```
                ```mozart_api
                mozart_api.get_diagnostics_flash()
                ```
                ```diagnostics_api
                diagnostics_api.get_diagnostics_flash()
                ```
            operationId: get-diagnostics-flash
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DiagnosticsFlashValues'
                    description: The current flash memory state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the current flash memory state of the product
            tags:
            - Diagnostics
            - mozart
    /api/v1/diagnostics/loglevel:
        put:
            description: |-
                Use the `set-loglevel` endpoint with one of:
                ```mozart_client
                mozart_client.set_loglevel()
                ```
                ```mozart_api
                mozart_api.set_loglevel()
                ```
                ```diagnostics_api
                diagnostics_api.set_loglevel()
                ```
            operationId: set-loglevel
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LogLevelSettings'
                description: the log level settings
                required: true
            responses:
                '201':
                    description: the settings were communicated to the system
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Change the log level for given areas
            tags:
            - Diagnostics
            - mozart
    /api/v1/diagnostics/logupload:
        post:
            description: |-
                Use the `post-logupload` endpoint with one of:
                ```mozart_client
                mozart_client.post_logupload()
                ```
                ```mozart_api
                mozart_api.post_logupload()
                ```
                ```diagnostics_api
                diagnostics_api.post_logupload()
                ```
            operationId: post-logupload
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LogUploadData'
                description: the log upload data
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: log upload started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Push logs to beocloud
            tags:
            - Diagnostics
            - mozart
    /api/v1/diagnostics/ntc:
        get:
            description: |-
                Use the `get-diagnostics-ntc` endpoint with one of:
                ```mozart_client
                mozart_client.get_diagnostics_ntc()
                ```
                ```mozart_api
                mozart_api.get_diagnostics_ntc()
                ```
                ```diagnostics_api
                diagnostics_api.get_diagnostics_ntc()
                ```
            operationId: get-diagnostics-ntc
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DiagnosticsNtcValueArray'
                    description: The NTC values
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get a sample of the current NTC values of the product
            tags:
            - Diagnostics
            - mozart
    /api/v1/diagnostics/wisa-tx:
        get:
            description: |-
                Use the `get-wisa-tx-diagnostics` endpoint with one of:
                ```mozart_client
                mozart_client.get_wisa_tx_diagnostics()
                ```
                ```mozart_api
                mozart_api.get_wisa_tx_diagnostics()
                ```
                ```diagnostics_api
                diagnostics_api.get_wisa_tx_diagnostics()
                ```
            operationId: get-wisa-tx-diagnostics
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DiagnosticsWisaTx'
                    description: The diagnostics data is returned
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Could not get WiSA diagnostics
            summary: Get WiSA TX channel diagnostics
            tags:
            - Diagnostics
            - mozart
    /api/v1/hdmi:
        get:
            description: |-
                Use the `get-hdmi-all` endpoint with one of:
                ```mozart_client
                mozart_client.get_hdmi_all()
                ```
                ```mozart_api
                mozart_api.get_hdmi_all()
                ```
                ```hdmi_api
                hdmi_api.get_hdmi_all()
                ```
            operationId: get-hdmi-all
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HdmiInputSettingsList'
                    description: all available hdmi inputs
            summary: Get all hdmi inputs
            tags:
            - Hdmi
            - mozart
    /api/v1/hdmi/active-input:
        get:
            description: |-
                Use the `get-hdmi-active-input` endpoint with one of:
                ```mozart_client
                mozart_client.get_hdmi_active_input()
                ```
                ```mozart_api
                mozart_api.get_hdmi_active_input()
                ```
                ```hdmi_api
                hdmi_api.get_hdmi_active_input()
                ```
            operationId: get-hdmi-active-input
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HdmiInput'
                    description: active input returned
            summary: Get the current active input
            tags:
            - Hdmi
            - mozart
    /api/v1/hdmi/fast-switch:
        get:
            description: |-
                Use the `get-hdmi-fast-switch` endpoint with one of:
                ```mozart_client
                mozart_client.get_hdmi_fast_switch()
                ```
                ```mozart_api
                mozart_api.get_hdmi_fast_switch()
                ```
                ```hdmi_api
                hdmi_api.get_hdmi_fast_switch()
                ```
            operationId: get-hdmi-fast-switch
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/FastSwitchSetting'
                    description: the HDMI fast-switch setting returned
            summary: Get HDMI fast-switch setting
            tags:
            - Hdmi
            - mozart
        put:
            description: |-
                Use the `set-hdmi-fast-switch` endpoint with one of:
                ```mozart_client
                mozart_client.set_hdmi_fast_switch()
                ```
                ```mozart_api
                mozart_api.set_hdmi_fast_switch()
                ```
                ```hdmi_api
                hdmi_api.set_hdmi_fast_switch()
                ```
            operationId: set-hdmi-fast-switch
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/FastSwitchSetting'
                description: the desired HDMI fast-switch value
                required: true
            responses:
                '204':
                    description: the HDMI fast-switch setting was accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set HDMI fast-switch setting
            tags:
            - Hdmi
            - mozart
    /api/v1/hdmi/reset:
        post:
            description: |-
                Use the `post-hdmi-reset-all` endpoint with one of:
                ```mozart_client
                mozart_client.post_hdmi_reset_all()
                ```
                ```mozart_api
                mozart_api.post_hdmi_reset_all()
                ```
                ```hdmi_api
                hdmi_api.post_hdmi_reset_all()
                ```
            operationId: post-hdmi-reset-all
            responses:
                '204':
                    description: successful request
            summary: Reset all hdmi input settings
            tags:
            - Hdmi
            - mozart
    /api/v1/hdmi/video-format:
        get:
            description: |-
                Use the `get-hdmi-video-format` endpoint with one of:
                ```mozart_client
                mozart_client.get_hdmi_video_format()
                ```
                ```mozart_api
                mozart_api.get_hdmi_video_format()
                ```
                ```hdmi_api
                hdmi_api.get_hdmi_video_format()
                ```
            operationId: get-hdmi-video-format
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HdmiVideoFormat'
                    description: video format returned
            summary: Get the video format of the active input
            tags:
            - Hdmi
            - mozart
    /api/v1/hdmi/{id}:
        parameters:
        -   description: Hdmi id
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/HdmiIdType'
        put:
            description: |-
                Use the `put-hdmi-settings` endpoint with one of:
                ```mozart_client
                mozart_client.put_hdmi_settings()
                ```
                ```mozart_api
                mozart_api.put_hdmi_settings()
                ```
                ```hdmi_api
                hdmi_api.put_hdmi_settings()
                ```
            operationId: put-hdmi-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HdmiSettings'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HdmiInputSettings'
                    description: the updated hdmi input
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid hdmi settings
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Hdmi input not found
            summary: Set settings for hdmi input
            tags:
            - Hdmi
            - mozart
    /api/v1/hdmi/{id}/reset:
        parameters:
        -   description: HDMI id
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/HdmiIdType'
        post:
            description: |-
                Use the `post-hdmi-reset` endpoint with one of:
                ```mozart_client
                mozart_client.post_hdmi_reset()
                ```
                ```mozart_api
                mozart_api.post_hdmi_reset()
                ```
                ```hdmi_api
                hdmi_api.post_hdmi_reset()
                ```
            operationId: post-hdmi-reset
            responses:
                '204':
                    description: successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Hdmi input not found
            summary: Reset hdmi input settings
            tags:
            - Hdmi
            - mozart
    /api/v1/lightsensor/settings:
        get:
            description: |-
                Use the `get-lightsensor-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_lightsensor_settings()
                ```
                ```mozart_api
                mozart_api.get_lightsensor_settings()
                ```
                ```settings_api
                settings_api.get_lightsensor_settings()
                ```
            operationId: get-lightsensor-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LightSensorSettings'
                    description: the light sensor settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current light sensor settings
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-lightsensor-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_lightsensor_settings()
                ```
                ```mozart_api
                mozart_api.set_lightsensor_settings()
                ```
                ```settings_api
                settings_api.set_lightsensor_settings()
                ```
            operationId: set-lightsensor-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LightSensorSettings'
                description: the light sensor settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LightSensorSettings'
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: sets the current light sensor settings
            tags:
            - Settings
            - mozart
    /api/v1/network:
        get:
            description: |-
                Use the `get-network-status` endpoint with one of:
                ```mozart_client
                mozart_client.get_network_status()
                ```
                ```mozart_api
                mozart_api.get_network_status()
                ```
                ```networking_api
                networking_api.get_network_status()
                ```
            operationId: get-network-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NetworkStatus'
                    description: retrieves the currently active network status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: gets the current overall network status
            tags:
            - Networking
            - mozart
    /api/v1/network/wired:
        get:
            description: |-
                Use the `get-wired-network-status` endpoint with one of:
                ```mozart_client
                mozart_client.get_wired_network_status()
                ```
                ```mozart_api
                mozart_api.get_wired_network_status()
                ```
                ```networking_api
                networking_api.get_wired_network_status()
                ```
            operationId: get-wired-network-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WiredNetworkStatus'
                    description: the wired network status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: gets the current wired network status
            tags:
            - Networking
            - mozart
    /api/v1/network/wired/config:
        post:
            description: |-
                Use the `post-wired-network-config` endpoint with one of:
                ```mozart_client
                mozart_client.post_wired_network_config()
                ```
                ```mozart_api
                mozart_api.post_wired_network_config()
                ```
                ```networking_api
                networking_api.post_wired_network_config()
                ```
            operationId: post-wired-network-config
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WiredConfig'
                            description: The configuration for the wireless device
                            required:
                            - method
                            - staticConfig
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: the wired configuration has been set
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Sets the device configuration for the wired service
            tags:
            - Networking
            - mozart
    /api/v1/network/wireless:
        get:
            description: |-
                Use the `get-wireless-network-status` endpoint with one of:
                ```mozart_client
                mozart_client.get_wireless_network_status()
                ```
                ```mozart_api
                mozart_api.get_wireless_network_status()
                ```
                ```networking_api
                networking_api.get_wireless_network_status()
                ```
            operationId: get-wireless-network-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WirelessNetworkStatus'
                    description: the wireless network status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: gets the current wireless network status
            tags:
            - Networking
            - mozart
    /api/v1/network/wireless/config:
        post:
            description: |-
                Use the `post-wireless-network-config` endpoint with one of:
                ```mozart_client
                mozart_client.post_wireless_network_config()
                ```
                ```mozart_api
                mozart_api.post_wireless_network_config()
                ```
                ```networking_api
                networking_api.post_wireless_network_config()
                ```
            operationId: post-wireless-network-config
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WirelessConfig'
                            description: The configuration for the wireless device
                            required:
                            - ssid
                            - method
                            - staticConfig
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: the wireless configuration has been set
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Sets the device configuration for the wireless service
            tags:
            - Networking
            - mozart
    /api/v1/network/wireless/{ssid}:
        delete:
            description: |-
                Use the `post-wireless-network-forget` endpoint with one of:
                ```mozart_client
                mozart_client.post_wireless_network_forget()
                ```
                ```mozart_api
                mozart_api.post_wireless_network_forget()
                ```
                ```networking_api
                networking_api.post_wireless_network_forget()
                ```
            operationId: post-wireless-network-forget
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: the wireless network has been forgotten
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '500':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: request failed
            summary: Forgets configuration for a wireless network
            tags:
            - Networking
            - mozart
        parameters:
        -   description: Wireless network SSID
            in: path
            name: ssid
            required: true
            schema:
                type: string
    /api/v1/output/latency:
        get:
            description: |-
                Use the `get-output-latency` endpoint with one of:
                ```mozart_client
                mozart_client.get_output_latency()
                ```
                ```mozart_api
                mozart_api.get_output_latency()
                ```
                ```output_api
                output_api.get_output_latency()
                ```
            operationId: get-output-latency
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LatencyRangeVal'
                    description: The current system latency
            summary: Get the current latency
            tags:
            - Output
            - mozart
        post:
            description: |-
                Use the `post-output-latency` endpoint with one of:
                ```mozart_client
                mozart_client.post_output_latency()
                ```
                ```mozart_api
                mozart_api.post_output_latency()
                ```
                ```output_api
                output_api.post_output_latency()
                ```
            operationId: post-output-latency
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Latency'
                description: The desired latency. Setting to zero resets the latency.
                required: true
            responses:
                '200':
                    description: Successfully set the system latency
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the current latency
            tags:
            - Output
            - mozart
    /api/v1/output/speakers:
        delete:
            description: |-
                Delete multiple speakers (async)
                See also: get-wisa-state or WebSocketEventWisaOutState when deleting a wisa speaker

                Use the `delete-multiple-speakers` endpoint with one of:
                ```mozart_client
                mozart_client.delete_multiple_speakers()
                ```
                ```mozart_api
                mozart_api.delete_multiple_speakers()
                ```
                ```output_api
                output_api.delete_multiple_speakers()
                ```
            operationId: delete-multiple-speakers
            requestBody:
                content:
                    application/json:
                        schema:
                            items:
                                $ref: '#/components/schemas/SpeakerId'
                            type: array
            responses:
                '202':
                    description: Successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: One or more Speakers are not deleteable; none were
                        deleted
                '404':
                    $ref: '#/components/responses/NotFound'
            summary: delete multiple speakers
            tags:
            - Output
            - mozart
        get:
            description: |-
                Use the `get-speakers` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakers()
                ```
                ```mozart_api
                mozart_api.get_speakers()
                ```
                ```output_api
                output_api.get_speakers()
                ```
            operationId: get-speakers
            parameters:
            -   description: Show all outputs. Used for getting internal speakers
                    and setting up PowerLink speakers without sense.
                in: query
                name: show-all
                required: false
                schema:
                    type: boolean
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerArray'
                    description: Array of discovered speakers
            summary: Get list of discovered speakers
            tags:
            - Output
            - mozart
    /api/v1/output/speakers/forced-on:
        post:
            description: |-
                When identifying speakers, it is desirable to be able to quickly switch
                between speakers. Since the amplifiers can take a bit of time to power
                on, you may want to power everything on prematurely so that all the
                outputs are ready to produce sound.

                **Note:** this mode has a 20 second timeout, so you have to request the
                mode periodically to keep the outputs on.

                Use the `force-outputs-on` endpoint with one of:
                ```mozart_client
                mozart_client.force_outputs_on()
                ```
                ```mozart_api
                mozart_api.force_outputs_on()
                ```
                ```output_api
                output_api.force_outputs_on()
                ```
            operationId: force-outputs-on
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RequiredEnable'
                required: true
            responses:
                '204':
                    $ref: '#/components/responses/EmptySuccess'
            summary: Forces all outputs on
            tags:
            - Output
            - mozart
    /api/v1/output/speakers/localisation-mode:
        post:
            deprecated: true
            description: |-
                / Enable/disable localisation-mode. Localisation-mode will mute all inputs and activate all outputs. Useful for eg. localisation noise. This mode has a 20 second timeout. You need to set the mode to true within this window to keep it going.
                Use the `post-localisation-mode` endpoint with one of:
                ```mozart_client
                mozart_client.post_localisation_mode()
                ```
                ```mozart_api
                mozart_api.post_localisation_mode()
                ```
                ```output_api
                output_api.post_localisation_mode()
                ```
            operationId: post-localisation-mode
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LocalisationMode'
                description: If localisation-mode should be enabled.
                required: true
            responses:
                '200':
                    description: Successfully set localisation-mode.
            summary: Enable/disable localization mode (deprecated)
            tags:
            - Output
            - mozart
    /api/v1/output/speakers/wisa/discover:
        post:
            description: |-
                Request discovery of speakers (async)
                See also: get-wisa-state or WebSocketEventWisaOutState

                Use the `post-wisa-discovery` endpoint with one of:
                ```mozart_client
                mozart_client.post_wisa_discovery()
                ```
                ```mozart_api
                mozart_api.post_wisa_discovery()
                ```
                ```output_api
                output_api.post_wisa_discovery()
                ```
            operationId: post-wisa-discovery
            responses:
                '204':
                    description: Discovery started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Discovery failed
            summary: start wisa discovery
            tags:
            - Output
            - mozart
    /api/v1/output/speakers/wisa/state:
        get:
            description: |-
                Use the `get-wisa-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_wisa_state()
                ```
                ```mozart_api
                mozart_api.get_wisa_state()
                ```
                ```output_api
                output_api.get_wisa_state()
                ```
            operationId: get-wisa-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WisaOutState'
                    description: The state is returned
            summary: Get the state of any async wisa command
            tags:
            - Output
            - mozart
    /api/v1/output/speakers/{id}:
        delete:
            description: |-
                Delete speaker `{id}`. For WISA speakers, see `/api/v1/output/speakers/wisa/state`
                and the `WebSocketEventWisaOutState` event.

                Use the `delete-speaker` endpoint with one of:
                ```mozart_client
                mozart_client.delete_speaker()
                ```
                ```mozart_api
                mozart_api.delete_speaker()
                ```
                ```output_api
                output_api.delete_speaker()
                ```
            operationId: delete-speaker
            parameters:
            -   $ref: '#/components/parameters/SpeakerId'
            responses:
                '204':
                    $ref: '#/components/responses/EmptySuccess'
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Speaker is not deleteable
                '404':
                    $ref: '#/components/responses/NotFound'
            summary: Remove speaker configuration
            tags:
            - Output
            - mozart
        get:
            description: |-
                Returns configuration for speaker `{id}`.
                Use the `get-speaker` endpoint with one of:
                ```mozart_client
                mozart_client.get_speaker()
                ```
                ```mozart_api
                mozart_api.get_speaker()
                ```
                ```output_api
                output_api.get_speaker()
                ```
            operationId: get-speaker
            parameters:
            -   $ref: '#/components/parameters/SpeakerId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Speaker'
                    description: Speaker with given id
                '404':
                    $ref: '#/components/responses/NotFound'
            summary: Get speaker configuration
            tags:
            - Output
            - mozart
        put:
            description: |-
                Modify configuration for speaker `{id}`
                Use the `modify-speaker` endpoint with one of:
                ```mozart_client
                mozart_client.modify_speaker()
                ```
                ```mozart_api
                mozart_api.modify_speaker()
                ```
                ```output_api
                output_api.modify_speaker()
                ```
            operationId: modify-speaker
            parameters:
            -   $ref: '#/components/parameters/SpeakerId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Speaker'
                description: The desired speaker model
                required: true
            responses:
                '204':
                    $ref: '#/components/responses/EmptySuccess'
                '404':
                    $ref: '#/components/responses/NotFound'
            summary: Modify speaker configuration
            tags:
            - Output
            - mozart
    /api/v1/output/speakers/{id}/calibration-noise:
        post:
            description: |-
                Enables/disables calibration noise for speaker `id`. Only one speaker
                can be enabled at once, so if another speaker is already producing
                calibration noise or being identified, that speaker will go silent
                automatically.

                Use the `play-calibration-noise` endpoint with one of:
                ```mozart_client
                mozart_client.play_calibration_noise()
                ```
                ```mozart_api
                mozart_api.play_calibration_noise()
                ```
                ```output_api
                output_api.play_calibration_noise()
                ```
            operationId: play-calibration-noise
            parameters:
            -   $ref: '#/components/parameters/SpeakerId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RequiredEnable'
                required: true
            responses:
                '204':
                    $ref: '#/components/responses/EmptySuccess'
                '404':
                    $ref: '#/components/responses/NotFound'
            summary: Play calibration noise
            tags:
            - Output
            - mozart
    /api/v1/output/speakers/{id}/identification-sound:
        post:
            description: |-
                Plays an identification sound for speaker `id`. Only one speaker
                can be enabled at once, so if another speaker is already producing
                calibration noise or being identified, that speaker will go silent
                automatically.

                Use the `play-identification-sound` endpoint with one of:
                ```mozart_client
                mozart_client.play_identification_sound()
                ```
                ```mozart_api
                mozart_api.play_identification_sound()
                ```
                ```output_api
                output_api.play_identification_sound()
                ```
            operationId: play-identification-sound
            parameters:
            -   $ref: '#/components/parameters/SpeakerId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IdentificationSound'
                required: true
            responses:
                '204':
                    $ref: '#/components/responses/EmptySuccess'
                '404':
                    $ref: '#/components/responses/NotFound'
            summary: Play identification sound
            tags:
            - Output
            - mozart
    /api/v1/output/speakers/{id}/localisation-noise:
        post:
            deprecated: true
            description: |-
                / Enable/disable localisation noise for speaker with given id. Only one speaker can be enabled at once. If enabling for a speaker while another is enabled then the former will be disabled.
                Use the `post-localisation-noise` endpoint with one of:
                ```mozart_client
                mozart_client.post_localisation_noise()
                ```
                ```mozart_api
                mozart_api.post_localisation_noise()
                ```
                ```output_api
                output_api.post_localisation_noise()
                ```
            operationId: post-localisation-noise
            parameters:
            -   $ref: '#/components/parameters/SpeakerId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LocalisationNoise'
                description: If the localisation noise should be enabled.
                required: true
            responses:
                '200':
                    description: Successfully set localisation noise of given speaker.
                '404':
                    $ref: '#/components/responses/NotFound'
            summary: Enable/disable localization noise (deprecated)
            tags:
            - Output
            - mozart
    /api/v1/output/supported-speakers:
        get:
            description: |-
                Use the `get-supported-speakers` endpoint with one of:
                ```mozart_client
                mozart_client.get_supported_speakers()
                ```
                ```mozart_api
                mozart_api.get_supported_speakers()
                ```
                ```output_api
                output_api.get_supported_speakers()
                ```
            operationId: get-supported-speakers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerTypes'
                    description: An array with all supported speaker types
            summary: Get the supported speaker types
            tags:
            - Output
            - mozart
    /api/v1/overlay/play:
        post:
            description: |-
                Play some audio as an overlay. This will duck currently playing music while the audio is playing

                Use the `post-overlay-play` endpoint with one of:
                ```mozart_client
                mozart_client.post_overlay_play()
                ```
                ```mozart_api
                mozart_api.post_overlay_play()
                ```
                ```overlay_api
                overlay_api.post_overlay_play()
                ```
            operationId: post-overlay-play
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OverlayPlayRequest'
                description: settings to use for the overlay
                required: true
            responses:
                '202':
                    description: successful request; will attempt to play overlay
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request
            summary: Play overlay
            tags:
            - Overlay
            - mozart
    /api/v1/playback/art/{source}/{id}/{size}:
        get:
            description: |-
                Use the `get-local-image` endpoint with one of:
                ```mozart_client
                mozart_client.get_local_image()
                ```
                ```mozart_api
                mozart_api.get_local_image()
                ```
                ```playback_api
                playback_api.get_local_image()
                ```
            operationId: get-local-image
            parameters:
            -   description: The source to get the art for
                in: path
                name: source
                required: true
                schema:
                    type: string
            -   description: The id for the specific track
                in: path
                name: id
                required: true
                schema:
                    type: integer
            -   description: The size of the requested image
                in: path
                name: size
                required: true
                schema:
                    enum:
                    - small
                    - medium
                    - large
                    type: string
            responses:
                '200':
                    content:
                        image/*:
                            schema:
                                format: binary
                                type: string
                    description: The art image requested
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Gets the art for the specified track
            tags:
            - Playback
            - mozart
    /api/v1/playback/command/{command}:
        post:
            description: |-
                Use the `post-playback-command` endpoint with one of:
                ```mozart_client
                mozart_client.post_playback_command()
                ```
                ```public_api
                public_api.post_playback_command()
                ```
                ```mozart_api
                mozart_api.post_playback_command()
                ```
                ```playback_api
                playback_api.post_playback_command()
                ```
            operationId: post-playback-command
            parameters:
            -   description: the named command to execute
                in: path
                name: command
                required: true
                schema:
                    enum:
                    - play
                    - pause
                    - stop
                    - skip
                    - prev
                    type: string
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Sends a specific playback command to the product.
            tags:
            - Playback
            - mozart
            - public
    /api/v1/playback/deezer/flow:
        post:
            description: |-
                Use the `start-deezer-flow` endpoint with one of:
                ```mozart_client
                mozart_client.start_deezer_flow()
                ```
                ```public_api
                public_api.start_deezer_flow()
                ```
                ```mozart_api
                mozart_api.start_deezer_flow()
                ```
                ```playback_api
                playback_api.start_deezer_flow()
                ```
                ```deezer_api
                deezer_api.start_deezer_flow()
                ```
            operationId: start-deezer-flow
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserFlow'
                description: Select user
            responses:
                '201':
                    description: successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Play users flow if no provided user id it will play the flow
                connected to the active account
            tags:
            - Deezer
            - Playback
            - mozart
            - public
    /api/v1/playback/deezer/has-token:
        get:
            description: |-
                Use the `get-deezer-has-token` endpoint with one of:
                ```mozart_client
                mozart_client.get_deezer_has_token()
                ```
                ```mozart_api
                mozart_api.get_deezer_has_token()
                ```
                ```playback_api
                playback_api.get_deezer_has_token()
                ```
            operationId: get-deezer-has-token
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HasToken'
                    description: successful operation
            summary: Get if a deezer access token is set or not
            tags:
            - Playback
            - mozart
    /api/v1/playback/multiroom/settings:
        get:
            description: |-
                Use the `get-playback-multiroom-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_playback_multiroom_settings()
                ```
                ```mozart_api
                mozart_api.get_playback_multiroom_settings()
                ```
                ```playback_api
                playback_api.get_playback_multiroom_settings()
                ```
            operationId: get-playback-multiroom-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MultiroomSettings'
                    description: returns the multiroom settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: |
                Get current configured Multiroom settings
            tags:
            - Playback
            - mozart
        put:
            description: |-
                Set the given multiroom settings. Restart is required when updating multiroom provider.

                Use the `set-playback-multiroom-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_playback_multiroom_settings()
                ```
                ```mozart_api
                mozart_api.set_playback_multiroom_settings()
                ```
                ```playback_api
                playback_api.set_playback_multiroom_settings()
                ```
            operationId: set-playback-multiroom-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MultiroomSettings'
                description: The settings to apply
                required: true
            responses:
                '201':
                    description: multiroom settings accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set multiroom setting
            tags:
            - Playback
            - mozart
    /api/v1/playback/netradio-station/{stationId}:
        put:
            description: |-
                Use the `set-netradio-station` endpoint with one of:
                ```mozart_client
                mozart_client.set_netradio_station()
                ```
                ```mozart_api
                mozart_api.set_netradio_station()
                ```
                ```playback_api
                playback_api.set_netradio_station()
                ```
            operationId: set-netradio-station
            parameters:
            -   description: The unique netradio station to play
                in: path
                name: stationId
                required: true
                schema:
                    type: string
            responses:
                '201':
                    description: The station successfully selected
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Plays the selected netradio station
            tags:
            - Playback
            - mozart
    /api/v1/playback/preset/{id}/store:
        parameters:
        -   description: the id of the preset you want to store
            in: path
            name: id
            required: true
            schema:
                type: integer
        post:
            description: |-
                Use the `store-preset` endpoint with one of:
                ```mozart_client
                mozart_client.store_preset()
                ```
                ```mozart_api
                mozart_api.store_preset()
                ```
                ```playback_api
                playback_api.store_preset()
                ```
            operationId: store-preset
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '412':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Pre-condition not met
            summary: Store a new preset
            tags:
            - Playback
            - mozart
        put:
            description: |-
                Use the `store-scene-on-preset` endpoint with one of:
                ```mozart_client
                mozart_client.store_scene_on_preset()
                ```
                ```mozart_api
                mozart_api.store_scene_on_preset()
                ```
                ```playback_api
                playback_api.store_scene_on_preset()
                ```
            operationId: store-scene-on-preset
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PresetProperties'
                description: the scene you want to store on preset
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Store a scene on preset
            tags:
            - Playback
            - mozart
    /api/v1/playback/preset/{id}/trigger:
        post:
            description: |-
                Use the `activate-preset` endpoint with one of:
                ```mozart_client
                mozart_client.activate_preset()
                ```
                ```public_api
                public_api.activate_preset()
                ```
                ```mozart_api
                mozart_api.activate_preset()
                ```
                ```playback_api
                playback_api.activate_preset()
                ```
            operationId: activate-preset
            parameters:
            -   description: the id of the preset you want to trigger
                in: path
                name: id
                required: true
                schema:
                    type: integer
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '412':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Pre-condition not met
            summary: Activates a preset
            tags:
            - Playback
            - mozart
            - public
    /api/v1/playback/queue:
        get:
            description: |-
                Use the `get-pq-items` endpoint with one of:
                ```mozart_client
                mozart_client.get_pq_items()
                ```
                ```mozart_api
                mozart_api.get_pq_items()
                ```
                ```playback_api
                playback_api.get_pq_items()
                ```
            operationId: get-pq-items
            parameters:
            -   description: get queue after specified queue id
                in: query
                name: after_id
                required: false
                schema:
                    $ref: '#/components/schemas/PlayQueueIdType'
            -   description: get count number of items. Default value is 20. Minimum
                    value is 1 and maximum is 1000
                in: query
                name: count
                required: false
                schema:
                    format: int32
                    maximum: 1000
                    minimum: 1
                    type: integer
            -   description: set to true if all metadata is wanted. When false or
                    not specified only id, type and uri/trackId is returned
                in: query
                name: details
                required: false
                schema:
                    type: boolean
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PlayQueueItemArray'
                    description: Returns a list of items in the playqueue
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get playqueue items
            tags:
            - Playback
            - mozart
        post:
            description: |-
                Use the `add-to-queue` endpoint with one of:
                ```mozart_client
                mozart_client.add_to_queue()
                ```
                ```public_api
                public_api.add_to_queue()
                ```
                ```mozart_api
                mozart_api.add_to_queue()
                ```
                ```playback_api
                playback_api.add_to_queue()
                ```
            operationId: add-to-queue
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlayQueueItem'
                description: the queue element you want to add
                required: true
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Add an element to the queue
            tags:
            - Playback
            - mozart
            - public
    /api/v1/playback/queue/clear:
        post:
            description: |-
                Use the `post-clear-queue` endpoint with one of:
                ```mozart_client
                mozart_client.post_clear_queue()
                ```
                ```public_api
                public_api.post_clear_queue()
                ```
                ```mozart_api
                mozart_api.post_clear_queue()
                ```
                ```playback_api
                playback_api.post_clear_queue()
                ```
            operationId: post-clear-queue
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Clear the queue
            tags:
            - Playback
            - mozart
            - public
    /api/v1/playback/queue/count:
        get:
            description: |-
                Use the `get-count-queue` endpoint with one of:
                ```mozart_client
                mozart_client.get_count_queue()
                ```
                ```mozart_api
                mozart_api.get_count_queue()
                ```
                ```playback_api
                playback_api.get_count_queue()
                ```
            operationId: get-count-queue
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                properties:
                                    count:
                                        format: int32
                                        type: integer
                                type: object
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get size of queue
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/move:
        post:
            description: |-
                Use the `move-item-queue` endpoint with one of:
                ```mozart_client
                mozart_client.move_item_queue()
                ```
                ```mozart_api
                mozart_api.move_item_queue()
                ```
                ```playback_api
                playback_api.move_item_queue()
                ```
            operationId: move-item-queue
            parameters:
            -   description: id of the queue item
                in: query
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/PlayQueueIdType'
            -   description: index where to move the queue item
                in: query
                name: index
                required: true
                schema:
                    format: int32
                    type: integer
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: move queue item to index
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/settings:
        get:
            description: |-
                Use the `get-settings-queue` endpoint with one of:
                ```mozart_client
                mozart_client.get_settings_queue()
                ```
                ```public_api
                public_api.get_settings_queue()
                ```
                ```mozart_api
                mozart_api.get_settings_queue()
                ```
                ```playback_api
                playback_api.get_settings_queue()
                ```
            operationId: get-settings-queue
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PlayQueueSettings'
                                type: object
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current queue settings
            tags:
            - Playback
            - mozart
            - public
        put:
            description: |-
                Use the `set-settings-queue` endpoint with one of:
                ```mozart_client
                mozart_client.set_settings_queue()
                ```
                ```public_api
                public_api.set_settings_queue()
                ```
                ```mozart_api
                mozart_api.set_settings_queue()
                ```
                ```playback_api
                playback_api.set_settings_queue()
                ```
            operationId: set-settings-queue
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlayQueueSettings'
                description: the desired settings
                required: true
            responses:
                '204':
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set queue settings
            tags:
            - Playback
            - mozart
            - public
    /api/v1/playback/queue/start:
        post:
            description: |-
                Use the `post-start-queue` endpoint with one of:
                ```mozart_client
                mozart_client.post_start_queue()
                ```
                ```mozart_api
                mozart_api.post_start_queue()
                ```
                ```playback_api
                playback_api.post_start_queue()
                ```
            operationId: post-start-queue
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlayQueueId'
                description: the queue element you want to start playback from
                required: false
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Starts playback of the queue (at a given position)
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/{id}:
        delete:
            description: |-
                Use the `remove-pq-element` endpoint with one of:
                ```mozart_client
                mozart_client.remove_pq_element()
                ```
                ```mozart_api
                mozart_api.remove_pq_element()
                ```
                ```playback_api
                playback_api.remove_pq_element()
                ```
            operationId: remove-pq-element
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Remove queue element with id
            tags:
            - Playback
            - mozart
        parameters:
        -   description: the queue id of the element you want to remove
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/PlayQueueIdType'
    /api/v1/playback/seek:
        put:
            description: |-
                Use the `seek-to-position` endpoint with one of:
                ```mozart_client
                mozart_client.seek_to_position()
                ```
                ```public_api
                public_api.seek_to_position()
                ```
                ```mozart_api
                mozart_api.seek_to_position()
                ```
                ```playback_api
                playback_api.seek_to_position()
                ```
            operationId: seek-to-position
            parameters:
            -   description: position in milliseconds
                in: query
                name: position_ms
                required: true
                schema:
                    format: int32
                    type: integer
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: seek to position in stream
            tags:
            - Playback
            - mozart
            - public
    /api/v1/playback/sources:
        get:
            description: |-
                Use the `get-available-sources` endpoint with one of:
                ```mozart_client
                mozart_client.get_available_sources()
                ```
                ```public_api
                public_api.get_available_sources()
                ```
                ```mozart_api
                mozart_api.get_available_sources()
                ```
                ```playback_api
                playback_api.get_available_sources()
                ```
            operationId: get-available-sources
            parameters:
            -   description: filter sources for remote control
                in: query
                name: target-remote
                required: false
                schema:
                    type: boolean
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SourceArray'
                    description: Returns a list of available sources
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Retrieve all the available sources.
            tags:
            - Playback
            - mozart
            - public
    /api/v1/playback/sources/active:
        get:
            description: |-
                Use the `get-active-source` endpoint with one of:
                ```mozart_client
                mozart_client.get_active_source()
                ```
                ```mozart_api
                mozart_api.get_active_source()
                ```
                ```playback_api
                playback_api.get_active_source()
                ```
            operationId: get-active-source
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Source'
                    description: Returns the currently active source
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Retrieve the currently active source, if any
            tags:
            - Playback
            - mozart
    /api/v1/playback/sources/active/{sourceId}:
        post:
            description: |-
                Use the `set-active-source` endpoint with one of:
                ```mozart_client
                mozart_client.set_active_source()
                ```
                ```public_api
                public_api.set_active_source()
                ```
                ```mozart_api
                mozart_api.set_active_source()
                ```
                ```playback_api
                playback_api.set_active_source()
                ```
            operationId: set-active-source
            parameters:
            -   description: the id of the source to activate
                in: path
                name: sourceId
                required: true
                schema:
                    type: string
            responses:
                '201':
                    description: Successfully changed the active source
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the active source
            tags:
            - Playback
            - mozart
            - public
    /api/v1/playback/state:
        get:
            description: |-
                Use the `get-playback-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_playback_state()
                ```
                ```mozart_api
                mozart_api.get_playback_state()
                ```
                ```playback_api
                playback_api.get_playback_state()
                ```
            operationId: get-playback-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PlaybackState'
                    description: Model describing the current playback state and meta
                        data
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: gets the current state of playback
            tags:
            - Playback
            - mozart
    /api/v1/playback/uri:
        get:
            description: |-
                Use the `get-uri-source` endpoint with one of:
                ```mozart_client
                mozart_client.get_uri_source()
                ```
                ```mozart_api
                mozart_api.get_uri_source()
                ```
                ```playback_api
                playback_api.get_uri_source()
                ```
            operationId: get-uri-source
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Uri'
                    description: The current uri being streamed.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Retrieves the current uri from which sound is streamed.
            tags:
            - Playback
            - mozart
        post:
            description: |-
                Use the `post-uri-source` endpoint with one of:
                ```mozart_client
                mozart_client.post_uri_source()
                ```
                ```mozart_api
                mozart_api.post_uri_source()
                ```
                ```playback_api
                playback_api.post_uri_source()
                ```
            operationId: post-uri-source
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Uri'
                description: the desired uri from which to stream data
                required: true
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the uri from which sound is streamed
            tags:
            - Playback
            - mozart
    /api/v1/playback/uri/dlna:
        get:
            description: |-
                Use the `get-dlna-uri-source` endpoint with one of:
                ```mozart_client
                mozart_client.get_dlna_uri_source()
                ```
                ```mozart_api
                mozart_api.get_dlna_uri_source()
                ```
                ```playback_api
                playback_api.get_dlna_uri_source()
                ```
            operationId: get-dlna-uri-source
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Uri'
                    description: The current uri being streamed.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Retrieves the current uri from which sound is streamed.
            tags:
            - Playback
            - mozart
        post:
            description: |-
                Use the `post-dlna-uri-source` endpoint with one of:
                ```mozart_client
                mozart_client.post_dlna_uri_source()
                ```
                ```mozart_api
                mozart_api.post_dlna_uri_source()
                ```
                ```playback_api
                playback_api.post_dlna_uri_source()
                ```
            operationId: post-dlna-uri-source
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Uri'
                description: the desired uri from which to stream data
                required: true
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the uri from which sound is streamed
            tags:
            - Playback
            - mozart
    /api/v1/playback/uri/repeat:
        get:
            description: |-
                Use the `get-uri-repeat` endpoint with one of:
                ```mozart_client
                mozart_client.get_uri_repeat()
                ```
                ```mozart_api
                mozart_api.get_uri_repeat()
                ```
                ```playback_api
                playback_api.get_uri_repeat()
                ```
            operationId: get-uri-repeat
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UriRepeat'
                    description: The current uri repeat value
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Retrieves if the current uri will repeatedly play
            tags:
            - Playback
            - mozart
        post:
            description: |-
                Use the `post-uri-repeat` endpoint with one of:
                ```mozart_client
                mozart_client.post_uri_repeat()
                ```
                ```mozart_api
                mozart_api.post_uri_repeat()
                ```
                ```playback_api
                playback_api.post_uri_repeat()
                ```
            operationId: post-uri-repeat
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UriRepeat'
                description: If the URI will be repeated
                required: true
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set if the current uri should repeat when done
            tags:
            - Playback
            - mozart
    /api/v1/powerlink/settings:
        get:
            description: |-
                Use the `get-powerlink-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_powerlink_settings()
                ```
                ```mozart_api
                mozart_api.get_powerlink_settings()
                ```
                ```powerlink_api
                powerlink_api.get_powerlink_settings()
                ```
            operationId: get-powerlink-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PowerLinkSettings'
                    description: the PowerLink settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current PowerLink settings
            tags:
            - PowerLink
            - mozart
        put:
            description: |-
                Use the `set-powerlink-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_powerlink_settings()
                ```
                ```mozart_api
                mozart_api.set_powerlink_settings()
                ```
                ```powerlink_api
                powerlink_api.set_powerlink_settings()
                ```
            operationId: set-powerlink-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PowerLinkSettings'
                description: PowerLink settings
                required: true
            responses:
                '204':
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: sets PowerLink settings
            tags:
            - PowerLink
            - mozart
    /api/v1/powerlink/status:
        get:
            description: |-
                Use the `get-powerlink-status` endpoint with one of:
                ```mozart_client
                mozart_client.get_powerlink_status()
                ```
                ```mozart_api
                mozart_api.get_powerlink_status()
                ```
                ```powerlink_api
                powerlink_api.get_powerlink_status()
                ```
            operationId: get-powerlink-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PowerLinkStatus'
                    description: PowerLink status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current PowerLink status
            tags:
            - PowerLink
            - mozart
    /api/v1/product/curtain/position:
        get:
            description: |-
                Use the `get-product-curtain-position` endpoint with one of:
                ```mozart_client
                mozart_client.get_product_curtain_position()
                ```
                ```mozart_api
                mozart_api.get_product_curtain_position()
                ```
                ```product_api
                product_api.get_product_curtain_position()
                ```
            operationId: get-product-curtain-position
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductCurtainStatus'
                    description: Curtain position
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get the position
            summary: returns curtain position and if moving
            tags:
            - Product
            - mozart
        put:
            description: |-
                Use the `put-product-curtain-position` endpoint with one of:
                ```mozart_client
                mozart_client.put_product_curtain_position()
                ```
                ```mozart_api
                mozart_api.put_product_curtain_position()
                ```
                ```product_api
                product_api.put_product_curtain_position()
                ```
            operationId: put-product-curtain-position
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductCurtainPosition'
                description: New curtain position
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The curtain started to move
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Move to specified position, use curtain/position to monitor progress
            tags:
            - Product
            - mozart
    /api/v1/product/curtain/toggle:
        post:
            description: |-
                Use the `post-product-curtain-toggle` endpoint with one of:
                ```mozart_client
                mozart_client.post_product_curtain_toggle()
                ```
                ```mozart_api
                mozart_api.post_product_curtain_toggle()
                ```
                ```product_api
                product_api.post_product_curtain_toggle()
                ```
            operationId: post-product-curtain-toggle
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The curtain started to move
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Toggle curtain position closed and wide (for service - keeps
                curtains open)
            tags:
            - Product
            - mozart
    /api/v1/product/info:
        get:
            description: |-
                Use the `get-product-info` endpoint with one of:
                ```mozart_client
                mozart_client.get_product_info()
                ```
                ```mozart_api
                mozart_api.get_product_info()
                ```
                ```product_api
                product_api.get_product_info()
                ```
            operationId: get-product-info
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductInformation'
                    description: returns an the overall product information
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get overall information on the product
            tags:
            - Product
            - mozart
    /api/v1/product/info/friendlyname:
        put:
            description: |-
                Use the `set-product-friendly-name` endpoint with one of:
                ```mozart_client
                mozart_client.set_product_friendly_name()
                ```
                ```mozart_api
                mozart_api.set_product_friendly_name()
                ```
                ```product_api
                product_api.set_product_friendly_name()
                ```
            operationId: set-product-friendly-name
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductFriendlyName'
                description: the friendly name for the product
                required: true
            responses:
                '204':
                    description: product friendly name updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: updates the friendly name
            tags:
            - Product
            - mozart
    /api/v1/product/licenses:
        get:
            description: |-
                Use the `get-licence-info` endpoint with one of:
                ```mozart_client
                mozart_client.get_licence_info()
                ```
                ```mozart_api
                mozart_api.get_licence_info()
                ```
                ```product_api
                product_api.get_licence_info()
                ```
            operationId: get-licence-info
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductLicenseArray'
                    description: returns information on open source licenses
            summary: get open source license information
            tags:
            - Product
            - mozart
    /api/v1/product/placement:
        get:
            description: |-
                Use the `get-placement` endpoint with one of:
                ```mozart_client
                mozart_client.get_placement()
                ```
                ```mozart_api
                mozart_api.get_placement()
                ```
                ```product_api
                product_api.get_placement()
                ```
            operationId: get-placement
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PlacementEnum'
                    description: Returns the product placement
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Retrieve the placement of the product.
            tags:
            - Product
            - mozart
    /api/v1/product/settings/dailyreboot:
        get:
            description: |-
                Use the `get-daily-reboot` endpoint with one of:
                ```mozart_client
                mozart_client.get_daily_reboot()
                ```
                ```mozart_api
                mozart_api.get_daily_reboot()
                ```
                ```product_api
                product_api.get_daily_reboot()
                ```
            operationId: get-daily-reboot
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DailyReboot'
                    description: returns the daily reboot setting
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: gets the daily reboot setting
            tags:
            - Product
            - mozart
        put:
            description: |-
                Use the `set-daily-reboot` endpoint with one of:
                ```mozart_client
                mozart_client.set_daily_reboot()
                ```
                ```mozart_api
                mozart_api.set_daily_reboot()
                ```
                ```product_api
                product_api.set_daily_reboot()
                ```
            operationId: set-daily-reboot
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DailyReboot'
                description: the new value for the daily reboot settings
                required: true
            responses:
                '200':
                    description: daily reboot value updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: updates the daily reboot setting
            tags:
            - Product
            - mozart
    /api/v1/product/unlocktoken:
        delete:
            description: |-
                Use the `clear-unlock-token` endpoint with one of:
                ```mozart_client
                mozart_client.clear_unlock_token()
                ```
                ```mozart_api
                mozart_api.clear_unlock_token()
                ```
                ```product_api
                product_api.clear_unlock_token()
                ```
            operationId: clear-unlock-token
            responses:
                '200':
                    description: Successfully cleared the unlock token.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Clears the unlock token
            tags:
            - Product
            - mozart
        get:
            description: |-
                Use the `get-unlock-token` endpoint with one of:
                ```mozart_client
                mozart_client.get_unlock_token()
                ```
                ```mozart_api
                mozart_api.get_unlock_token()
                ```
                ```product_api
                product_api.get_unlock_token()
                ```
            operationId: get-unlock-token
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnlockToken'
                    description: The currently active unlock token. It is not guaranteed
                        to be valid.
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: No current unlock token
            summary: Retrieves the currently active unlock token, as set by the put
                request.
            tags:
            - Product
            - mozart
        put:
            description: |-
                Use the `set-unlock-token` endpoint with one of:
                ```mozart_client
                mozart_client.set_unlock_token()
                ```
                ```mozart_api
                mozart_api.set_unlock_token()
                ```
                ```product_api
                product_api.set_unlock_token()
                ```
            operationId: set-unlock-token
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UnlockToken'
                description: the new unlock token
                required: true
            responses:
                '201':
                    description: the new token was accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Applies an unlock token
            tags:
            - Product
            - mozart
    /api/v1/production:
        get:
            description: |-
                Use the `get-production-info` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_info()
                ```
                ```mozart_api
                mozart_api.get_production_info()
                ```
                ```production_api
                production_api.get_production_info()
                ```
            operationId: get-production-info
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionStatusInformation'
                    description: the production status information
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: get an overview of the specific production information for the
                product
            tags:
            - Production
            - mozart
    /api/v1/production/activation-data:
        get:
            description: |-
                Use the `get-activation-data` endpoint with one of:
                ```mozart_client
                mozart_client.get_activation_data()
                ```
                ```mozart_api
                mozart_api.get_activation_data()
                ```
                ```production_api
                production_api.get_activation_data()
                ```
            operationId: get-activation-data
            responses:
                '200':
                    content:
                        application/octet-stream:
                            schema:
                                format: binary
                                type: string
                    description: the activation data to push to cloud at a later point
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Fetch activation data
            tags:
            - Production
            - mozart
    /api/v1/production/auto-calibration:
        get:
            description: |-
                Use the `get-production-auto-calibration` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_auto_calibration()
                ```
                ```mozart_api
                mozart_api.get_production_auto_calibration()
                ```
                ```calibration_api
                calibration_api.get_production_auto_calibration()
                ```
            operationId: get-production-auto-calibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionAutoCalibrationInfo'
                    description: the auto calibration info
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current auto-calibration status
            tags:
            - Calibration
            - mozart
        post:
            description: |-
                Use the `start-production-auto-calibration` endpoint with one of:
                ```mozart_client
                mozart_client.start_production_auto_calibration()
                ```
                ```mozart_api
                mozart_api.start_production_auto_calibration()
                ```
                ```calibration_api
                calibration_api.start_production_auto_calibration()
                ```
            operationId: start-production-auto-calibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionAutoCalibrationInfo'
                    description: the auto calibration is started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: start the auto-calibration
            tags:
            - Calibration
            - mozart
    /api/v1/production/calibration:
        get:
            description: |-
                Use the `get-production-calibration` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_calibration()
                ```
                ```mozart_api
                mozart_api.get_production_calibration()
                ```
                ```calibration_api
                calibration_api.get_production_calibration()
                ```
            operationId: get-production-calibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCalibrationInfoArray'
                    description: the calibration data
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current calibration data. Should also include uninitialized
                entries
            tags:
            - Calibration
            - mozart
    /api/v1/production/calibration/amplifiers:
        get:
            description: |-
                Use the `get-production-calibration-amplifiers` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_calibration_amplifiers()
                ```
                ```mozart_api
                mozart_api.get_production_calibration_amplifiers()
                ```
                ```calibration_api
                calibration_api.get_production_calibration_amplifiers()
                ```
            operationId: get-production-calibration-amplifiers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCalibrationInfoArray'
                    description: ok
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: locked
            summary: get current effective amplifier calibration
            tags:
            - Calibration
            - mozart
        post:
            description: |-
                Use the `post-production-calibration-amplifiers` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_calibration_amplifiers()
                ```
                ```mozart_api
                mozart_api.post_production_calibration_amplifiers()
                ```
                ```calibration_api
                calibration_api.post_production_calibration_amplifiers()
                ```
            operationId: post-production-calibration-amplifiers
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionCalibrationInfoArray'
            responses:
                '202':
                    description: changes will be applied
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: failure
            summary: set complete amplifier calibration map
            tags:
            - Calibration
            - mozart
    /api/v1/production/calibration/{id}:
        get:
            description: |-
                Use the `get-production-calibration-id` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_calibration_id()
                ```
                ```mozart_api
                mozart_api.get_production_calibration_id()
                ```
                ```calibration_api
                calibration_api.get_production_calibration_id()
                ```
            operationId: get-production-calibration-id
            parameters:
            -   description: identifies the calibration by id
                in: path
                name: id
                required: true
                schema:
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCalibrationInfo'
                    description: the calibration data
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current calibration data for a specific item
            tags:
            - Calibration
            - mozart
        post:
            description: |-
                Use the `post-production-calibration-id` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_calibration_id()
                ```
                ```mozart_api
                mozart_api.post_production_calibration_id()
                ```
                ```calibration_api
                calibration_api.post_production_calibration_id()
                ```
            operationId: post-production-calibration-id
            parameters:
            -   description: identifies the calibration by id
                in: path
                name: id
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionCalibrationUpdate'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCalibrationInfo'
                    description: the info on the calibration
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update the calibration data
            summary: set the calibration value, no effect until store-production-data
                and reboot
            tags:
            - Calibration
            - mozart
    /api/v1/production/country-code:
        get:
            description: |-
                Use the `get-country-code` endpoint with one of:
                ```mozart_client
                mozart_client.get_country_code()
                ```
                ```mozart_api
                mozart_api.get_country_code()
                ```
                ```production_api
                production_api.get_country_code()
                ```
            operationId: get-country-code
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CountryCode'
                    description: Country code
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Current regulatory country code (used by Wi-Fi, WISA etc)
            tags:
            - Production
            - mozart
        put:
            description: |-
                Use the `put-country-code` endpoint with one of:
                ```mozart_client
                mozart_client.put_country_code()
                ```
                ```mozart_api
                mozart_api.put_country_code()
                ```
                ```production_api
                production_api.put_country_code()
                ```
            operationId: put-country-code
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CountryCode'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CountryCode'
                    description: Channel config (RF test).
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Current regulatory country code (used by Wi-Fi, WISA etc)
            tags:
            - Production
            - mozart
    /api/v1/production/curtain-calibration:
        get:
            description: |-
                Use the `get-production-curtain-calibration` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_curtain_calibration()
                ```
                ```mozart_api
                mozart_api.get_production_curtain_calibration()
                ```
                ```calibration_api
                calibration_api.get_production_curtain_calibration()
                ```
            operationId: get-production-curtain-calibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCurtainCalibrationInfo'
                    description: the curtain calibration data
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get curtain calibration info, status=done after calibration finished
            tags:
            - Calibration
            - mozart
        post:
            description: |-
                Use the `start-production-curtain-calibration` endpoint with one of:
                ```mozart_client
                mozart_client.start_production_curtain_calibration()
                ```
                ```mozart_api
                mozart_api.start_production_curtain_calibration()
                ```
                ```calibration_api
                calibration_api.start_production_curtain_calibration()
                ```
            operationId: start-production-curtain-calibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionCurtainCalibrationInfo'
                    description: the curtain calibration is started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: start curtain-calibration
            tags:
            - Calibration
            - mozart
    /api/v1/production/curtain/debug-level:
        put:
            description: |-
                Use the `put-production-curtain-debug-level` endpoint with one of:
                ```mozart_client
                mozart_client.put_production_curtain_debug_level()
                ```
                ```mozart_api
                mozart_api.put_production_curtain_debug_level()
                ```
                ```production_api
                production_api.put_production_curtain_debug_level()
                ```
            operationId: put-production-curtain-debug-level
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CurtainDebugLevel'
                description: New debug level (0=none)
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The curtain started to move
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Allows more details in logs when curtains move
            tags:
            - Production
            - mozart
    /api/v1/production/curtain/move:
        put:
            description: |-
                Use the `put-production-curtain-move` endpoint with one of:
                ```mozart_client
                mozart_client.put_production_curtain_move()
                ```
                ```mozart_api
                mozart_api.put_production_curtain_move()
                ```
                ```production_api
                production_api.put_production_curtain_move()
                ```
            operationId: put-production-curtain-move
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CurtainPosition'
                description: New curtain position
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The curtain started to move
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Move to specified position, use curtain/state to monitor progress
            tags:
            - Production
            - mozart
    /api/v1/production/curtain/move-to-angle:
        put:
            description: |-
                Use the `put-production-curtain-move-to-angle` endpoint with one of:
                ```mozart_client
                mozart_client.put_production_curtain_move_to_angle()
                ```
                ```mozart_api
                mozart_api.put_production_curtain_move_to_angle()
                ```
                ```production_api
                production_api.put_production_curtain_move_to_angle()
                ```
            operationId: put-production-curtain-move-to-angle
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CurtainAngle'
                description: New curtain position in degrees
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The curtain started to move
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Move to specified angle, use curtain/state to monitor progress
            tags:
            - Production
            - mozart
    /api/v1/production/curtain/state:
        get:
            description: |-
                Use the `get-production-curtain-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_curtain_state()
                ```
                ```mozart_api
                mozart_api.get_production_curtain_state()
                ```
                ```production_api
                production_api.get_production_curtain_state()
                ```
            operationId: get-production-curtain-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CurtainStatus'
                    description: Curtain state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get the state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns Curtain state
            tags:
            - Production
            - mozart
    /api/v1/production/decoder/run:
        post:
            description: |-
                Use the `run-decoder-command` endpoint with one of:
                ```mozart_client
                mozart_client.run_decoder_command()
                ```
                ```developer_api
                developer_api.run_decoder_command()
                ```
                ```mozart_api
                mozart_api.run_decoder_command()
                ```
            operationId: run-decoder-command
            parameters:
            -   description: |
                    Comma-separated list of 32-bit words to send to the decoder DSP in
                    hexadecimal format with optional 0x prefix.
                in: query
                name: cmd
                required: true
                schema:
                    example: deadbeef,0x123abcd
                    type: string
            responses:
                '204':
                    description: Command executed
                '400':
                    description: Invalid command
            summary: Send command to the decoder DSP
            tags:
            - mozart
            - Developer
    /api/v1/production/hdmi/hdcp-license:
        get:
            description: |-
                Use the `get-hdcp-activation-data` endpoint with one of:
                ```mozart_client
                mozart_client.get_hdcp_activation_data()
                ```
                ```mozart_api
                mozart_api.get_hdcp_activation_data()
                ```
                ```production_api
                production_api.get_hdcp_activation_data()
                ```
            operationId: get-hdcp-activation-data
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HdcpLicenseStatus'
                    description: the HDMI HDCP activation status
            summary: Fetch HDMI HDCP activation status
            tags:
            - Production
            - mozart
        put:
            description: |-
                Use the `put-hdcp-activation-data` endpoint with one of:
                ```mozart_client
                mozart_client.put_hdcp_activation_data()
                ```
                ```mozart_api
                mozart_api.put_hdcp_activation_data()
                ```
                ```production_api
                production_api.put_hdcp_activation_data()
                ```
            operationId: put-hdcp-activation-data
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HdcpLicenseUpdate'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HdcpLicenseStatus'
                    description: the HDMI HDCP activation status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Activate HDMI HDCP license
            tags:
            - Production
            - mozart
    /api/v1/production/hdmi/port/{id}/activate:
        parameters:
        -   description: Hdmi port id
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/ProductionHdmiPortId'
        post:
            description: |-
                Use the `post-hdmi-port` endpoint with one of:
                ```mozart_client
                mozart_client.post_hdmi_port()
                ```
                ```mozart_api
                mozart_api.post_hdmi_port()
                ```
                ```production_api
                production_api.post_hdmi_port()
                ```
            operationId: post-hdmi-port
            responses:
                '204':
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: port not found
            summary: Activate one of the available hdmi ports
            tags:
            - Production
            - mozart
    /api/v1/production/hdmi/ports:
        get:
            description: |-
                Use the `get-hdmi-ports` endpoint with one of:
                ```mozart_client
                mozart_client.get_hdmi_ports()
                ```
                ```mozart_api
                mozart_api.get_hdmi_ports()
                ```
                ```production_api
                production_api.get_hdmi_ports()
                ```
            operationId: get-hdmi-ports
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionHdmiPortList'
                    description: A list of available hdmi ports
            summary: Get available ports
            tags:
            - Production
            - mozart
    /api/v1/production/hdmi/test-image:
        get:
            description: |-
                Use the `get-test-image` endpoint with one of:
                ```mozart_client
                mozart_client.get_test_image()
                ```
                ```mozart_api
                mozart_api.get_test_image()
                ```
                ```production_api
                production_api.get_test_image()
                ```
            operationId: get-test-image
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TestImagesList'
                    description: List of available test images
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Fetch list of available test images
            tags:
            - Production
            - mozart
        put:
            description: |-
                Use the `put-test-image` endpoint with one of:
                ```mozart_client
                mozart_client.put_test_image()
                ```
                ```mozart_api
                mozart_api.put_test_image()
                ```
                ```production_api
                production_api.put_test_image()
                ```
            operationId: put-test-image
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TestImage'
                description: The HDMI test image to display
                required: true
            responses:
                '200':
                    description: Accepted the test image request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Change HDMI test image
            tags:
            - Production
            - mozart
    /api/v1/production/lock-state:
        get:
            description: |-
                Use the `get-lock-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_lock_state()
                ```
                ```mozart_api
                mozart_api.get_lock_state()
                ```
                ```production_api
                production_api.get_lock_state()
                ```
            operationId: get-lock-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockState'
                    description: Device lock state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get lock state
            tags:
            - Production
            - mozart
        put:
            description: |-
                Use the `set-lock-state` endpoint with one of:
                ```mozart_client
                mozart_client.set_lock_state()
                ```
                ```mozart_api
                mozart_api.set_lock_state()
                ```
                ```production_api
                production_api.set_lock_state()
                ```
            operationId: set-lock-state
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LockState'
                description: New lock state
                required: true
            responses:
                '202':
                    description: New lock state accepted, the device will reboot to
                        apply it
                '204':
                    description: Lock state unchanged
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot unlock locked device
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Set lock state
            tags:
            - Production
            - mozart
    /api/v1/production/serial-ports:
        get:
            description: |-
                Use the `get-serial-ports` endpoint with one of:
                ```mozart_client
                mozart_client.get_serial_ports()
                ```
                ```mozart_api
                mozart_api.get_serial_ports()
                ```
                ```production_api
                production_api.get_serial_ports()
                ```
            operationId: get-serial-ports
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionSerialPortList'
                    description: A list of available serial ports
            summary: Get serial ports
            tags:
            - Production
            - mozart
    /api/v1/production/serial/{portId}:
        parameters:
        -   description: Serial port id
            in: path
            name: portId
            required: true
            schema:
                $ref: '#/components/schemas/SerialPortIdType'
        put:
            description: |-
                Use the `put-serial-port` endpoint with one of:
                ```mozart_client
                mozart_client.put_serial_port()
                ```
                ```mozart_api
                mozart_api.put_serial_port()
                ```
                ```production_api
                production_api.put_serial_port()
                ```
            operationId: put-serial-port
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SerialPortSettings'
            responses:
                '204':
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: port not found
            summary: Set serial port settings
            tags:
            - Production
            - mozart
    /api/v1/production/store-production-data:
        post:
            description: |-
                Use the `store-production-data` endpoint with one of:
                ```mozart_client
                mozart_client.store_production_data()
                ```
                ```mozart_api
                mozart_api.store_production_data()
                ```
                ```calibration_api
                calibration_api.store_production_data()
                ```
            operationId: store-production-data
            responses:
                '200':
                    description: the production data has been stored
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: store the current production data
            tags:
            - Calibration
            - mozart
    /api/v1/production/testing/audiopath/channels:
        get:
            description: |-
                Use the `get-production-testing-audiopath-channels` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_testing_audiopath_channels()
                ```
                ```mozart_api
                mozart_api.get_production_testing_audiopath_channels()
                ```
                ```production_api
                production_api.get_production_testing_audiopath_channels()
                ```
            operationId: get-production-testing-audiopath-channels
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionAudioPathChannels'
                    description: the list of available channels
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get channel list, specific error in the
                        error model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns a list with the current channel status (muted/unmuted)
            tags:
            - Production
            - mozart
    /api/v1/production/testing/audiopath/channels/{id}:
        post:
            description: |-
                Use the `post-production-testing-audiopath-channels` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_testing_audiopath_channels()
                ```
                ```mozart_api
                mozart_api.post_production_testing_audiopath_channels()
                ```
                ```production_api
                production_api.post_production_testing_audiopath_channels()
                ```
            operationId: post-production-testing-audiopath-channels
            parameters:
            -   description: identifies the channel. Must be a valid name (see get
                    endpoint above).
                in: path
                name: id
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                muted:
                                    type: boolean
                            type: object
                description: the muted state
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionAudioPathChannel'
                    description: the state of available channel after update
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update channel, specific error in the error
                        model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: updates the state of a identified channel
            tags:
            - Production
            - mozart
    /api/v1/production/testing/audiopath/microphones/recording:
        get:
            description: |-
                Use the `get-production-testing-audiopath-microphones-recordingstatus` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_testing_audiopath_microphones_recordingstatus()
                ```
                ```mozart_api
                mozart_api.get_production_testing_audiopath_microphones_recordingstatus()
                ```
                ```production_api
                production_api.get_production_testing_audiopath_microphones_recordingstatus()
                ```
            operationId: get-production-testing-audiopath-microphones-recordingstatus
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MicrophoneRecordingState'
                    description: the current microphone recording state.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to obtain microphone recording state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns the current microphone recording state.
            tags:
            - Production
            - mozart
        post:
            description: |-
                Use the `post-production-testing-audiopath-microphones-recordingstatus` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_testing_audiopath_microphones_recordingstatus()
                ```
                ```mozart_api
                mozart_api.post_production_testing_audiopath_microphones_recordingstatus()
                ```
                ```production_api
                production_api.post_production_testing_audiopath_microphones_recordingstatus()
                ```
            operationId: post-production-testing-audiopath-microphones-recordingstatus
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MicrophoneRecordingState'
                required: true
            responses:
                '200':
                    description: The current microphone recording state has been set.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Failed to set the microphone recording state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Sets the current microphone recording state.
            tags:
            - Production
            - mozart
    /api/v1/production/testing/audiopath/processing-bypass:
        get:
            description: |-
                Use the `get-production-testing-audiopath-bypass` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_testing_audiopath_bypass()
                ```
                ```mozart_api
                mozart_api.get_production_testing_audiopath_bypass()
                ```
                ```production_api
                production_api.get_production_testing_audiopath_bypass()
                ```
            operationId: get-production-testing-audiopath-bypass
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingAudioPathProcessingByPass'
                    description: state of the processsing bypass
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get bypass state, specific error in the
                        error model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns the state of the processing bypass
            tags:
            - Production
            - mozart
    /api/v1/production/testing/audiopath/processing-bypass/{id}:
        post:
            description: |-
                Use the `post-production-testing-audiopath-bypass` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_testing_audiopath_bypass()
                ```
                ```mozart_api
                mozart_api.post_production_testing_audiopath_bypass()
                ```
                ```production_api
                production_api.post_production_testing_audiopath_bypass()
                ```
            operationId: post-production-testing-audiopath-bypass
            parameters:
            -   description: identifies the bypass step (see get endpoint above for
                    valid values)
                in: path
                name: id
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                enabled:
                                    type: boolean
                            type: object
                description: the enabled state
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingAudioPathProcessingStepByPass'
                    description: the state of available bypass step after update
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update channel, specific error in the error
                        model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: updates the state of a identified bypass step
            tags:
            - Production
            - mozart
    /api/v1/production/testing/audiopath/processing-mode:
        get:
            description: |-
                Use the `get-production-testing-audiopath-processing-mode` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_testing_audiopath_processing_mode()
                ```
                ```mozart_api
                mozart_api.get_production_testing_audiopath_processing_mode()
                ```
                ```production_api
                production_api.get_production_testing_audiopath_processing_mode()
                ```
            operationId: get-production-testing-audiopath-processing-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingAudioPathProcessingMode'
                    description: the current processing mode
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get processing mode, specific error in
                        the error model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns the processing mode
            tags:
            - Production
            - mozart
        post:
            description: |-
                Use the `post-production-testing-audiopath-processing-mode` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_testing_audiopath_processing_mode()
                ```
                ```mozart_api
                mozart_api.post_production_testing_audiopath_processing_mode()
                ```
                ```production_api
                production_api.post_production_testing_audiopath_processing_mode()
                ```
            operationId: post-production-testing-audiopath-processing-mode
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionTestingAudioPathProcessingMode'
                description: the processing mode
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingAudioPathProcessingMode'
                    description: the processing mode after update
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update processing mode, specific error
                        in the error model
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: updates the processing mode
            tags:
            - Production
            - mozart
    /api/v1/production/testing/battery-level-max:
        get:
            description: |-
                Use the `get-production-testing-battery-level-max` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_testing_battery_level_max()
                ```
                ```mozart_api
                mozart_api.get_production_testing_battery_level_max()
                ```
                ```production_api
                production_api.get_production_testing_battery_level_max()
                ```
            operationId: get-production-testing-battery-level-max
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingBatteryLevelMax'
                    description: the value of max battery level
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to retrieve the value of max battery level
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns the value of max battery level
            tags:
            - Production
            - mozart
        post:
            description: |-
                Use the `post-production-testing-battery-level-max` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_testing_battery_level_max()
                ```
                ```mozart_api
                mozart_api.post_production_testing_battery_level_max()
                ```
                ```production_api
                production_api.post_production_testing_battery_level_max()
                ```
            operationId: post-production-testing-battery-level-max
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionTestingBatteryLevelMax'
                required: true
            responses:
                '200':
                    description: The max battery level was set as specified.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update the max battery level
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: set the value of max battery level in percent.
            tags:
            - Production
            - mozart
    /api/v1/production/testing/functional/amplifier/powerstate:
        get:
            description: |-
                Use the `get-production-testing-functional-amplifier-powerstate` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_testing_functional_amplifier_powerstate()
                ```
                ```mozart_api
                mozart_api.get_production_testing_functional_amplifier_powerstate()
                ```
                ```production_api
                production_api.get_production_testing_functional_amplifier_powerstate()
                ```
            operationId: get-production-testing-functional-amplifier-powerstate
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OnOffState'
                    description: Returns the power state for the amplifier as 'on'
                        or 'off'.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to get the amplifier info
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns info on an amplifier on the product
            tags:
            - Production
            - mozart
        post:
            description: |-
                Use the `post-production-testing-functional-amplifier-powerstate` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_testing_functional_amplifier_powerstate()
                ```
                ```mozart_api
                mozart_api.post_production_testing_functional_amplifier_powerstate()
                ```
                ```production_api
                production_api.post_production_testing_functional_amplifier_powerstate()
                ```
            operationId: post-production-testing-functional-amplifier-powerstate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OnOffState'
                required: true
            responses:
                '200':
                    description: The amplifier powerstate was set as specified.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update the amplifier state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: set the powerstate of the amplifier as either 'on' or 'off'.
            tags:
            - Production
            - mozart
    /api/v1/production/testing/io/buttons:
        get:
            description: |-
                Use the `get-production-testing-io-buttons` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_testing_io_buttons()
                ```
                ```mozart_api
                mozart_api.get_production_testing_io_buttons()
                ```
                ```production_api
                production_api.get_production_testing_io_buttons()
                ```
            operationId: get-production-testing-io-buttons
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingButtonStatus'
                    description: The current button status.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to retrieve the button status
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns the current button status mask and sensitivity.
            tags:
            - Production
            - mozart
    /api/v1/production/testing/io/buttons/{id}:
        post:
            description: |-
                Use the `post-production-testing-io-buttons` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_testing_io_buttons()
                ```
                ```mozart_api
                mozart_api.post_production_testing_io_buttons()
                ```
                ```production_api
                production_api.post_production_testing_io_buttons()
                ```
            operationId: post-production-testing-io-buttons
            parameters:
            -   description: Button identifier
                in: path
                name: id
                required: true
                schema:
                    enum:
                    - microphone
                    - bluetooth
                    - next
                    - previous
                    - playpause
                    - preset1
                    - preset2
                    - preset3
                    - preset4
                    - volume
                    - previousnext
                    - power
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionTestingButton'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                type: string
                    description: A message stating success.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update the led state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Simulate a specific button press
            tags:
            - Production
            - mozart
    /api/v1/production/testing/io/leds/{id}:
        post:
            description: |-
                Use the `post-production-testing-io-led-id` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_testing_io_led_id()
                ```
                ```mozart_api
                mozart_api.post_production_testing_io_led_id()
                ```
                ```production_api
                production_api.post_production_testing_io_led_id()
                ```
            operationId: post-production-testing-io-led-id
            parameters:
            -   description: identifies the led by id
                in: path
                name: id
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductionTestingIOLEDUpdate'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: A message stating success.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to update the led state
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: set the state of the led
            tags:
            - Production
            - mozart
    /api/v1/production/testing/lightsensor:
        get:
            description: |-
                Use the `get-production-testing-lightsensor-result` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_testing_lightsensor_result()
                ```
                ```mozart_api
                mozart_api.get_production_testing_lightsensor_result()
                ```
                ```production_api
                production_api.get_production_testing_lightsensor_result()
                ```
            operationId: get-production-testing-lightsensor-result
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingLightSensorResult'
                    description: the light sensor result containing the LUX value
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to retrieve the light sensor result
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns the last light sensor result
            tags:
            - Production
            - mozart
    /api/v1/production/testing/proximity:
        get:
            description: |-
                Use the `get-production-testing-proximity-result` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_testing_proximity_result()
                ```
                ```mozart_api
                mozart_api.get_production_testing_proximity_result()
                ```
                ```production_api
                production_api.get_production_testing_proximity_result()
                ```
            operationId: get-production-testing-proximity-result
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingProximityResult'
                    description: the proximity result with detected presence and range
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to retrieve the proximity result
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns the last proximity result
            tags:
            - Production
            - mozart
        post:
            description: |-
                Use the `post-production-testing-proximity` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_testing_proximity()
                ```
                ```mozart_api
                mozart_api.post_production_testing_proximity()
                ```
                ```production_api
                production_api.post_production_testing_proximity()
                ```
            operationId: post-production-testing-proximity
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingProximityResult'
                    description: the proximity result with detected presence and range
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to start the proximity measurement
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Initiate the proximity measurement
            tags:
            - Production
            - mozart
    /api/v1/production/testing/puc:
        put:
            description: |-
                Use the `put-puc-output-state` endpoint with one of:
                ```mozart_client
                mozart_client.put_puc_output_state()
                ```
                ```mozart_api
                mozart_api.put_puc_output_state()
                ```
                ```production_api
                production_api.put_puc_output_state()
                ```
            operationId: put-puc-output-state
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PucOutputState'
                required: true
            responses:
                '204':
                    description: The output state was applied.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    description: No available PUC outputs
            summary: Controls the state of the PUC output.
            tags:
            - Production
            - mozart
    /api/v1/production/testing/self-test:
        get:
            description: |-
                Use the `get-production-testing-self-test-results` endpoint with one of:
                ```mozart_client
                mozart_client.get_production_testing_self_test_results()
                ```
                ```mozart_api
                mozart_api.get_production_testing_self_test_results()
                ```
                ```production_api
                production_api.get_production_testing_self_test_results()
                ```
            operationId: get-production-testing-self-test-results
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductionTestingSelfTestResult'
                    description: the collection of FEP self-test results.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to retrieve the self-test result
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: returns the last known FEP self-test results
            tags:
            - Production
            - mozart
        post:
            description: |-
                Use the `post-production-testing-self-test` endpoint with one of:
                ```mozart_client
                mozart_client.post_production_testing_self_test()
                ```
                ```mozart_api
                mozart_api.post_production_testing_self_test()
                ```
                ```production_api
                production_api.post_production_testing_self_test()
                ```
            operationId: post-production-testing-self-test
            responses:
                '200':
                    description: self test started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to start the self-test
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Initiate the self-test
            tags:
            - Production
            - mozart
    /api/v1/production/uuubootmode:
        put:
            description: |-
                Use the `put-uuu-boot-mode` endpoint with one of:
                ```mozart_client
                mozart_client.put_uuu_boot_mode()
                ```
                ```mozart_api
                mozart_api.put_uuu_boot_mode()
                ```
                ```production_api
                production_api.put_uuu_boot_mode()
                ```
            operationId: put-uuu-boot-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The device is being rebooted in UUU mode
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Invoke this endpoint to trigger UUU boot mode.
            tags:
            - Production
            - mozart
    /api/v1/production/wisa-tx/channel:
        get:
            description: |-
                Use the `get-wisa-tx-channel` endpoint with one of:
                ```mozart_client
                mozart_client.get_wisa_tx_channel()
                ```
                ```mozart_api
                mozart_api.get_wisa_tx_channel()
                ```
                ```production_api
                production_api.get_wisa_tx_channel()
                ```
            operationId: get-wisa-tx-channel
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WisaTxChannel'
                    description: Channel config (RF test).
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Channel config (RF test). See also api/v1/diagnostics/wisa-tx
            tags:
            - Production
            - mozart
        put:
            description: |-
                Use the `put-wisa-tx-channel` endpoint with one of:
                ```mozart_client
                mozart_client.put_wisa_tx_channel()
                ```
                ```mozart_api
                mozart_api.put_wisa_tx_channel()
                ```
                ```production_api
                production_api.put_wisa_tx_channel()
                ```
            operationId: put-wisa-tx-channel
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WisaTxChannel'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WisaTxChannel'
                    description: Channel config (RF test).
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Channel config (RF test). See also api/v1/diagnostics/wisa-tx
            tags:
            - Production
            - mozart
    /api/v1/production/wisa-tx/discover/filter:
        get:
            description: |-
                Get list of speakers allowed to be discovered or any if empty.
                Speaker MAC addresses returned by api/v1/output/speakers/{id}

                Use the `get-wisa-discover-filter` endpoint with one of:
                ```mozart_client
                mozart_client.get_wisa_discover_filter()
                ```
                ```mozart_api
                mozart_api.get_wisa_discover_filter()
                ```
                ```production_api
                production_api.get_wisa_discover_filter()
                ```
            operationId: get-wisa-discover-filter
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerMacAddrArray'
                    description: List of MAC addresses
            summary: wisa discovery filter
            tags:
            - Production
            - mozart
        put:
            description: |-
                Set list of speakers allowed to be discovered or any if empty.
                Speaker MAC addresses returned by api/v1/output/speakers/{id}

                Use the `put-wisa-discover-filter` endpoint with one of:
                ```mozart_client
                mozart_client.put_wisa_discover_filter()
                ```
                ```mozart_api
                mozart_api.put_wisa_discover_filter()
                ```
                ```production_api
                production_api.put_wisa_discover_filter()
                ```
            operationId: put-wisa-discover-filter
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerMacAddrArray'
                description: The desired speaker MAC filter
                required: true
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set list of allowed speakers
            tags:
            - Production
            - mozart
    /api/v1/production/wisa-tx/transmit/{packetCount}:
        parameters:
        -   description: Number of packets to transmit
            in: path
            name: packetCount
            required: true
            schema:
                format: int32
                minimum: 0
                type: integer
        post:
            description: |-
                Use the `post-wisa-tx-transmit` endpoint with one of:
                ```mozart_client
                mozart_client.post_wisa_tx_transmit()
                ```
                ```mozart_api
                mozart_api.post_wisa_tx_transmit()
                ```
                ```production_api
                production_api.post_wisa_tx_transmit()
                ```
            operationId: post-wisa-tx-transmit
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: Transmission succeeded.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Transmit specified number of packets (RF test)
            tags:
            - Production
            - mozart
    /api/v1/production/wisa/reboot:
        post:
            description: |-
                Use the `post-wisa-reboot` endpoint with one of:
                ```mozart_client
                mozart_client.post_wisa_reboot()
                ```
                ```mozart_api
                mozart_api.post_wisa_reboot()
                ```
                ```production_api
                production_api.post_wisa_reboot()
                ```
            operationId: post-wisa-reboot
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: Reboot initiated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Reboot the WISA device, e.g. during RF-test
            tags:
            - Production
            - mozart
    /api/v1/production/wisa/register/{address}:
        get:
            description: |-
                Use the `get-wisa-register` endpoint with one of:
                ```mozart_client
                mozart_client.get_wisa_register()
                ```
                ```mozart_api
                mozart_api.get_wisa_register()
                ```
                ```production_api
                production_api.get_wisa_register()
                ```
            operationId: get-wisa-register
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WisaRegisterValue'
                    description: Register Value
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Read from a WISA register. Similar to CLI "diag regr <addr>"
            tags:
            - Production
            - mozart
        parameters:
        -   description: Register Address in hexadecimal
            in: path
            name: address
            required: true
            schema:
                type: string
        put:
            description: |-
                Use the `put-wisa-register` endpoint with one of:
                ```mozart_client
                mozart_client.put_wisa_register()
                ```
                ```mozart_api
                mozart_api.put_wisa_register()
                ```
                ```production_api
                production_api.put_wisa_register()
                ```
            operationId: put-wisa-register
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WisaRegisterValue'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: Value was written
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Write to a WISA register. Similar to CLI "diag regw <addr> <value>"
            tags:
            - Production
            - mozart
    /api/v1/proximity/settings:
        get:
            description: |-
                Use the `get-proximity-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_proximity_settings()
                ```
                ```mozart_api
                mozart_api.get_proximity_settings()
                ```
                ```settings_api
                settings_api.get_proximity_settings()
                ```
            operationId: get-proximity-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProximitySettings'
                    description: the proximity settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current proximity settings
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-proximity-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_proximity_settings()
                ```
                ```mozart_api
                mozart_api.set_proximity_settings()
                ```
                ```settings_api
                settings_api.set_proximity_settings()
                ```
            operationId: set-proximity-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProximitySettings'
                description: the proximity settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProximitySettings'
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: sets the current proximity settings
            tags:
            - Settings
            - mozart
    /api/v1/puc/files:
        get:
            description: |-
                Use the `get-all-puc-files` endpoint with one of:
                ```mozart_client
                mozart_client.get_all_puc_files()
                ```
                ```mozart_api
                mozart_api.get_all_puc_files()
                ```
                ```puc_api
                puc_api.get_all_puc_files()
                ```
            operationId: get-all-puc-files
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PucFilesArray'
                    description: puc files returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get all installed puc files
            tags:
            - Puc
            - mozart
    /api/v1/puc/install-record-status:
        get:
            description: |-
                Use the `get-puc-install-record-status` endpoint with one of:
                ```mozart_client
                mozart_client.get_puc_install_record_status()
                ```
                ```mozart_api
                mozart_api.get_puc_install_record_status()
                ```
                ```puc_api
                puc_api.get_puc_install_record_status()
                ```
            operationId: get-puc-install-record-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InstallRecordIdState'
                    description: Current status of install record
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Status of installing a puc record
            tags:
            - Puc
            - mozart
    /api/v1/puc/installRecord/{recordId}:
        parameters:
        -   $ref: '#/components/parameters/RecordId'
        put:
            description: |-
                Use the `set-puc-record-id` endpoint with one of:
                ```mozart_client
                mozart_client.set_puc_record_id()
                ```
                ```mozart_api
                mozart_api.set_puc_record_id()
                ```
                ```puc_api
                puc_api.set_puc_record_id()
                ```
            operationId: set-puc-record-id
            responses:
                '204':
                    description: Record id install started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Another request is in progress
            summary: Install puc file from record id
            tags:
            - Puc
            - mozart
    /api/v1/puc/settings:
        get:
            description: |-
                Use the `get-all-puc-source-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_all_puc_source_settings()
                ```
                ```mozart_api
                mozart_api.get_all_puc_source_settings()
                ```
                ```puc_api
                puc_api.get_all_puc_source_settings()
                ```
            operationId: get-all-puc-source-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PucSourceSettingsArray'
                    description: puc source settings returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get all settings of all puc sources
            tags:
            - Puc
            - mozart
    /api/v1/puc/settings/{id}/pucSettings:
        delete:
            description: |-
                Use the `reset-source-puc-settings` endpoint with one of:
                ```mozart_client
                mozart_client.reset_source_puc_settings()
                ```
                ```mozart_api
                mozart_api.reset_source_puc_settings()
                ```
                ```puc_api
                puc_api.reset_source_puc_settings()
                ```
            operationId: reset-source-puc-settings
            responses:
                '204':
                    description: Source puc settings reset
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Reset all puc settings of the source.
            tags:
            - Puc
            - mozart
        get:
            description: |-
                Use the `get-source-puc-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_source_puc_settings()
                ```
                ```mozart_api
                mozart_api.get_source_puc_settings()
                ```
                ```puc_api
                puc_api.get_source_puc_settings()
                ```
            operationId: get-source-puc-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PucSettings'
                    description: Source puc settings returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the puc settings of a source
            tags:
            - Puc
            - mozart
        parameters:
        -   $ref: '#/components/parameters/SourceId'
        put:
            description: |-
                Use the `set-source-puc-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_source_puc_settings()
                ```
                ```mozart_api
                mozart_api.set_source_puc_settings()
                ```
                ```puc_api
                puc_api.set_source_puc_settings()
                ```
            operationId: set-source-puc-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PucSettings'
                required: true
            responses:
                '204':
                    description: Source puc settings updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Apply puc settings to a source
            tags:
            - Puc
            - mozart
    /api/v1/remote:
        get:
            description: |-
                Use the `get-remote-menu` endpoint with one of:
                ```mozart_client
                mozart_client.get_remote_menu()
                ```
                ```mozart_api
                mozart_api.get_remote_menu()
                ```
                ```remote_api
                remote_api.get_remote_menu()
                ```
            operationId: get-remote-menu
            parameters:
            -   description: Get all descendants to this item
                in: query
                name: descendantsTo
                schema:
                    format: uuid
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            example:
                                6c2ab917-2a9e-42dd-87c6-1fa2fabcdeb0:
                                    contentUri: tv
                                    firstChildMenuItemID: ee5196ce-65c4-4c56-9a48-1943c4afef9c
                                    fixed: true
                                    id: 6c2ab917-2a9e-42dd-87c6-1fa2fabcdeb0
                                    label: TV
                                    parentMenuItemId: null
                                dd5196ce-65c4-4c56-9a48-1943c4afef9c:
                                    contentUri: tv://HBO
                                    fixed: false
                                    id: dd5196ce-65c4-4c56-9a48-1943c4afef9c
                                    label: HBO
                                    parentMenuItemId: 6c2ab917-2a9e-42dd-87c6-1fa2fabcdeb0
                                ee5196ce-65c4-4c56-9a48-1943c4afef9c:
                                    contentUri: tv://Netflix
                                    fixed: false
                                    id: ee5196ce-65c4-4c56-9a48-1943c4afef9c
                                    label: Netflix
                                    nextSiblingMenuItemId: dd5196ce-65c4-4c56-9a48-1943c4afef9c
                                    parentMenuItemId: 6c2ab917-2a9e-42dd-87c6-1fa2fabcdeb0
                            schema:
                                $ref: '#/components/schemas/RemoteMenuItemMap'
                    description: Successful request
            summary: Returns all remote menu items
            tags:
            - Remote
            - mozart
        post:
            description: |-
                Use the `post-remote-add` endpoint with one of:
                ```mozart_client
                mozart_client.post_remote_add()
                ```
                ```mozart_api
                mozart_api.post_remote_add()
                ```
                ```remote_api
                remote_api.post_remote_add()
                ```
            operationId: post-remote-add
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RemoteMenuItemProperties'
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RemoteMenuItem'
                    description: Menu item created
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad menu item
            summary: Add one remote item
            tags:
            - Remote
            - mozart
    /api/v1/remote/key/{id}/trigger:
        post:
            description: |-
                Use the `post-remote-key-trigger` endpoint with one of:
                ```mozart_client
                mozart_client.post_remote_key_trigger()
                ```
                ```mozart_api
                mozart_api.post_remote_key_trigger()
                ```
                ```remote_api
                remote_api.post_remote_key_trigger()
                ```
            operationId: post-remote-key-trigger
            parameters:
            -   description: Key identifier
                in: path
                name: id
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RemoteUIKeyState'
                required: true
            responses:
                '204':
                    description: Remote input key press registered successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Failed to register key press
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Key not found
            summary: Remote input key press.
            tags:
            - Remote
            - mozart
    /api/v1/remote/keys:
        get:
            description: |-
                Use the `get-remote-keys` endpoint with one of:
                ```mozart_client
                mozart_client.get_remote_keys()
                ```
                ```mozart_api
                mozart_api.get_remote_keys()
                ```
                ```remote_api
                remote_api.get_remote_keys()
                ```
            operationId: get-remote-keys
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RemoteUIKeyArray'
                    description: Successful request
            summary: Returns supported remote keys
            tags:
            - Remote
            - mozart
    /api/v1/remote/reset:
        post:
            description: |-
                Use the `post-remote-reset` endpoint with one of:
                ```mozart_client
                mozart_client.post_remote_reset()
                ```
                ```mozart_api
                mozart_api.post_remote_reset()
                ```
                ```remote_api
                remote_api.post_remote_reset()
                ```
            operationId: post-remote-reset
            responses:
                '204':
                    description: Successful request
            summary: Reset remote menu
            tags:
            - Remote
            - mozart
    /api/v1/remote/{id}:
        delete:
            description: |-
                Use the `delete-remote-item` endpoint with one of:
                ```mozart_client
                mozart_client.delete_remote_item()
                ```
                ```mozart_api
                mozart_api.delete_remote_item()
                ```
                ```remote_api
                remote_api.delete_remote_item()
                ```
            operationId: delete-remote-item
            responses:
                '204':
                    description: Menu item deleted
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Menu item not found
            summary: Delete specific remote item and all its descendants
            tags:
            - Remote
            - mozart
        parameters:
        -   description: Remote menu item ID
            in: path
            name: id
            required: true
            schema:
                format: uuid
                type: string
        put:
            description: |-
                Use the `put-remote-modify` endpoint with one of:
                ```mozart_client
                mozart_client.put_remote_modify()
                ```
                ```mozart_api
                mozart_api.put_remote_modify()
                ```
                ```remote_api
                remote_api.put_remote_modify()
                ```
            operationId: put-remote-modify
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RemoteMenuItemProperties'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RemoteMenuItem'
                    description: Menu item updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad menu item
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Menu item not found
            summary: Update a remote menu item
            tags:
            - Remote
            - mozart
    /api/v1/remote/{id}/move:
        parameters:
        -   description: ID of the remote item
            in: path
            name: id
            required: true
            schema:
                format: uuid
                type: string
        -   description: Change remote menu item parentMenuItemId
            in: query
            name: parentMenuItemId
            schema:
                format: uuid
                type: string
        -   description: Change remote menu item nextSiblingMenuItemId
            in: query
            name: nextSiblingMenuItemId
            schema:
                format: uuid
                type: string
        post:
            description: |-
                Use the `post-remote-move` endpoint with one of:
                ```mozart_client
                mozart_client.post_remote_move()
                ```
                ```mozart_api
                mozart_api.post_remote_move()
                ```
                ```remote_api
                remote_api.post_remote_move()
                ```
            operationId: post-remote-move
            responses:
                '204':
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Menu item not found
            summary: Move specific remote item by changing "parentMenuItemId" and/or
                "nextSiblingMenuItemId"
            tags:
            - Remote
            - mozart
    /api/v1/remote/{id}/trigger:
        parameters:
        -   description: Remote menu item ID
            in: path
            name: id
            required: true
            schema:
                format: uuid
                type: string
        post:
            description: |-
                Use the `post-remote-trigger` endpoint with one of:
                ```mozart_client
                mozart_client.post_remote_trigger()
                ```
                ```mozart_api
                mozart_api.post_remote_trigger()
                ```
                ```remote_api
                remote_api.post_remote_trigger()
                ```
            operationId: post-remote-trigger
            responses:
                '204':
                    description: Menu item successfully triggered
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Menu item not found
            summary: Trigger a remote menu item
            tags:
            - Remote
            - mozart
    /api/v1/scene:
        post:
            description: |-
                Use the `post-add-scene` endpoint with one of:
                ```mozart_client
                mozart_client.post_add_scene()
                ```
                ```mozart_api
                mozart_api.post_add_scene()
                ```
                ```scenes_api
                scenes_api.post_add_scene()
                ```
            operationId: post-add-scene
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SceneProperties'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SceneId'
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request invalid scene
            summary: Add a scene
            tags:
            - Scenes
            - mozart
    /api/v1/scene/match-trigger:
        post:
            description: |-
                Use the `post-scene-match-trigger` endpoint with one of:
                ```mozart_client
                mozart_client.post_scene_match_trigger()
                ```
                ```mozart_api
                mozart_api.post_scene_match_trigger()
                ```
                ```scenes_api
                scenes_api.post_scene_match_trigger()
                ```
            operationId: post-scene-match-trigger
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SceneMatch'
                required: true
            responses:
                '204':
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request no match objects provided
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Could not find any matching scene
            summary: Trigger the first scene with same non null objects provided in
                the SceneMatch object
            tags:
            - Scenes
            - mozart
    /api/v1/scene/run:
        post:
            description: |-
                Use the `run-provided-scene` endpoint with one of:
                ```mozart_client
                mozart_client.run_provided_scene()
                ```
                ```mozart_api
                mozart_api.run_provided_scene()
                ```
                ```scenes_api
                scenes_api.run_provided_scene()
                ```
            operationId: run-provided-scene
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SceneProperties'
                description: The scene you want to run
                required: true
            responses:
                '204':
                    description: Successful request
            summary: Run provided scene
            tags:
            - Scenes
            - mozart
    /api/v1/scene/{id}:
        delete:
            description: |-
                Use the `delete-scene` endpoint with one of:
                ```mozart_client
                mozart_client.delete_scene()
                ```
                ```mozart_api
                mozart_api.delete_scene()
                ```
                ```scenes_api
                scenes_api.delete_scene()
                ```
            operationId: delete-scene
            responses:
                '204':
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Could not find scene
            summary: Remove scene. Can only remove user defined scenes
            tags:
            - Scenes
            - mozart
        get:
            description: |-
                Use the `get-scene` endpoint with one of:
                ```mozart_client
                mozart_client.get_scene()
                ```
                ```mozart_api
                mozart_api.get_scene()
                ```
                ```scenes_api
                scenes_api.get_scene()
                ```
            operationId: get-scene
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Scene'
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request can't convert id to UUID
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Could not find scene
            summary: Returns a single scene
            tags:
            - Scenes
            - mozart
        parameters:
        -   description: ID of the scene
            in: path
            name: id
            required: true
            schema:
                format: uuid
                type: string
        put:
            description: |-
                Use the `put-modify-scene` endpoint with one of:
                ```mozart_client
                mozart_client.put_modify_scene()
                ```
                ```mozart_api
                mozart_api.put_modify_scene()
                ```
                ```scenes_api
                scenes_api.put_modify_scene()
                ```
            operationId: put-modify-scene
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SceneProperties'
                description: The updated scene
                required: true
            responses:
                '204':
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request can't convert id to UUID
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Could not find scene
            summary: Modify a scene
            tags:
            - Scenes
            - mozart
    /api/v1/scene/{id}/trigger:
        post:
            description: |-
                Use the `post-scene-trigger` endpoint with one of:
                ```mozart_client
                mozart_client.post_scene_trigger()
                ```
                ```mozart_api
                mozart_api.post_scene_trigger()
                ```
                ```scenes_api
                scenes_api.post_scene_trigger()
                ```
            operationId: post-scene-trigger
            parameters:
            -   description: ID of the scene
                in: path
                name: id
                required: true
                schema:
                    format: uuid
                    type: string
            responses:
                '204':
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request can't convert id to UUID
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Could not find scene
            summary: Trigger a specific scene
            tags:
            - Scenes
            - mozart
    /api/v1/scenes:
        get:
            description: |-
                Use the `get-all-scenes` endpoint with one of:
                ```mozart_client
                mozart_client.get_all_scenes()
                ```
                ```mozart_api
                mozart_api.get_all_scenes()
                ```
                ```scenes_api
                scenes_api.get_all_scenes()
                ```
            operationId: get-all-scenes
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SceneMap'
                    description: Successful request
            summary: Returns a list of configured scenes
            tags:
            - Scenes
            - mozart
    /api/v1/setup/allowuserdataupload:
        get:
            description: |-
                Use the `get-user-data-upload-allowed` endpoint with one of:
                ```mozart_client
                mozart_client.get_user_data_upload_allowed()
                ```
                ```mozart_api
                mozart_api.get_user_data_upload_allowed()
                ```
                ```settings_api
                settings_api.get_user_data_upload_allowed()
                ```
            operationId: get-user-data-upload-allowed
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDataUpload'
                    description: Settings for automatic upload
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get whether automatic upload of user data to the cloud is currently
                allowed
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-user-data-upload-allowed` endpoint with one of:
                ```mozart_client
                mozart_client.set_user_data_upload_allowed()
                ```
                ```mozart_api
                mozart_api.set_user_data_upload_allowed()
                ```
                ```settings_api
                settings_api.set_user_data_upload_allowed()
                ```
            operationId: set-user-data-upload-allowed
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserDataUpload'
                description: the new user data upload settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDataUpload'
                    description: the new settings were accepted
                '400':
                    description: invalid request
            summary: Sets whether automatic upload of user data to the cloud should
                be allowed
            tags:
            - Settings
            - mozart
    /api/v1/setup/available-countries:
        get:
            description: |-
                Use the `get-setup-countrylist` endpoint with one of:
                ```mozart_client
                mozart_client.get_setup_countrylist()
                ```
                ```mozart_api
                mozart_api.get_setup_countrylist()
                ```
                ```settings_api
                settings_api.get_setup_countrylist()
                ```
            operationId: get-setup-countrylist
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductCountryList'
                    description: the list of available countries
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the list of available countries
            tags:
            - Settings
            - mozart
    /api/v1/setup/available-timezones:
        get:
            description: |-
                Use the `get-setup-timezonelist` endpoint with one of:
                ```mozart_client
                mozart_client.get_setup_timezonelist()
                ```
                ```mozart_api
                mozart_api.get_setup_timezonelist()
                ```
                ```settings_api
                settings_api.get_setup_timezonelist()
                ```
            operationId: get-setup-timezonelist
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductTimeZoneList'
                    description: the list of available timezones
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the list of available timezones
            tags:
            - Settings
            - mozart
    /api/v1/setup/bluetooth/devices:
        get:
            description: |-
                Use the `get-bluetooth-devices-status` endpoint with one of:
                ```mozart_client
                mozart_client.get_bluetooth_devices_status()
                ```
                ```public_api
                public_api.get_bluetooth_devices_status()
                ```
                ```mozart_api
                mozart_api.get_bluetooth_devices_status()
                ```
                ```bluetooth_api
                bluetooth_api.get_bluetooth_devices_status()
                ```
            operationId: get-bluetooth-devices-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BluetoothDeviceList'
                    description: returns the current bluetooth devices
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the bluetooth devices status
            tags:
            - Bluetooth
            - mozart
            - public
    /api/v1/setup/bluetooth/devices/{deviceAddress}:
        delete:
            description: |-
                Use the `unpair-device` endpoint with one of:
                ```mozart_client
                mozart_client.unpair_device()
                ```
                ```mozart_api
                mozart_api.unpair_device()
                ```
                ```bluetooth_api
                bluetooth_api.unpair_device()
                ```
            operationId: unpair-device
            parameters:
            -   description: the bluetooth address of the device to unpair
                in: path
                name: deviceAddress
                required: true
                schema:
                    type: string
            responses:
                '200':
                    description: Successfully unpaired the device.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Unpairs the specified device.
            tags:
            - Bluetooth
            - mozart
    /api/v1/setup/bluetooth/visibility:
        get:
            description: |-
                Use the `get-bluetooth-visibility` endpoint with one of:
                ```mozart_client
                mozart_client.get_bluetooth_visibility()
                ```
                ```mozart_api
                mozart_api.get_bluetooth_visibility()
                ```
                ```bluetooth_api
                bluetooth_api.get_bluetooth_visibility()
                ```
            operationId: get-bluetooth-visibility
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BluetoothVisibility'
                    description: current bluetooth visibility
            summary: gets current bluetooth visibility
            tags:
            - Bluetooth
            - mozart
        put:
            description: |-
                Use the `set-bluetooth-visibility-on` endpoint with one of:
                ```mozart_client
                mozart_client.set_bluetooth_visibility_on()
                ```
                ```mozart_api
                mozart_api.set_bluetooth_visibility_on()
                ```
                ```bluetooth_api
                bluetooth_api.set_bluetooth_visibility_on()
                ```
            operationId: set-bluetooth-visibility-on
            parameters:
            -   description: on or off state for visibility
                in: query
                name: 'on'
                required: false
                schema:
                    type: boolean
            responses:
                '201':
                    description: bluetooth visibility activated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: trigger bluetooth visibility
            tags:
            - Bluetooth
            - mozart
    /api/v1/setup/bootNotificationSound:
        get:
            description: |-
                Use the `get-notification-on-boot` endpoint with one of:
                ```mozart_client
                mozart_client.get_notification_on_boot()
                ```
                ```mozart_api
                mozart_api.get_notification_on_boot()
                ```
                ```settings_api
                settings_api.get_notification_on_boot()
                ```
            operationId: get-notification-on-boot
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotificationOnBoot'
                    description: Settings for notification sound on boot
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get whether notification sounds on boot are enabled (non-GVA
                only)
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-notification-on-boot` endpoint with one of:
                ```mozart_client
                mozart_client.set_notification_on_boot()
                ```
                ```mozart_api
                mozart_api.set_notification_on_boot()
                ```
                ```settings_api
                settings_api.set_notification_on_boot()
                ```
            operationId: set-notification-on-boot
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NotificationOnBoot'
                description: the new notification sound settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NotificationOnBoot'
                    description: the new settings were accepted
                '400':
                    description: invalid request
            summary: Sets whether notification sounds on boot are enabled (non-GVA
                only)
            tags:
            - Settings
            - mozart
    /api/v1/setup/datetime:
        get:
            description: |-
                Use the `get-setup-datetime` endpoint with one of:
                ```mozart_client
                mozart_client.get_setup_datetime()
                ```
                ```mozart_api
                mozart_api.get_setup_datetime()
                ```
                ```settings_api
                settings_api.get_setup_datetime()
                ```
            operationId: get-setup-datetime
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductDateTimeSetup'
                    description: the datetime and timezone configured on the product
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: getting the current datetime and timezone settings
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-setup-datetime` endpoint with one of:
                ```mozart_client
                mozart_client.set_setup_datetime()
                ```
                ```mozart_api
                mozart_api.set_setup_datetime()
                ```
                ```settings_api
                settings_api.set_setup_datetime()
                ```
            operationId: set-setup-datetime
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductDateTimeSetup'
                description: the new datetime and timezone setting
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductDateTimeSetup'
                    description: accepted the updated datetime and timezone settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: setting the current datetime and timezone. currenttime ignored
            tags:
            - Settings
            - mozart
    /api/v1/setup/enableusagereport:
        get:
            description: |-
                Use the `get-usage-report-enabled` endpoint with one of:
                ```mozart_client
                mozart_client.get_usage_report_enabled()
                ```
                ```mozart_api
                mozart_api.get_usage_report_enabled()
                ```
                ```chromecast_api
                chromecast_api.get_usage_report_enabled()
                ```
            operationId: get-usage-report-enabled
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UsageReportEnabled'
                    description: Settings for automatic upload
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get whether automatic upload of usage report to Google is currently
                allowed
            tags:
            - Chromecast
            - mozart
        put:
            description: |-
                Use the `set-usage-report-enabled` endpoint with one of:
                ```mozart_client
                mozart_client.set_usage_report_enabled()
                ```
                ```mozart_api
                mozart_api.set_usage_report_enabled()
                ```
                ```chromecast_api
                chromecast_api.set_usage_report_enabled()
                ```
            operationId: set-usage-report-enabled
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UsageReportEnabled'
                description: the new usage report upload settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UsageReportEnabled'
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Sets whether automatic upload of usage report to Google should
                be allowed
            tags:
            - Chromecast
            - mozart
    /api/v1/setup/environment:
        get:
            description: |-
                get the currently active environment (live, development, integration). This is used to target the device to e.g. use an alternate server
                Use the `get-product-environment` endpoint with one of:
                ```mozart_client
                mozart_client.get_product_environment()
                ```
                ```mozart_api
                mozart_api.get_product_environment()
                ```
                ```settings_api
                settings_api.get_product_environment()
                ```
            operationId: get-product-environment
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductEnvironment'
                    description: The currently active environment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: current active environment
            tags:
            - Settings
            - mozart
        post:
            description: |-
                sets the currently active environment (live, development, integration). This is used to target the device to e.g. use an alternate server
                Use the `set-product-environment` endpoint with one of:
                ```mozart_client
                mozart_client.set_product_environment()
                ```
                ```mozart_api
                mozart_api.set_product_environment()
                ```
                ```settings_api
                settings_api.set_product_environment()
                ```
            operationId: set-product-environment
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductEnvironment'
                description: the changed environment
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductEnvironment'
                    description: The currently active environment after the update
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set current active environment
            tags:
            - Settings
            - mozart
    /api/v1/setup/factoryreset:
        put:
            description: |-
                Use the `post-factory-reset` endpoint with one of:
                ```mozart_client
                mozart_client.post_factory_reset()
                ```
                ```mozart_api
                mozart_api.post_factory_reset()
                ```
                ```settings_api
                settings_api.post_factory_reset()
                ```
            operationId: post-factory-reset
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The device is being factory reset and will reboot
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '500':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failed to factory reset
            summary: Invoke this endpoint to trigger a factory reset.
            tags:
            - Settings
            - mozart
    /api/v1/setup/generator:
        get:
            description: |-
                Use the `get-generator-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_generator_settings()
                ```
                ```mozart_api
                mozart_api.get_generator_settings()
                ```
                ```settings_api
                settings_api.get_generator_settings()
                ```
            operationId: get-generator-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GeneratorSettings'
                    description: The generator settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the generator settings
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-generator-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_generator_settings()
                ```
                ```mozart_api
                mozart_api.set_generator_settings()
                ```
                ```settings_api
                settings_api.set_generator_settings()
                ```
            operationId: set-generator-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GeneratorSettings'
                description: the generator settings
                required: true
            responses:
                '201':
                    description: The generator settings update was accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set the generator settings
            tags:
            - Settings
            - mozart
    /api/v1/setup/linein:
        get:
            description: |-
                Use the `get-linein-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_linein_settings()
                ```
                ```mozart_api
                mozart_api.get_linein_settings()
                ```
                ```linein_api
                linein_api.get_linein_settings()
                ```
            operationId: get-linein-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LineInSettings'
                    description: The linein settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the linein settings
            tags:
            - LineIn
            - mozart
        put:
            description: |-
                Use the `set-linein-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_linein_settings()
                ```
                ```mozart_api
                mozart_api.set_linein_settings()
                ```
                ```linein_api
                linein_api.set_linein_settings()
                ```
            operationId: set-linein-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LineInSettings'
                description: the linein settings
                required: true
            responses:
                '202':
                    description: The linein settings update was accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set the linein settings
            tags:
            - LineIn
            - mozart
    /api/v1/setup/locale:
        get:
            description: |-
                Use the `get-locale` endpoint with one of:
                ```mozart_client
                mozart_client.get_locale()
                ```
                ```mozart_api
                mozart_api.get_locale()
                ```
                ```settings_api
                settings_api.get_locale()
                ```
            operationId: get-locale
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Locale'
                    description: Current locale
            summary: Returns the current locale.
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-locale` endpoint with one of:
                ```mozart_client
                mozart_client.set_locale()
                ```
                ```mozart_api
                mozart_api.set_locale()
                ```
                ```settings_api
                settings_api.set_locale()
                ```
            operationId: set-locale
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Locale'
                description: New locale to apply. E.g. 'da_DK', 'en_US', 'de_DE'
                required: true
            responses:
                '204':
                    description: New locale has been applied.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Change locale.
            tags:
            - Settings
            - mozart
    /api/v1/setup/mode:
        get:
            description: |-
                Use the `get-product-mode` endpoint with one of:
                ```mozart_client
                mozart_client.get_product_mode()
                ```
                ```mozart_api
                mozart_api.get_product_mode()
                ```
                ```settings_api
                settings_api.get_product_mode()
                ```
            operationId: get-product-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductMode'
                    description: Current product mode
            summary: Returns the current product mode. This is for "shop" or "normal"
                mode.
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-product-mode` endpoint with one of:
                ```mozart_client
                mozart_client.set_product_mode()
                ```
                ```mozart_api
                mozart_api.set_product_mode()
                ```
                ```settings_api
                settings_api.set_product_mode()
                ```
            operationId: set-product-mode
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductMode'
                description: New product mode to apply
                required: true
            responses:
                '202':
                    description: |
                        The new product mode was accepted, but may not have been applied yet. Applying the new mode may cause the device to reboot or otherwise become temporarily unavailable.
                '204':
                    description: New product mode applied.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Change product mode. This is for "shop" or "normal" mode.
            tags:
            - Settings
            - mozart
    /api/v1/setup/preset/{id}/restore-default:
        post:
            description: |-
                Use the `restore-preset` endpoint with one of:
                ```mozart_client
                mozart_client.restore_preset()
                ```
                ```mozart_api
                mozart_api.restore_preset()
                ```
                ```settings_api
                settings_api.restore_preset()
                ```
            operationId: restore-preset
            parameters:
            -   description: The id of the preset to restore
                in: path
                name: id
                required: true
                schema:
                    type: integer
            responses:
                '204':
                    description: Restore the preset to factory default
            summary: Restore a single preset to factory default settings
            tags:
            - Settings
            - mozart
    /api/v1/setup/presets:
        get:
            description: |-
                Use the `get-presets` endpoint with one of:
                ```mozart_client
                mozart_client.get_presets()
                ```
                ```public_api
                public_api.get_presets()
                ```
                ```mozart_api
                mozart_api.get_presets()
                ```
                ```settings_api
                settings_api.get_presets()
                ```
            operationId: get-presets
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PresetMap'
                    description: The preset audio source mapping
            summary: Returns the preset configuration
            tags:
            - Settings
            - mozart
            - public
    /api/v1/setup/presets/restore-default:
        post:
            description: |-
                Use the `restore-default-presets` endpoint with one of:
                ```mozart_client
                mozart_client.restore_default_presets()
                ```
                ```mozart_api
                mozart_api.restore_default_presets()
                ```
                ```settings_api
                settings_api.restore_default_presets()
                ```
            operationId: restore-default-presets
            responses:
                '204':
                    description: Successfully restored default presets
            summary: Restore presets to factory default settings
            tags:
            - Settings
            - mozart
    /api/v1/setup/presets/{presetId}/netradio:
        put:
            description: |-
                Use the `set-preset-netradio` endpoint with one of:
                ```mozart_client
                mozart_client.set_preset_netradio()
                ```
                ```mozart_api
                mozart_api.set_preset_netradio()
                ```
                ```settings_api
                settings_api.set_preset_netradio()
                ```
            operationId: set-preset-netradio
            parameters:
            -   description: The key identifying the preset to update
                in: path
                name: presetId
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NetRadioPreset'
                description: The netradio station to store as preset
                required: true
            responses:
                '204':
                    description: Successfully stored netradio preset
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Stores a netradio station as preset
            tags:
            - Settings
            - mozart
    /api/v1/setup/regional:
        get:
            description: |-
                Use the `get-setup-regional` endpoint with one of:
                ```mozart_client
                mozart_client.get_setup_regional()
                ```
                ```mozart_api
                mozart_api.get_setup_regional()
                ```
                ```settings_api
                settings_api.get_setup_regional()
                ```
            operationId: get-setup-regional
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductRegionalSetup'
                    description: the regional settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: getting the regional settings for the product
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-setup-regional` endpoint with one of:
                ```mozart_client
                mozart_client.set_setup_regional()
                ```
                ```mozart_api
                mozart_api.set_setup_regional()
                ```
                ```settings_api
                settings_api.set_setup_regional()
                ```
            operationId: set-setup-regional
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductRegionalSetup'
                description: the new regional settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductRegionalSetup'
                    description: the regional settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: setting the regional settings for the product
            tags:
            - Settings
            - mozart
    /api/v1/setup/remote/home-control-uri:
        get:
            description: |-
                Use the `get-remote-home-control-uri` endpoint with one of:
                ```mozart_client
                mozart_client.get_remote_home_control_uri()
                ```
                ```mozart_api
                mozart_api.get_remote_home_control_uri()
                ```
                ```settings_api
                settings_api.get_remote_home_control_uri()
                ```
            operationId: get-remote-home-control-uri
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HomeControlUri'
                    description: HomeControl dashboard Uri
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the HomeControl dashboard uri
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-remote-home-control-uri` endpoint with one of:
                ```mozart_client
                mozart_client.set_remote_home_control_uri()
                ```
                ```mozart_api
                mozart_api.set_remote_home_control_uri()
                ```
                ```settings_api
                settings_api.set_remote_home_control_uri()
                ```
            operationId: set-remote-home-control-uri
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HomeControlUri'
                description: the new HomeControl dashboard uri
                required: true
            responses:
                '200':
                    description: HomeControl uri updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: change the HomeControl dashboard uri
            tags:
            - Settings
            - mozart
    /api/v1/setup/remote/tv-supported-keys:
        get:
            description: |-
                Use the `get-remote-tv-supported-keys` endpoint with one of:
                ```mozart_client
                mozart_client.get_remote_tv_supported_keys()
                ```
                ```mozart_api
                mozart_api.get_remote_tv_supported_keys()
                ```
                ```settings_api
                settings_api.get_remote_tv_supported_keys()
                ```
            operationId: get-remote-tv-supported-keys
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RemoteSupportedKeysResponse'
                    description: List of Tv source supported commands
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get a list of Tv source supported Beoremote One commands
            tags:
            - Settings
            - mozart
    /api/v1/setup/remote/tv-supported-keys/{key}:
        put:
            description: |-
                Use the `set-remote-tv-supported-key` endpoint with one of:
                ```mozart_client
                mozart_client.set_remote_tv_supported_key()
                ```
                ```mozart_api
                mozart_api.set_remote_tv_supported_key()
                ```
                ```settings_api
                settings_api.set_remote_tv_supported_key()
                ```
            operationId: set-remote-tv-supported-key
            parameters:
            -   description: The key is the name of the command to change
                in: path
                name: key
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RemoteSupportedKeySetting'
                description: The key to change
                required: true
            responses:
                '204':
                    description: Successfully changed the key
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Enable or disable a Tv source command
            tags:
            - Settings
            - mozart
    /api/v1/setup/remotes:
        delete:
            description: |-
                Use the `delete-bluetooth-remote` endpoint with one of:
                ```mozart_client
                mozart_client.delete_bluetooth_remote()
                ```
                ```mozart_api
                mozart_api.delete_bluetooth_remote()
                ```
                ```settings_api
                settings_api.delete_bluetooth_remote()
                ```
            operationId: delete-bluetooth-remote
            parameters:
            -   description: The MAC address of the bluetooth remote to remove
                in: query
                name: deviceAddress
                required: true
                schema:
                    type: string
            responses:
                '200':
                    description: Remote is being removed
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Removes a paired bluetooth remote
            tags:
            - Settings
            - mozart
        get:
            description: |-
                Use the `get-bluetooth-remotes` endpoint with one of:
                ```mozart_client
                mozart_client.get_bluetooth_remotes()
                ```
                ```public_api
                public_api.get_bluetooth_remotes()
                ```
                ```mozart_api
                mozart_api.get_bluetooth_remotes()
                ```
                ```settings_api
                settings_api.get_bluetooth_remotes()
                ```
            operationId: get-bluetooth-remotes
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PairedRemoteResponse'
                    description: List of paired remotes was obtained
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Gets a list of paired bluetooth remotes
            tags:
            - Settings
            - mozart
            - public
    /api/v1/setup/tv/target-latency-offset:
        get:
            description: |-
                If no latency is provided by the tv we try to guess the best latency.
                This allows you to adjust our guess with an offset.

                Use the `get-tv-latency-offset` endpoint with one of:
                ```mozart_client
                mozart_client.get_tv_latency_offset()
                ```
                ```mozart_api
                mozart_api.get_tv_latency_offset()
                ```
                ```settings_api
                settings_api.get_tv_latency_offset()
                ```
            operationId: get-tv-latency-offset
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TvTargetLatencyOffset'
                    description: Target latency offset
            summary: get tv target lacency
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Change tv target latency offset. If no latency is provided by the tv we try
                to guess the best latency. This allows you to adjust our guess with an offset.
                But will have no effect if the TV tell us their latency.

                Use the `put-tv-latency-offset` endpoint with one of:
                ```mozart_client
                mozart_client.put_tv_latency_offset()
                ```
                ```mozart_api
                mozart_api.put_tv_latency_offset()
                ```
                ```settings_api
                settings_api.put_tv_latency_offset()
                ```
            operationId: put-tv-latency-offset
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TvTargetLatencyOffset'
                description: Tv target latency offset
                required: true
            responses:
                '204':
                    description: Successful.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: change tv target latency
            tags:
            - Settings
            - mozart
    /api/v1/setup/voice:
        get:
            description: |-
                Use the `get-voice-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_voice_settings()
                ```
                ```mozart_api
                mozart_api.get_voice_settings()
                ```
                ```settings_api
                settings_api.get_voice_settings()
                ```
            operationId: get-voice-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VoiceSettings'
                    description: The voice settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the voice settings
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-voice-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_voice_settings()
                ```
                ```mozart_api
                mozart_api.set_voice_settings()
                ```
                ```settings_api
                settings_api.set_voice_settings()
                ```
            operationId: set-voice-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VoiceSettings'
                description: the voice settings
                required: true
            responses:
                '201':
                    description: The voice settings update was accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set the voice settings
            tags:
            - Settings
            - mozart
    /api/v1/softwareupdate:
        get:
            description: |-
                Use the `get-softwareupdate-status` endpoint with one of:
                ```mozart_client
                mozart_client.get_softwareupdate_status()
                ```
                ```public_api
                public_api.get_softwareupdate_status()
                ```
                ```mozart_api
                mozart_api.get_softwareupdate_status()
                ```
                ```software update_api
                software update_api.get_softwareupdate_status()
                ```
            operationId: get-softwareupdate-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoftwareUpdateStatus'
                    description: the software update status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current software update status
            tags:
            - Software update
            - mozart
            - public
    /api/v1/softwareupdate/settings:
        get:
            description: |-
                Use the `get-softwareupdate-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_softwareupdate_settings()
                ```
                ```mozart_api
                mozart_api.get_softwareupdate_settings()
                ```
                ```software update_api
                software update_api.get_softwareupdate_settings()
                ```
            operationId: get-softwareupdate-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoftwareUpdateSettings'
                    description: the software update settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current software update settings
            tags:
            - Software update
            - mozart
        put:
            description: |-
                Use the `set-softwareupdate-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_softwareupdate_settings()
                ```
                ```mozart_api
                mozart_api.set_softwareupdate_settings()
                ```
                ```software update_api
                software update_api.set_softwareupdate_settings()
                ```
            operationId: set-softwareupdate-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SoftwareUpdateSettings'
                description: the software update settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoftwareUpdateSettings'
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: sets the current software update settings
            tags:
            - Software update
            - mozart
    /api/v1/softwareupdate/{swupdatecommand}:
        post:
            description: |-
                Use the `post-softwareupdate-command` endpoint with one of:
                ```mozart_client
                mozart_client.post_softwareupdate_command()
                ```
                ```mozart_api
                mozart_api.post_softwareupdate_command()
                ```
                ```software update_api
                software update_api.post_softwareupdate_command()
                ```
            operationId: post-softwareupdate-command
            parameters:
            -   description: the named command to execute
                in: path
                name: swupdatecommand
                required: true
                schema:
                    enum:
                    - download
                    - install
                    type: string
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: triggers a software update action
            tags:
            - Software update
            - mozart
    /api/v1/sound/features:
        get:
            description: |-
                Use the `get-sound-features` endpoint with one of:
                ```mozart_client
                mozart_client.get_sound_features()
                ```
                ```mozart_api
                mozart_api.get_sound_features()
                ```
                ```sound_api
                sound_api.get_sound_features()
                ```
            operationId: get-sound-features
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SupportedSoundFeatures'
                    description: Supported sound features
            summary: |
                Get available sound features
                that match the current role (standalone or multichannel).
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes:
        get:
            description: |-
                Use the `get-listening-mode-set` endpoint with one of:
                ```mozart_client
                mozart_client.get_listening_mode_set()
                ```
                ```mozart_api
                mozart_api.get_listening_mode_set()
                ```
                ```sound_api
                sound_api.get_listening_mode_set()
                ```
            operationId: get-listening-mode-set
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListeningModeSet'
                    description: the list of listening modes
            summary: |
                Get available listening modes that match the current role
                (standalone or multichannel).
            tags:
            - Sound
            - mozart
        post:
            description: |-
                Use the `create-listening-mode` endpoint with one of:
                ```mozart_client
                mozart_client.create_listening_mode()
                ```
                ```mozart_api
                mozart_api.create_listening_mode()
                ```
                ```sound_api
                sound_api.create_listening_mode()
                ```
            operationId: create-listening-mode
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NewListeningMode'
            responses:
                '201':
                    content:
                        application/json:
                            example:
                                href: /api/v1/sound/listening-modes/42
                            schema:
                                $ref: '#/components/schemas/NewResource'
                    description: The listening mode has been successfully created
                '400':
                    $ref: '#/components/responses/BadListeningMode'
            summary: Create a new listening mode
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes/active:
        get:
            description: |-
                Use the `get-active-listening-mode` endpoint with one of:
                ```mozart_client
                mozart_client.get_active_listening_mode()
                ```
                ```mozart_api
                mozart_api.get_active_listening_mode()
                ```
                ```sound_api
                sound_api.get_active_listening_mode()
                ```
            operationId: get-active-listening-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListeningModeRef'
                    description: the active listening mode
            summary: Get the active listening mode
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes/reset:
        post:
            description: |-
                Use the `reset-all-listening-modes` endpoint with one of:
                ```mozart_client
                mozart_client.reset_all_listening_modes()
                ```
                ```mozart_api
                mozart_api.reset_all_listening_modes()
                ```
                ```sound_api
                sound_api.reset_all_listening_modes()
                ```
            operationId: reset-all-listening-modes
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListeningModeSet'
                    description: The list of listening modes after reset
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot reset listening modes
            summary: Remove all user created and reintroduce all default listening
                modes
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes/{id}:
        delete:
            description: |-
                Use the `delete-listening-mode` endpoint with one of:
                ```mozart_client
                mozart_client.delete_listening_mode()
                ```
                ```mozart_api
                mozart_api.delete_listening_mode()
                ```
                ```sound_api
                sound_api.delete_listening_mode()
                ```
            operationId: delete-listening-mode
            responses:
                '204':
                    description: Listening mode deleted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot delete listening mode
                '404':
                    $ref: '#/components/responses/MissingListeningMode'
            summary: Delete a specific listening mode
            tags:
            - Sound
            - mozart
        get:
            description: |-
                Use the `get-listening-mode` endpoint with one of:
                ```mozart_client
                mozart_client.get_listening_mode()
                ```
                ```mozart_api
                mozart_api.get_listening_mode()
                ```
                ```sound_api
                sound_api.get_listening_mode()
                ```
            operationId: get-listening-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListeningMode'
                    description: Listening mode
                '404':
                    $ref: '#/components/responses/MissingListeningMode'
            summary: Get specific listening mode
            tags:
            - Sound
            - mozart
        parameters:
        -   $ref: '#/components/parameters/ListeningModeID'
        put:
            description: |-
                Use the `update-listening-mode` endpoint with one of:
                ```mozart_client
                mozart_client.update_listening_mode()
                ```
                ```mozart_api
                mozart_api.update_listening_mode()
                ```
                ```sound_api
                sound_api.update_listening_mode()
                ```
            operationId: update-listening-mode
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ListeningModeUpdate'
            responses:
                '204':
                    description: Listening mode updated
                '400':
                    $ref: '#/components/responses/BadListeningMode'
                '404':
                    $ref: '#/components/responses/MissingListeningMode'
            summary: Update a specific listening mode
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes/{id}/activate:
        parameters:
        -   $ref: '#/components/parameters/ListeningModeID'
        post:
            description: |-
                Use the `activate-listening-mode` endpoint with one of:
                ```mozart_client
                mozart_client.activate_listening_mode()
                ```
                ```mozart_api
                mozart_api.activate_listening_mode()
                ```
                ```sound_api
                sound_api.activate_listening_mode()
                ```
            operationId: activate-listening-mode
            responses:
                '204':
                    description: Listening mode active
                '404':
                    $ref: '#/components/responses/MissingListeningMode'
            summary: Activate a listening mode
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes/{id}/reset:
        parameters:
        -   $ref: '#/components/parameters/ListeningModeID'
        post:
            description: |-
                Use the `reset-listening-mode` endpoint with one of:
                ```mozart_client
                mozart_client.reset_listening_mode()
                ```
                ```mozart_api
                mozart_api.reset_listening_mode()
                ```
                ```sound_api
                sound_api.reset_listening_mode()
                ```
            operationId: reset-listening-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListeningMode'
                    description: The reset listening mode
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot reset listening mode
                '404':
                    $ref: '#/components/responses/MissingListeningMode'
            summary: Reset an edited-default listening mode
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings:
        get:
            description: |-
                Use the `get-sound-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_sound_settings()
                ```
                ```mozart_api
                mozart_api.get_sound_settings()
                ```
                ```sound_api
                sound_api.get_sound_settings()
                ```
            operationId: get-sound-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoundSettings'
                    description: sound settings returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the sound settings
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments:
        get:
            description: |-
                Use the `get-sound-settings-adjustments` endpoint with one of:
                ```mozart_client
                mozart_client.get_sound_settings_adjustments()
                ```
                ```mozart_api
                mozart_api.get_sound_settings_adjustments()
                ```
                ```sound_api
                sound_api.get_sound_settings_adjustments()
                ```
            operationId: get-sound-settings-adjustments
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoundAdjustments'
                    description: sound settings adjustments returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the sound settings adjustments
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/ambience:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-ambience` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_ambience()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_ambience()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_ambience()
                ```
            operationId: set-sound-settings-adjustments-ambience
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Ambience'
                description: the ambience
                required: true
            responses:
                '201':
                    description: accepted the ambience sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: update the sound settings adjustments for ambience
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/balance:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-balance` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_balance()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_balance()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_balance()
                ```
            operationId: set-sound-settings-adjustments-balance
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Balance'
                description: the balance
                required: true
            responses:
                '201':
                    description: accepted the balance adjustment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set balance adjustment
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/bass:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-bass` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_bass()
                ```
                ```public_api
                public_api.set_sound_settings_adjustments_bass()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_bass()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_bass()
                ```
            operationId: set-sound-settings-adjustments-bass
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Bass'
                description: the bass level
                required: true
            responses:
                '201':
                    description: accepted the bass sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: update the sound settings adjustments for bass
            tags:
            - Sound
            - mozart
            - public
    /api/v1/sound/settings/adjustments/bass-management:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-bass-management` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_bass_management()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_bass_management()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_bass_management()
                ```
            operationId: set-sound-settings-adjustments-bass-management
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BassManagement'
                description: the bass-management
                required: true
            responses:
                '201':
                    description: accepted the bass-management adjustment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set bass management
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/compression:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-compression` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_compression()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_compression()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_compression()
                ```
            operationId: set-sound-settings-adjustments-compression
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Compression'
                description: the compression level
                required: true
            responses:
                '201':
                    description: accepted the compression adjustment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set compression
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/directivity:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-directivity` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_directivity()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_directivity()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_directivity()
                ```
            operationId: set-sound-settings-adjustments-directivity
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Directivity'
                description: the directivity
                required: true
            responses:
                '201':
                    description: accepted the directivity sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: update the sound settings adjustments for directivity
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/fadein:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-fade-in` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_fade_in()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_fade_in()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_fade_in()
                ```
            operationId: set-sound-settings-adjustments-fade-in
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/FadeIn'
                description: state of fade-in of audio playback
                required: true
            responses:
                '201':
                    description: accepted the fade-in settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: update the sound settings enable/disable fade-in of audio
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/fader:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-fader` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_fader()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_fader()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_fader()
                ```
            operationId: set-sound-settings-adjustments-fader
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Fader'
                description: the fader
                required: true
            responses:
                '201':
                    description: accepted the fader adjustment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set fader adjustment
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/loudness:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-loudness` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_loudness()
                ```
                ```public_api
                public_api.set_sound_settings_adjustments_loudness()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_loudness()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_loudness()
                ```
            operationId: set-sound-settings-adjustments-loudness
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Loudness'
                description: the loudness mode
                required: true
            responses:
                '201':
                    description: accepted the loudness sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: update the sound settings adjustments for loudness
            tags:
            - Sound
            - mozart
            - public
    /api/v1/sound/settings/adjustments/spatial-envelopment:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-spatial-envelopment` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_spatial_envelopment()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_spatial_envelopment()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_spatial_envelopment()
                ```
            operationId: set-sound-settings-adjustments-spatial-envelopment
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpatialEnvelopment'
                description: the spatial-envelopment
                required: true
            responses:
                '201':
                    description: accepted the spatial-envelopment adjustment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set spatial envelopment
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/spatial-height:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-spatial-height` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_spatial_height()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_spatial_height()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_spatial_height()
                ```
            operationId: set-sound-settings-adjustments-spatial-height
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpatialHeight'
                description: the spatial-height
                required: true
            responses:
                '201':
                    description: accepted the spatial-height adjustment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set spatial height
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/spatial-processing:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-spatial-processing` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_spatial_processing()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_spatial_processing()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_spatial_processing()
                ```
            operationId: set-sound-settings-adjustments-spatial-processing
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpatialProcessing'
                description: the spatial-processing
                required: true
            responses:
                '201':
                    description: accepted the spatial-processing adjustment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set spatial processing
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/spatial-surround:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-spatial-surround` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_spatial_surround()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_spatial_surround()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_spatial_surround()
                ```
            operationId: set-sound-settings-adjustments-spatial-surround
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpatialSurround'
                description: the spatial-surround
                required: true
            responses:
                '201':
                    description: accepted the spatial-surround adjustment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set spatial surraond
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/spatial-width:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-spatial-width` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_spatial_width()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_spatial_width()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_spatial_width()
                ```
            operationId: set-sound-settings-adjustments-spatial-width
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpatialWidth'
                description: the spatial-width
                required: true
            responses:
                '201':
                    description: accepted the spatial-width adjustment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set spatial width
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/speech-enhance:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-speech-enhance` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_speech_enhance()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_speech_enhance()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_speech_enhance()
                ```
            operationId: set-sound-settings-adjustments-speech-enhance
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeechEnhance'
                description: the speech-enhance
                required: true
            responses:
                '201':
                    description: accepted the speech-enhance adjustment
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set speech enhance
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/treble:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-treble` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_adjustments_treble()
                ```
                ```public_api
                public_api.set_sound_settings_adjustments_treble()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_adjustments_treble()
                ```
                ```sound_api
                sound_api.set_sound_settings_adjustments_treble()
                ```
            operationId: set-sound-settings-adjustments-treble
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Treble'
                description: the treble level
                required: true
            responses:
                '201':
                    description: accepted the treble sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: update the sound settings adjustments for treble
            tags:
            - Sound
            - mozart
            - public
    /api/v1/sound/settings/roomCompensation:
        delete:
            description: |-
                Use the `stop-sound-settings-room-compensation` endpoint with one of:
                ```mozart_client
                mozart_client.stop_sound_settings_room_compensation()
                ```
                ```mozart_api
                mozart_api.stop_sound_settings_room_compensation()
                ```
                ```sound_api
                sound_api.stop_sound_settings_room_compensation()
                ```
            operationId: stop-sound-settings-room-compensation
            responses:
                '202':
                    description: Room compensation stopping
            summary: stop the room compensation and delete all ongoing measurements
            tags:
            - Sound
            - mozart
        get:
            description: |-
                Use the `get-sound-settings-room-compensation` endpoint with one of:
                ```mozart_client
                mozart_client.get_sound_settings_room_compensation()
                ```
                ```mozart_api
                mozart_api.get_sound_settings_room_compensation()
                ```
                ```sound_api
                sound_api.get_sound_settings_room_compensation()
                ```
            operationId: get-sound-settings-room-compensation
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RoomCompensationInfo'
                    description: sound settings room-compensation returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the sound setting room compensation
            tags:
            - Sound
            - mozart
        put:
            description: |-
                Use the `start-sound-settings-room-compensation` endpoint with one of:
                ```mozart_client
                mozart_client.start_sound_settings_room_compensation()
                ```
                ```mozart_api
                mozart_api.start_sound_settings_room_compensation()
                ```
                ```sound_api
                sound_api.start_sound_settings_room_compensation()
                ```
            operationId: start-sound-settings-room-compensation
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RoomCompensationProperties'
                description: Configuration of the room compensation.
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RoomCompensationInfo'
                    description: the room-compensation is started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: wrong roomCompensation type, microphone switch muted
                        or placement and charger requirement isn't fulfilled
            summary: start the room-compensation
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/roomcompensation/debug:
        put:
            description: |-
                Use the `set-sound-settings-room-compensation-debug` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_room_compensation_debug()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_room_compensation_debug()
                ```
                ```sound_api
                sound_api.set_sound_settings_room_compensation_debug()
                ```
            operationId: set-sound-settings-room-compensation-debug
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RoomCompensationDebug'
                description: room-compensation debug
                required: true
            responses:
                '200':
                    description: room-compensation debug enabled or disabled
                '500':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: internal error
            summary: enable or disable room-compensation debug mode
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/roomcompensation/enable:
        put:
            description: |-
                Use the `set-sound-settings-roomcompensation` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_settings_roomcompensation()
                ```
                ```mozart_api
                mozart_api.set_sound_settings_roomcompensation()
                ```
                ```sound_api
                sound_api.set_sound_settings_roomcompensation()
                ```
            operationId: set-sound-settings-roomcompensation
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RoomCompensationEnabled'
                description: the room compensation mode
                required: true
            responses:
                '201':
                    description: accepted the room compensation sound setting
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: failure enabling room compensation or placement and
                        charger requirement isn't fulfilled
            summary: enable/disable calculated room compensation
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/toneTouch:
        get:
            description: |-
                Use the `get-sound-settings-tonetouch` endpoint with one of:
                ```mozart_client
                mozart_client.get_sound_settings_tonetouch()
                ```
                ```mozart_api
                mozart_api.get_sound_settings_tonetouch()
                ```
                ```sound_api
                sound_api.get_sound_settings_tonetouch()
                ```
            operationId: get-sound-settings-tonetouch
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoundToneTouch'
                    description: sound settings tonetouch returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the sound settings tone touch
            tags:
            - Sound
            - mozart
        put:
            description: |-
                Use the `set-tone-touch-values` endpoint with one of:
                ```mozart_client
                mozart_client.set_tone_touch_values()
                ```
                ```mozart_api
                mozart_api.set_tone_touch_values()
                ```
                ```sound_api
                sound_api.set_tone_touch_values()
                ```
            operationId: set-tone-touch-values
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SoundToneTouch'
                description: The tone touch values to apply
                required: true
            responses:
                '201':
                    description: tone touch values accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request (e.g. values cannot be set)
            summary: set the sound settings tone touch
            tags:
            - Sound
            - mozart
    /api/v1/sound/speaker-preset/active:
        get:
            description: |-
                Use the `get-sound-speaker-preset-active` endpoint with one of:
                ```mozart_client
                mozart_client.get_sound_speaker_preset_active()
                ```
                ```mozart_api
                mozart_api.get_sound_speaker_preset_active()
                ```
                ```sound_api
                sound_api.get_sound_speaker_preset_active()
                ```
            operationId: get-sound-speaker-preset-active
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerPresetActive'
                    description: speakerPreset identifier (or none)
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: current selected speaker-preset id (or none)
            tags:
            - Sound
            - mozart
    /api/v1/sound/speaker-preset/config:
        get:
            description: |-
                Use the `get-sound-speaker-preset` endpoint with one of:
                ```mozart_client
                mozart_client.get_sound_speaker_preset()
                ```
                ```mozart_api
                mozart_api.get_sound_speaker_preset()
                ```
                ```sound_api
                sound_api.get_sound_speaker_preset()
                ```
            operationId: get-sound-speaker-preset
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerPresetList'
                    description: presets returned
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: map power-link speakerPreset to soundDirection
            tags:
            - Sound
            - mozart
        put:
            description: |-
                Use the `set-sound-speaker-preset` endpoint with one of:
                ```mozart_client
                mozart_client.set_sound_speaker_preset()
                ```
                ```mozart_api
                mozart_api.set_sound_speaker_preset()
                ```
                ```sound_api
                sound_api.set_sound_speaker_preset()
                ```
            operationId: set-sound-speaker-preset
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerPresetList'
                description: map speakerPreset to soundDirection
                required: true
            responses:
                '201':
                    description: accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: map power-link speakerPreset to soundDirection
            tags:
            - Sound
            - mozart
    /api/v1/sound/speakergroup:
        post:
            description: |-
                Use the `post-speakergroup` endpoint with one of:
                ```mozart_client
                mozart_client.post_speakergroup()
                ```
                ```mozart_api
                mozart_api.post_speakergroup()
                ```
                ```speakergroup_api
                speakergroup_api.post_speakergroup()
                ```
            operationId: post-speakergroup
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerGroup'
                description: Friendly name and optionally speaker group data for the
                    new speaker group.
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerGroup'
                    description: Speaker group added successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot add speaker group
            summary: Add a new speaker group
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/speakergroup/active:
        get:
            description: |-
                Use the `get-speakergroup-active` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakergroup_active()
                ```
                ```mozart_api
                mozart_api.get_speakergroup_active()
                ```
                ```speakergroup_api
                speakergroup_api.get_speakergroup_active()
                ```
            operationId: get-speakergroup-active
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerGroupOverview'
                    description: The active speaker group, or empty if none
            summary: Get the active speaker group
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/speakergroup/{id}:
        delete:
            description: |-
                Delete the speaker group with given id.
                If the active speaker group is deleted, the first speaker group in the list will
                automatically be made active.

                Use the `delete-speakergroup` endpoint with one of:
                ```mozart_client
                mozart_client.delete_speakergroup()
                ```
                ```mozart_api
                mozart_api.delete_speakergroup()
                ```
                ```speakergroup_api
                speakergroup_api.delete_speakergroup()
                ```
            operationId: delete-speakergroup
            parameters:
            -   description: ID of speaker group to delete
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/SpeakerGroupId'
            responses:
                '200':
                    description: Speaker group deleted successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Speaker group not found (invalid request)
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Speaker group is not deletable
            summary: Delete speaker group
            tags:
            - SpeakerGroup
            - mozart
        get:
            description: |-
                Use the `get-speakergroup` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakergroup()
                ```
                ```mozart_api
                mozart_api.get_speakergroup()
                ```
                ```speakergroup_api
                speakergroup_api.get_speakergroup()
                ```
            operationId: get-speakergroup
            parameters:
            -   description: ID of the speaker group to get
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/SpeakerGroupId'
            -   description: Show all speakers (also disabled)
                in: query
                name: show-all
                required: false
                schema:
                    type: boolean
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerGroup'
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Speaker group with the given ID doesn't exist
            summary: Get the speaker group with the given id
            tags:
            - SpeakerGroup
            - mozart
        put:
            description: |-
                Use the `modify-speakergroup` endpoint with one of:
                ```mozart_client
                mozart_client.modify_speakergroup()
                ```
                ```mozart_api
                mozart_api.modify_speakergroup()
                ```
                ```speakergroup_api
                speakergroup_api.modify_speakergroup()
                ```
            operationId: modify-speakergroup
            parameters:
            -   description: ID of the speaker group to modify
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/SpeakerGroupId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerGroup'
                description: Settings for given speaker group. Multiple settings can
                    be applied at once.
                required: true
            responses:
                '202':
                    description: speaker group update in process
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't update speaker groups
            summary: Modify speaker group with given id
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/speakergroup/{id}/activate:
        post:
            description: |-
                Use the `post-speakergroup-activate` endpoint with one of:
                ```mozart_client
                mozart_client.post_speakergroup_activate()
                ```
                ```mozart_api
                mozart_api.post_speakergroup_activate()
                ```
                ```speakergroup_api
                speakergroup_api.post_speakergroup_activate()
                ```
            operationId: post-speakergroup-activate
            parameters:
            -   description: ID of the speaker group to activate
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/SpeakerGroupId'
            responses:
                '204':
                    description: Active speaker group updated successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't update active speaker group
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Speaker group with the given ID doesn't exist
            summary: Set active speaker group
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/speakergroups:
        get:
            description: |-
                Use the `get-speakergroups` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakergroups()
                ```
                ```mozart_api
                mozart_api.get_speakergroups()
                ```
                ```speakergroup_api
                speakergroup_api.get_speakergroups()
                ```
            operationId: get-speakergroups
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerGroupList'
                    description: The speaker group list
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get list of configured speaker groups
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/supported-speaker-roles:
        get:
            description: |-
                Use the `get-supported-speaker-roles` endpoint with one of:
                ```mozart_client
                mozart_client.get_supported_speaker_roles()
                ```
                ```mozart_api
                mozart_api.get_supported_speaker_roles()
                ```
                ```speakergroup_api
                speakergroup_api.get_supported_speaker_roles()
                ```
            operationId: get-supported-speaker-roles
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerRoles'
                    description: An array with all supported speaker roles
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the supported speaker roles
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/volume:
        get:
            description: |-
                Use the `get-current-volume` endpoint with one of:
                ```mozart_client
                mozart_client.get_current_volume()
                ```
                ```mozart_api
                mozart_api.get_current_volume()
                ```
                ```sound_api
                sound_api.get_current_volume()
                ```
            operationId: get-current-volume
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VolumeState'
                    description: The currently active volume
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: get the current volume state
            tags:
            - Sound
            - mozart
    /api/v1/sound/volume/level:
        put:
            description: |-
                Use the `set-current-volume-level` endpoint with one of:
                ```mozart_client
                mozart_client.set_current_volume_level()
                ```
                ```public_api
                public_api.set_current_volume_level()
                ```
                ```mozart_api
                mozart_api.set_current_volume_level()
                ```
                ```sound_api
                sound_api.set_current_volume_level()
                ```
            operationId: set-current-volume-level
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VolumeLevel'
                description: The volume level to apply
                required: true
            responses:
                '201':
                    description: volume level change accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request (e.g. volume cannot be set)
            summary: set the current volume level
            tags:
            - Sound
            - mozart
            - public
    /api/v1/sound/volume/mute:
        put:
            description: |-
                Use the `set-volume-mute` endpoint with one of:
                ```mozart_client
                mozart_client.set_volume_mute()
                ```
                ```public_api
                public_api.set_volume_mute()
                ```
                ```mozart_api
                mozart_api.set_volume_mute()
                ```
                ```sound_api
                sound_api.set_volume_mute()
                ```
            operationId: set-volume-mute
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VolumeMute'
                description: The mute state to apply
                required: true
            responses:
                '201':
                    description: volume mute state accepted
                '400':
                    description: volume mute not accepted
            summary: set the volume mute state
            tags:
            - Sound
            - mozart
            - public
    /api/v1/sound/volume/settings:
        get:
            description: |-
                Use the `get-volume-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_volume_settings()
                ```
                ```public_api
                public_api.get_volume_settings()
                ```
                ```mozart_api
                mozart_api.get_volume_settings()
                ```
                ```sound_api
                sound_api.get_volume_settings()
                ```
            operationId: get-volume-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VolumeSettings'
                    description: returns the volume settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: |
                Get the current volume settings for default and maximum volume level
            tags:
            - Sound
            - mozart
            - public
        put:
            description: |-
                Use the `set-volume-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_volume_settings()
                ```
                ```public_api
                public_api.set_volume_settings()
                ```
                ```mozart_api
                mozart_api.set_volume_settings()
                ```
                ```sound_api
                sound_api.set_volume_settings()
                ```
            operationId: set-volume-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VolumeSettings'
                description: The settings to apply
                required: true
            responses:
                '201':
                    description: volume settings accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: |
                Set the current volume settings for default and maximum volume level
            tags:
            - Sound
            - mozart
            - public
    /api/v1/speakerlink/channel:
        get:
            description: |-
                Returns the current audio channel this speaker will play.

                Use the `get-speakerlink-channel` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakerlink_channel()
                ```
                ```mozart_api
                mozart_api.get_speakerlink_channel()
                ```
                ```speakerlink_api
                speakerlink_api.get_speakerlink_channel()
                ```
            operationId: get-speakerlink-channel
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerLinkChannel'
                    description: Current audio channel
            summary: Assigned channel
            tags:
            - SpeakerLink
            - mozart
        put:
            description: |-
                Changes the assigned audio channel this speaker will play.

                Use the `set-speakerlink-channel` endpoint with one of:
                ```mozart_client
                mozart_client.set_speakerlink_channel()
                ```
                ```mozart_api
                mozart_api.set_speakerlink_channel()
                ```
                ```speakerlink_api
                speakerlink_api.set_speakerlink_channel()
                ```
            operationId: set-speakerlink-channel
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerLinkChannel'
                required: true
            responses:
                '202':
                    description: Channel change in progress
                '400':
                    description: Missing/unknown channel
            summary: Change assigned channel
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/format:
        get:
            description: |-
                Returns the currently used SpeakerLink streaming format.

                Use the `get-speakerlink-format` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakerlink_format()
                ```
                ```mozart_api
                mozart_api.get_speakerlink_format()
                ```
                ```speakerlink_api
                speakerlink_api.get_speakerlink_format()
                ```
            operationId: get-speakerlink-format
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerLinkFormat'
                    description: Format
            summary: Get SpeakerLink streaming format
            tags:
            - SpeakerLink
            - mozart
        put:
            description: |-
                Changes the SpeakerLink streaming format. If you have a problem-free
                wireless environment, use uncompressed 24-bit LPCM (`pcm` format name).
                In situations with crowded wireless environment, use the high quality
                compressed LC3+ format (`lc3plus`)

                Use the `set-speakerlink-format` endpoint with one of:
                ```mozart_client
                mozart_client.set_speakerlink_format()
                ```
                ```mozart_api
                mozart_api.set_speakerlink_format()
                ```
                ```speakerlink_api
                speakerlink_api.set_speakerlink_format()
                ```
            operationId: set-speakerlink-format
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerLinkFormat'
                required: true
            responses:
                '202':
                    description: Format change in progress
                '400':
                    description: Missing/unknown format
            summary: Set SpeakerLink streaming format
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/network-delay:
        get:
            description: |-
                Returns the currently configured network delay.

                Use the `get-speakerlink-network-delay` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakerlink_network_delay()
                ```
                ```mozart_api
                mozart_api.get_speakerlink_network_delay()
                ```
                ```speakerlink_api
                speakerlink_api.get_speakerlink_network_delay()
                ```
            operationId: get-speakerlink-network-delay
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerLinkNetworkDelay'
                    description: Format
            summary: Get SpeakerLink currently configured network delay in milliseconds.
            tags:
            - SpeakerLink
            - mozart
        put:
            description: |-
                Changes the SpeakerLink network delay.

                Use the `set-speakerlink-network-delay` endpoint with one of:
                ```mozart_client
                mozart_client.set_speakerlink_network_delay()
                ```
                ```mozart_api
                mozart_api.set_speakerlink_network_delay()
                ```
                ```speakerlink_api
                speakerlink_api.set_speakerlink_network_delay()
                ```
            operationId: set-speakerlink-network-delay
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SpeakerLinkNetworkDelay'
                required: true
            responses:
                '202':
                    description: Network delay change in progress
                '400':
                    description: Value is out of bounds
            summary: Set SpeakerLink network delay in milliseconds.
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/peers:
        get:
            description: |-
                Returns a list of speakers that this speaker can be combined with to
                form a multi-channel setup.

                Use the `get-speakerlink-peers` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakerlink_peers()
                ```
                ```mozart_api
                mozart_api.get_speakerlink_peers()
                ```
                ```speakerlink_api
                speakerlink_api.get_speakerlink_peers()
                ```
            operationId: get-speakerlink-peers
            responses:
                '200':
                    content:
                        application/json:
                            example: |
                                [
                                  {
                                    "baseUrl": "http://192.168.0.101",
                                    "ipAddress": "192.168.0.101",
                                    "serialNumber": "12345678"
                                  }
                                ]
                            schema:
                                items:
                                    $ref: '#/components/schemas/SpeakerLinkPeer'
                                type: array
                    description: Compatible multi-channel peers
            summary: Potential secondary speakers
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/psk:
        get:
            description: |-
                Returns the SpeakerLink multi-channel AP password.

                Use the `get-speakerlink-psk` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakerlink_psk()
                ```
                ```mozart_api
                mozart_api.get_speakerlink_psk()
                ```
                ```speakerlink_api
                speakerlink_api.get_speakerlink_psk()
                ```
            operationId: get-speakerlink-psk
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerLinkPSK'
                    description: AP password
            summary: Get SpeakerLink AP password
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/role:
        get:
            description: |-
                Speakers that are not part of a multi-channel setup will return:

                ```json
                {
                  "role": "none",
                  "desired": "none"
                }
                ```

                Primary multi-channel speakers will return something like:

                ```json
                {
                  "role": "primary",
                  "desired": "primary",
                  "channel": "left"
                }
                ```

                Secondary multi-channel speakers will return something like:

                ```json
                {
                  "role": "secondary",
                  "desired": "secondary",
                  "primary": "12345678",
                  "channel": "right"
                }
                ```

                Secondary multi-channel speakers that are in progress of being setup:

                ```json
                {
                  "role": "none",
                  "desired": "secondary",
                  "primary": "12345678",
                  "channel": "right"
                }
                ```

                Use the `get-speakerlink-role` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakerlink_role()
                ```
                ```mozart_api
                mozart_api.get_speakerlink_role()
                ```
                ```speakerlink_api
                speakerlink_api.get_speakerlink_role()
                ```
            operationId: get-speakerlink-role
            responses:
                '200':
                    content:
                        application/json:
                            example: |
                                {
                                  "role": "primary",
                                  "desired": "primary",
                                  "channel":"left"
                                }
                            schema:
                                $ref: '#/components/schemas/SpeakerLinkRole'
                    description: Multi-channel role
            summary: Get multi-channel role
            tags:
            - SpeakerLink
            - mozart
        put:
            description: |-
                Bring a speaker out of a multi-channel setup by using the "none" role:

                ```json
                {
                  "role": "none"
                }
                ```

                Make a speaker the primary in a multi-channel setup by using the
                "primary" role:

                ```json
                {
                  "role": "primary",
                  "channel": "left"
                }
                ```

                You can optionally provide a channel to this speaker should play or you
                can provide that later using the
                [`/api/v1/speakerlink/channel`](#/speakerlink/set-speakerlink-channel) end-point.

                Make a speaker a secondary in a multi-channel setup by using the
                "secondary" role:

                ```json
                {
                  "role": "secondary",
                  "primary": "12345678",
                  "channel": "right"
                }
                ```

                Like primary speakers you can optionally configure the channel now. You
                must provide the serial number of the primary speaker in the
                multi-channel setup the speaker should join.

                Use the `set-speakerlink-role` endpoint with one of:
                ```mozart_client
                mozart_client.set_speakerlink_role()
                ```
                ```mozart_api
                mozart_api.set_speakerlink_role()
                ```
                ```speakerlink_api
                speakerlink_api.set_speakerlink_role()
                ```
            operationId: set-speakerlink-role
            requestBody:
                content:
                    application/json:
                        example: |
                            {
                              "role": "secondary",
                              "primary": "12345678",
                              "channel": "right"
                            }
                        schema:
                            $ref: '#/components/schemas/SpeakerLinkRole'
                required: true
            responses:
                '202':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AsyncResult'
                    description: |
                        Role change in progress.
                '204':
                    description: Current state already matches the requested state.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Requested state is malformed.
            summary: Change multi-channel role
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/secondaries:
        get:
            description: |-
                Returns a list of secondary speakers currently associated with this
                speaker.

                Use the `get-speakerlink-secondaries` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakerlink_secondaries()
                ```
                ```mozart_api
                mozart_api.get_speakerlink_secondaries()
                ```
                ```speakerlink_api
                speakerlink_api.get_speakerlink_secondaries()
                ```
            operationId: get-speakerlink-secondaries
            responses:
                '200':
                    content:
                        application/json:
                            example: |
                                [
                                  {
                                    "baseUrl": "http://192.168.0.101/proxy/12345678",
                                    "ipAddress": ""172.18.128.42",
                                    "serialNumber": "12345678"
                                  }
                                ]
                            schema:
                                items:
                                    $ref: '#/components/schemas/SpeakerLinkSecondary'
                                type: array
                    description: List of secondaries
            summary: Associated secondary speakers
            tags:
            - SpeakerLink
            - mozart
    /api/v1/speakerlink/secondaries/{id}:
        delete:
            description: |-
                Changes the role of a secondary back to "none".

                Use the `remove-speakerlink-secondary` endpoint with one of:
                ```mozart_client
                mozart_client.remove_speakerlink_secondary()
                ```
                ```mozart_api
                mozart_api.remove_speakerlink_secondary()
                ```
                ```speakerlink_api
                speakerlink_api.remove_speakerlink_secondary()
                ```
            operationId: remove-speakerlink-secondary
            responses:
                '202':
                    description: Secondary role change in progress
                '404':
                    description: Secondary does not exist
            summary: Break secondary association
            tags:
            - SpeakerLink
            - mozart
        head:
            operationId: has-speakerlink-secondary
            responses:
                '204':
                    description: Secondary exists
                '404':
                    description: Secondary does not exist
            summary: Secondary status
            tags:
            - SpeakerLink
            - mozart
        parameters:
        -   description: Secondary speaker serial number
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/SerialNumber'
    /api/v1/speakerlink/statisticsserver:
        delete:
            description: |-
                Use the `delete-statistics-server` endpoint with one of:
                ```mozart_client
                mozart_client.delete_statistics_server()
                ```
                ```developer_api
                developer_api.delete_statistics_server()
                ```
                ```mozart_api
                mozart_api.delete_statistics_server()
                ```
            operationId: delete-statistics-server
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: |
                        Disconnection started
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Requested state is malformed.
            summary: Unsets the current statistics server
            tags:
            - mozart
            - Developer
        get:
            description: |-
                Use the `get-statistics-server` endpoint with one of:
                ```mozart_client
                mozart_client.get_statistics_server()
                ```
                ```developer_api
                developer_api.get_statistics_server()
                ```
                ```mozart_api
                mozart_api.get_statistics_server()
                ```
            operationId: get-statistics-server
            responses:
                '200':
                    content:
                        application/json:
                            example: |
                                [
                                  "mqtt://192.168.0.1:1234"
                                ]
                            schema:
                                items:
                                    type: string
                                type: array
                    description: Current statistics server(s)
            summary: Get current server for reporting statistics
            tags:
            - mozart
            - Developer
        put:
            description: |-
                Use the `set-statistics-server` endpoint with one of:
                ```mozart_client
                mozart_client.set_statistics_server()
                ```
                ```developer_api
                developer_api.set_statistics_server()
                ```
                ```mozart_api
                mozart_api.set_statistics_server()
                ```
            operationId: set-statistics-server
            requestBody:
                content:
                    application/json:
                        example: |
                            [
                              "mqtt://192.168.0.1:1234",
                              "mqtts://user:pass@192.168.0.1:8883"
                            ]
                        schema:
                            items:
                                type: string
                            type: array
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: |
                        Connection initialized
                '204':
                    description: Server already set to this value
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Requested state is malformed.
            summary: Set server(s) for reporting statistics. Will overwrite any current
                servers
            tags:
            - mozart
            - Developer
    /api/v1/speakerlink/stats:
        get:
            description: |-
                Use the `get-speakerlink-stats` endpoint with one of:
                ```mozart_client
                mozart_client.get_speakerlink_stats()
                ```
                ```developer_api
                developer_api.get_speakerlink_stats()
                ```
                ```mozart_api
                mozart_api.get_speakerlink_stats()
                ```
            operationId: get-speakerlink-stats
            responses:
                '200':
                    content:
                        text/html:
                            schema:
                                type: string
                    description: HTML page of statistics
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LockedAPI'
                    description: the api is locked and cannot be accessed
            summary: Developer status overview of SpeakerLink statistics
            tags:
            - mozart
            - Developer
    /api/v1/speakers/wireless/wisa/resetpairing:
        put:
            description: |-
                Use the `post-wisa-resetpairing` endpoint with one of:
                ```mozart_client
                mozart_client.post_wisa_resetpairing()
                ```
                ```mozart_api
                mozart_api.post_wisa_resetpairing()
                ```
                ```wisa_api
                wisa_api.post_wisa_resetpairing()
                ```
            operationId: post-wisa-resetpairing
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: Any pairing has been reset and a new pairing is possible
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: WPL source not found
            summary: Invoke this endpoint to trigger reset of any WISA pairing
            tags:
            - Wisa
            - mozart
    /api/v1/speakers/wireless/wisa/settings:
        get:
            description: |-
                Use the `get-wisa-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_wisa_settings()
                ```
                ```mozart_api
                mozart_api.get_wisa_settings()
                ```
                ```wisa_api
                wisa_api.get_wisa_settings()
                ```
            operationId: get-wisa-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WisaSettings'
                    description: the WISA module settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: WPL source not found
            summary: get the current WISA module settings
            tags:
            - Wisa
            - mozart
        put:
            description: |-
                Use the `set-wisa-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_wisa_settings()
                ```
                ```mozart_api
                mozart_api.set_wisa_settings()
                ```
                ```wisa_api
                wisa_api.set_wisa_settings()
                ```
            operationId: set-wisa-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WisaSettings'
                description: the WISA module settings
                required: true
            responses:
                '204':
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: WPL source not found
            summary: sets the current WISA module settings
            tags:
            - Wisa
            - mozart
    /api/v1/speakers/wireless/wisa/status:
        get:
            description: |-
                Use the `get-wisa-status` endpoint with one of:
                ```mozart_client
                mozart_client.get_wisa_status()
                ```
                ```mozart_api
                mozart_api.get_wisa_status()
                ```
                ```wisa_api
                wisa_api.get_wisa_status()
                ```
            operationId: get-wisa-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WisaStatus'
                    description: WISA status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: WPL source not found
            summary: get the current WISA module status
            tags:
            - Wisa
            - mozart
    /api/v1/stand/autocalibration:
        post:
            description: |-
                Use the `set-stand-autocalibration` endpoint with one of:
                ```mozart_client
                mozart_client.set_stand_autocalibration()
                ```
                ```mozart_api
                mozart_api.set_stand_autocalibration()
                ```
                ```stand_api
                stand_api.set_stand_autocalibration()
                ```
            operationId: set-stand-autocalibration
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: auto calibration accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Start stand auto calibration
            tags:
            - Stand
            - mozart
    /api/v1/stand/autocalibrationstate:
        get:
            description: |-
                Use the `get-stand-autocalibration-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_stand_autocalibration_state()
                ```
                ```mozart_api
                mozart_api.get_stand_autocalibration_state()
                ```
                ```stand_api
                stand_api.get_stand_autocalibration_state()
                ```
            operationId: get-stand-autocalibration-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandAutoCalibrationState'
                    description: The stand auto calibration state
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: StandAutoCalibrationState not available
            summary: Get stand autocalibration state
            tags:
            - Stand
            - mozart
    /api/v1/stand/endstop/{id}:
        delete:
            description: |-
                Use the `delete-endstop` endpoint with one of:
                ```mozart_client
                mozart_client.delete_endstop()
                ```
                ```mozart_api
                mozart_api.delete_endstop()
                ```
                ```stand_api
                stand_api.delete_endstop()
                ```
            operationId: delete-endstop
            parameters:
            -   description: ID of endstop to delete
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/StandEndstopId'
            responses:
                '200':
                    description: Stand endstop deleted successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Stand endstop not found (invalid request)
            summary: Delete endstop with given ID.
            tags:
            - Stand
            - mozart
        description: Endstop is used to limit the movement of the stand.
        get:
            description: |-
                Use the `get-endstop` endpoint with one of:
                ```mozart_client
                mozart_client.get_endstop()
                ```
                ```mozart_api
                mozart_api.get_endstop()
                ```
                ```stand_api
                stand_api.get_endstop()
                ```
            operationId: get-endstop
            parameters:
            -   description: ID of the endstop to get
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/StandEndstopId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandEndstop'
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Stand not connected
            summary: Get the endstop with the given ID
            tags:
            - Stand
            - mozart
        put:
            description: |-
                Modify endstop with given ID, if an angle is applied the stand will turn to the position before saving the endstop.
                Otherwise current position is saved as endstop

                Use the `modify-endstop` endpoint with one of:
                ```mozart_client
                mozart_client.modify_endstop()
                ```
                ```mozart_api
                mozart_api.modify_endstop()
                ```
                ```stand_api
                stand_api.modify_endstop()
                ```
            operationId: modify-endstop
            parameters:
            -   description: ID of the endstop to modify
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/StandEndstopId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StandEndstop'
                description: Settings for given stand endstop.
                required: true
            responses:
                '200':
                    description: stand endstop updated
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Stand not connected
            summary: Modify end stop by ID
            tags:
            - Stand
            - mozart
    /api/v1/stand/endstops:
        delete:
            description: |-
                Use the `clear-endstop` endpoint with one of:
                ```mozart_client
                mozart_client.clear_endstop()
                ```
                ```mozart_api
                mozart_api.clear_endstop()
                ```
                ```stand_api
                stand_api.clear_endstop()
                ```
            operationId: clear-endstop
            responses:
                '200':
                    description: Endstops cleared successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Clear endstops
            tags:
            - Stand
            - mozart
        get:
            description: |-
                Use the `get-stand-endstop-list` endpoint with one of:
                ```mozart_client
                mozart_client.get_stand_endstop_list()
                ```
                ```mozart_api
                mozart_api.get_stand_endstop_list()
                ```
                ```stand_api
                stand_api.get_stand_endstop_list()
                ```
            operationId: get-stand-endstop-list
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandEndstopList'
                    description: Information on stand endstops
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Endstops not available
            summary: Get stand endstop list
            tags:
            - Stand
            - mozart
        post:
            description: |-
                Add a new endstop, if an angle is applied the stand will turn to the position before saving the endstop.
                Otherwise current position is saved as endstop

                Use the `add-endstop` endpoint with one of:
                ```mozart_client
                mozart_client.add_endstop()
                ```
                ```mozart_api
                mozart_api.add_endstop()
                ```
                ```stand_api
                stand_api.add_endstop()
                ```
            operationId: add-endstop
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StandEndstop'
                description: Create a new endstop.
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandEndstop'
                    description: Endstop added successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot add Endstop
            summary: Add new endstop
            tags:
            - Stand
            - mozart
    /api/v1/stand/info:
        get:
            description: |-
                Use the `get-stand-info` endpoint with one of:
                ```mozart_client
                mozart_client.get_stand_info()
                ```
                ```mozart_api
                mozart_api.get_stand_info()
                ```
                ```stand_api
                stand_api.get_stand_info()
                ```
            operationId: get-stand-info
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandInfo'
                    description: Stand information
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Stand not connected
            summary: Get stand information
            tags:
            - Stand
            - mozart
    /api/v1/stand/move:
        post:
            description: |-
                Use the `set-stand-movement` endpoint with one of:
                ```mozart_client
                mozart_client.set_stand_movement()
                ```
                ```mozart_api
                mozart_api.set_stand_movement()
                ```
                ```stand_api
                stand_api.set_stand_movement()
                ```
            operationId: set-stand-movement
            parameters:
            -   description: Use slow speed on continuous movement
                in: query
                name: slow-speed
                schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StandMovement'
                description: Stand Movement
                required: true
            responses:
                '204':
                    description: the movement were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set stand movement with either an angle or a movement type
            tags:
            - Stand
            - mozart
    /api/v1/stand/position/{id}:
        delete:
            description: |-
                Use the `delete-position` endpoint with one of:
                ```mozart_client
                mozart_client.delete_position()
                ```
                ```mozart_api
                mozart_api.delete_position()
                ```
                ```stand_api
                stand_api.delete_position()
                ```
            operationId: delete-position
            parameters:
            -   description: ID of stand position to delete
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/StandPositionId'
            responses:
                '200':
                    description: Stand position deleted successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Stand position not found (invalid request)
            summary: Delete the stand position with given ID.
            tags:
            - Stand
            - mozart
        get:
            description: |-
                Use the `get-position` endpoint with one of:
                ```mozart_client
                mozart_client.get_position()
                ```
                ```mozart_api
                mozart_api.get_position()
                ```
                ```stand_api
                stand_api.get_position()
                ```
            operationId: get-position
            parameters:
            -   description: ID of the stand position to get
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/StandPositionId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandNamedPosition'
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Stand position with the given ID doesn't exist
            summary: Get the stand position with the given ID
            tags:
            - Stand
            - mozart
        put:
            description: |-
                Use the `modify-position` endpoint with one of:
                ```mozart_client
                mozart_client.modify_position()
                ```
                ```mozart_api
                mozart_api.modify_position()
                ```
                ```stand_api
                stand_api.modify_position()
                ```
            operationId: modify-position
            parameters:
            -   description: ID of the stand position to modify
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/StandPositionId'
            -   description: Use current angle as the new angle (will ignore the angle
                    property in the request body).
                in: query
                name: use-current-angle
                required: false
                schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StandNamedPosition'
                description: Settings for given stand position. Multiple settings
                    can be applied at once.
                required: true
            responses:
                '200':
                    description: stand position updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Couldn't update stand position
            summary: Modify stand position with given ID
            tags:
            - Stand
            - mozart
    /api/v1/stand/positions:
        delete:
            description: |-
                Use the `delete-positions` endpoint with one of:
                ```mozart_client
                mozart_client.delete_positions()
                ```
                ```mozart_api
                mozart_api.delete_positions()
                ```
                ```stand_api
                stand_api.delete_positions()
                ```
            operationId: delete-positions
            responses:
                '200':
                    description: Positions deleted successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Delete all positions
            tags:
            - Stand
            - mozart
        get:
            description: |-
                Use the `get-position-list` endpoint with one of:
                ```mozart_client
                mozart_client.get_position_list()
                ```
                ```mozart_api
                mozart_api.get_position_list()
                ```
                ```stand_api
                stand_api.get_position_list()
                ```
            operationId: get-position-list
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandPositionList'
                    description: The position list
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Position list not available
            summary: Get position list
            tags:
            - Stand
            - mozart
        post:
            description: |-
                Use the `add-position` endpoint with one of:
                ```mozart_client
                mozart_client.add_position()
                ```
                ```mozart_api
                mozart_api.add_position()
                ```
                ```stand_api
                stand_api.add_position()
                ```
            operationId: add-position
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StandNamedPosition'
                description: Friendly name and data for the new position.
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandNamedPosition'
                    description: Named position added successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot add Position
            summary: Add a new position
            tags:
            - Stand
            - mozart
    /api/v1/stand/status:
        get:
            description: |-
                Use the `get-stand-status` endpoint with one of:
                ```mozart_client
                mozart_client.get_stand_status()
                ```
                ```mozart_api
                mozart_api.get_stand_status()
                ```
                ```stand_api
                stand_api.get_stand_status()
                ```
            operationId: get-stand-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandStatus'
                    description: The current stand position and movement status
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: StandStatus not available
            summary: Get stand Status
            tags:
            - Stand
            - mozart
    /api/v1/stand/transportmode:
        post:
            description: |-
                Use the `set-stand-transportmode` endpoint with one of:
                ```mozart_client
                mozart_client.set_stand_transportmode()
                ```
                ```mozart_api
                mozart_api.set_stand_transportmode()
                ```
                ```stand_api
                stand_api.set_stand_transportmode()
                ```
            operationId: set-stand-transportmode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: transportmode accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set stand transportmode
            tags:
            - Stand
            - mozart
    /api/v1/stand/type:
        put:
            description: |-
                Use the `set-stand-type` endpoint with one of:
                ```mozart_client
                mozart_client.set_stand_type()
                ```
                ```mozart_api
                mozart_api.set_stand_type()
                ```
                ```stand_api
                stand_api.set_stand_type()
                ```
            operationId: set-stand-type
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StandType'
                description: Stand Type can only be changed for wallbracket hinging
                    right/left
            responses:
                '204':
                    description: the new stand type were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set stand type
            tags:
            - Stand
            - mozart
    /api/v1/state:
        get:
            description: |-
                Use the `get-product-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_product_state()
                ```
                ```public_api
                public_api.get_product_state()
                ```
                ```mozart_api
                mozart_api.get_product_state()
                ```
                ```product_api
                product_api.get_product_state()
                ```
            operationId: get-product-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductState'
                    description: A snapshot of the overall state of the product
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get an overall state from the product.
            tags:
            - Product
            - mozart
            - public
    /api/v1/state/linein:
        get:
            description: |-
                Use the `get-linein-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_linein_state()
                ```
                ```mozart_api
                mozart_api.get_linein_state()
                ```
                ```linein_api
                linein_api.get_linein_state()
                ```
            operationId: get-linein-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LineInStateEnum'
                    description: linein state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get state of linein
            tags:
            - LineIn
            - mozart
    /api/v1/state/microphone/input/{id}:
        get:
            description: |-
                Use the `get-microphone-input-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_microphone_input_state()
                ```
                ```mozart_api
                mozart_api.get_microphone_input_state()
                ```
                ```microphone_api
                microphone_api.get_microphone_input_state()
                ```
            operationId: get-microphone-input-state
            parameters:
            -   description: Microphone ID
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/MicrophoneId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MicrophoneState'
                    description: Microphone state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    description: Microphone not present
            summary: Get state of the microphone input
            tags:
            - Microphone
            - mozart
        put:
            description: |-
                Use the `set-microphone-input-state` endpoint with one of:
                ```mozart_client
                mozart_client.set_microphone_input_state()
                ```
                ```mozart_api
                mozart_api.set_microphone_input_state()
                ```
                ```microphone_api
                microphone_api.set_microphone_input_state()
                ```
            operationId: set-microphone-input-state
            parameters:
            -   description: Microphone ID
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/MicrophoneId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MicrophoneState'
                description: The microphone state to be set
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The microphone state change was successful
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '404':
                    description: Microphone not present
            summary: Set state of the microphone input
            tags:
            - Microphone
            - mozart
    /api/v1/state/microphone/inputs:
        get:
            description: |-
                Use the `get-microphone-input-states` endpoint with one of:
                ```mozart_client
                mozart_client.get_microphone_input_states()
                ```
                ```mozart_api
                mozart_api.get_microphone_input_states()
                ```
                ```microphone_api
                microphone_api.get_microphone_input_states()
                ```
            operationId: get-microphone-input-states
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MicrophoneInputList'
                    description: Microphone input states
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get state of the microphone inputs
            tags:
            - Microphone
            - mozart
    /api/v1/state/microphones:
        get:
            description: |-
                Use the `get-microphone-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_microphone_state()
                ```
                ```mozart_api
                mozart_api.get_microphone_state()
                ```
                ```microphone_api
                microphone_api.get_microphone_state()
                ```
            operationId: get-microphone-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MicrophonesState'
                    description: microphone states
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get state of the microphones
            tags:
            - Microphone
            - mozart
        put:
            description: |-
                Use the `set-microphone-state` endpoint with one of:
                ```mozart_client
                mozart_client.set_microphone_state()
                ```
                ```mozart_api
                mozart_api.set_microphone_state()
                ```
                ```microphone_api
                microphone_api.set_microphone_state()
                ```
            operationId: set-microphone-state
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MicrophoneState'
                description: the state of the microphones
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The microphone state change was successful
                '202':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The microphone state change was accepted but physical
                        switch is in off-position
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Change state of the microphones (software only)
            tags:
            - Microphone
            - mozart
    /api/v1/state/power:
        get:
            description: |-
                Use the `get-power-state` endpoint with one of:
                ```mozart_client
                mozart_client.get_power_state()
                ```
                ```mozart_api
                mozart_api.get_power_state()
                ```
                ```power_api
                power_api.get_power_state()
                ```
            operationId: get-power-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PowerStateEnum'
                    description: The power state of the product
            summary: Get power state of the product
            tags:
            - Power
            - mozart
        put:
            description: |-
                Use the `set-power-state` endpoint with one of:
                ```mozart_client
                mozart_client.set_power_state()
                ```
                ```mozart_api
                mozart_api.set_power_state()
                ```
                ```power_api
                power_api.set_power_state()
                ```
            operationId: set-power-state
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PowerStateEnum'
                description: The power state to be set
                required: true
            responses:
                '201':
                    description: Accepted the updated power state
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Changes the power state of the product
            tags:
            - Power
            - mozart
    /api/v1/state/power/standby/settings:
        get:
            description: |-
                Use the `get-standby-settings` endpoint with one of:
                ```mozart_client
                mozart_client.get_standby_settings()
                ```
                ```mozart_api
                mozart_api.get_standby_settings()
                ```
                ```power_api
                power_api.get_standby_settings()
                ```
            operationId: get-standby-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StandbySettings'
                    description: The standby settings of the product
            summary: Get standby settings of the product
            tags:
            - Power
            - mozart
        put:
            description: |-
                Use the `set-standby-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_standby_settings()
                ```
                ```mozart_api
                mozart_api.set_standby_settings()
                ```
                ```power_api
                power_api.set_standby_settings()
                ```
            operationId: set-standby-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StandbySettings'
                description: The standby settings
                required: true
            responses:
                '201':
                    description: Accepted the updated standby setting
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Changes the standby settings of the product
            tags:
            - Power
            - mozart
    /api/v1/state/reboot:
        put:
            description: |-
                Use the `post-reboot` endpoint with one of:
                ```mozart_client
                mozart_client.post_reboot()
                ```
                ```mozart_api
                mozart_api.post_reboot()
                ```
                ```power_api
                power_api.post_reboot()
                ```
            operationId: post-reboot
            responses:
                '200':
                    description: The device is being rebooted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Reboot the mozart device
            tags:
            - Power
            - mozart
    /api/v1/state/standby:
        put:
            description: |-
                Use the `post-standby` endpoint with one of:
                ```mozart_client
                mozart_client.post_standby()
                ```
                ```mozart_api
                mozart_api.post_standby()
                ```
                ```power_api
                power_api.post_standby()
                ```
            operationId: post-standby
            responses:
                '200':
                    description: The device is put in standby
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Puts the device in standby
            tags:
            - Power
            - mozart
    /api/v1/timer:
        post:
            description: |-
                Use the `add-timer` endpoint with one of:
                ```mozart_client
                mozart_client.add_timer()
                ```
                ```mozart_api
                mozart_api.add_timer()
                ```
                ```alarms_api
                alarms_api.add_timer()
                ```
            operationId: add-timer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Timer'
                description: New timer configuration
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Timer'
                    description: Timer added successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Cannot add timer
            summary: Add a new timer to the product
            tags:
            - Alarms
            - mozart
    /api/v1/timer/{id}:
        get:
            description: |-
                Use the `get-timer` endpoint with one of:
                ```mozart_client
                mozart_client.get_timer()
                ```
                ```mozart_api
                mozart_api.get_timer()
                ```
                ```alarms_api
                alarms_api.get_timer()
                ```
            operationId: get-timer
            parameters:
            -   description: ID of the timer to get
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Timer'
                    description: Successful request
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: No timer found
            summary: Returns the running timer
            tags:
            - Alarms
            - mozart
    /api/v1/timer/{id}/cancel:
        post:
            description: |-
                Use the `cancel-timer` endpoint with one of:
                ```mozart_client
                mozart_client.cancel_timer()
                ```
                ```mozart_api
                mozart_api.cancel_timer()
                ```
                ```alarms_api
                alarms_api.cancel_timer()
                ```
            operationId: cancel-timer
            parameters:
            -   description: ID of the timer to cancel
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Timer cancelled
                '404':
                    description: Not found
            summary: Cancels the running timer
            tags:
            - Alarms
            - mozart
    /api/v1/timer/{id}/pause:
        post:
            description: |-
                Use the `pause-timer` endpoint with one of:
                ```mozart_client
                mozart_client.pause_timer()
                ```
                ```mozart_api
                mozart_api.pause_timer()
                ```
                ```alarms_api
                alarms_api.pause_timer()
                ```
            operationId: pause-timer
            parameters:
            -   description: ID of the timer to pause
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Timer paused
                '404':
                    description: Not found
            summary: Pauses the running timer
            tags:
            - Alarms
            - mozart
    /api/v1/timer/{id}/resume:
        post:
            description: |-
                Use the `resume-timer` endpoint with one of:
                ```mozart_client
                mozart_client.resume_timer()
                ```
                ```mozart_api
                mozart_api.resume_timer()
                ```
                ```alarms_api
                alarms_api.resume_timer()
                ```
            operationId: resume-timer
            parameters:
            -   description: ID of the timer to resume
                in: path
                name: id
                required: true
                schema:
                    $ref: '#/components/schemas/AlarmId'
            responses:
                '200':
                    description: Timer resumed
                '404':
                    description: Not found
            summary: Resume the timer
            tags:
            - Alarms
            - mozart
    /api/v1/timers:
        get:
            description: |-
                Use the `get-all-timers` endpoint with one of:
                ```mozart_client
                mozart_client.get_all_timers()
                ```
                ```mozart_api
                mozart_api.get_all_timers()
                ```
                ```alarms_api
                alarms_api.get_all_timers()
                ```
            operationId: get-all-timers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TimerList'
                    description: Successful request
            summary: Returns a list of configured timers
            tags:
            - Alarms
            - mozart
    /api/v1/timers/maximum-allowed:
        get:
            description: |-
                Use the `get-maximum-allowed-timers` endpoint with one of:
                ```mozart_client
                mozart_client.get_maximum_allowed_timers()
                ```
                ```mozart_api
                mozart_api.get_maximum_allowed_timers()
                ```
                ```alarms_api
                alarms_api.get_maximum_allowed_timers()
                ```
            operationId: get-maximum-allowed-timers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NumberOfAllowedAlarms'
                    description: Successful request
            summary: Returns the maximum allowed number of timers on the product
            tags:
            - Alarms
            - mozart
    /api/v1/wireless-charging/settings:
        put:
            description: |-
                Use the `set-wireless-charging-settings` endpoint with one of:
                ```mozart_client
                mozart_client.set_wireless_charging_settings()
                ```
                ```mozart_api
                mozart_api.set_wireless_charging_settings()
                ```
                ```settings_api
                settings_api.set_wireless_charging_settings()
                ```
            operationId: set-wireless-charging-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WirelessChargingSettings'
                description: the wireless charging settings
                required: true
            responses:
                '204':
                    description: the new settings were accepted
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: no wireless charger found
            summary: sets the wireless charging settings
            tags:
            - Settings
            - mozart
    /api/v1/wireless-charging/status:
        get:
            description: |-
                Use the `get-wireless-charging-status` endpoint with one of:
                ```mozart_client
                mozart_client.get_wireless_charging_status()
                ```
                ```mozart_api
                mozart_api.get_wireless_charging_status()
                ```
                ```settings_api
                settings_api.get_wireless_charging_status()
                ```
            operationId: get-wireless-charging-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WirelessChargingStatus'
                    description: the wireless charging status
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: no wireless charger found
            summary: get the current wireless charging status
            tags:
            - Settings
            - mozart
    /unbox/connect:
        post:
            description: |-
                Use the `post-connect-attempt` endpoint with one of:
                ```mozart_client
                mozart_client.post_connect_attempt()
                ```
                ```mozart_api
                mozart_api.post_connect_attempt()
                ```
                ```setup_api
                setup_api.post_connect_attempt()
                ```
            operationId: post-connect-attempt
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WifiCredentials'
                            description: The encrypted SSID and password
                            required:
                            - SSID
                            - password
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: Connect attempt succeeded.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Unabled to connect to the specified wifi network,
                        error model will describe the specific issue encountered
            summary: Connect to the specified wireless network
            tags:
            - Setup
            - mozart
    /unbox/networks:
        get:
            description: |-
                Use the `get-available-wifi-networks` endpoint with one of:
                ```mozart_client
                mozart_client.get_available_wifi_networks()
                ```
                ```mozart_api
                mozart_api.get_available_wifi_networks()
                ```
                ```setup_api
                setup_api.get_available_wifi_networks()
                ```
            operationId: get-available-wifi-networks
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WifiArray'
                    description: the list of available wifi networks.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Unable to retrieve the list of wifi networks, error
                        model will describe the specific issue encountered
            summary: Get available wifi-networks
            tags:
            - Setup
            - mozart
    /unbox/product:
        get:
            description: |-
                Use the `get-product-advertisement-info` endpoint with one of:
                ```mozart_client
                mozart_client.get_product_advertisement_info()
                ```
                ```mozart_api
                mozart_api.get_product_advertisement_info()
                ```
                ```setup_api
                setup_api.get_product_advertisement_info()
                ```
            operationId: get-product-advertisement-info
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicProductInfo'
                    description: retrieve basic product info needed for wifi provisioning
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Unable to retrieve the basic product info, error
                        model will describe the specific issue encountered
            summary: Get basic product advertising data
            tags:
            - Setup
            - mozart
    /unbox/publickey:
        get:
            description: |-
                Use the `get-wifi-provisioning-public-key` endpoint with one of:
                ```mozart_client
                mozart_client.get_wifi_provisioning_public_key()
                ```
                ```mozart_api
                mozart_api.get_wifi_provisioning_public_key()
                ```
                ```setup_api
                setup_api.get_wifi_provisioning_public_key()
                ```
            operationId: get-wifi-provisioning-public-key
            responses:
                '200':
                    content:
                        text/plain:
                            schema:
                                type: string
                    description: retrieve the public key for subsequent encryption
                        of wifi credentials
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Unable to retrieve the public key, error model will
                        describe the specific issue encountered
            summary: Gets the public key. The key is expected to be encrypted using
                PKCS1_OAEP padding
            tags:
            - Setup
            - mozart
    /unbox/regulatorydomain:
        get:
            description: |-
                Use the `get-wifi-regulatory` endpoint with one of:
                ```mozart_client
                mozart_client.get_wifi_regulatory()
                ```
                ```mozart_api
                mozart_api.get_wifi_regulatory()
                ```
                ```setup_api
                setup_api.get_wifi_regulatory()
                ```
            operationId: get-wifi-regulatory
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WiFiRegulatorySetting'
                    description: the regulatory domain info
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: getting the Wi-Fi regulatory domain info for the product
            tags:
            - Setup
            - mozart
        put:
            description: |-
                Use the `set-wifi-regulatory` endpoint with one of:
                ```mozart_client
                mozart_client.set_wifi_regulatory()
                ```
                ```mozart_api
                mozart_api.set_wifi_regulatory()
                ```
                ```setup_api
                setup_api.set_wifi_regulatory()
                ```
            operationId: set-wifi-regulatory
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WiFiRegulatorySetting'
                description: the new regulatory domain settings
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WiFiRegulatorySetting'
                    description: the regulatory domain settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: set the Wi-Fi regulatory domain  for the product
            tags:
            - Setup
            - mozart
    /unbox/scan:
        put:
            description: |-
                Use the `post-wifi-scan` endpoint with one of:
                ```mozart_client
                mozart_client.post_wifi_scan()
                ```
                ```mozart_api
                mozart_api.post_wifi_scan()
                ```
                ```setup_api
                setup_api.post_wifi_scan()
                ```
            operationId: post-wifi-scan
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MozartResult'
                    description: The Wi-Fi scan is triggered
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Trigger a Wi-Fi scan
            tags:
            - Setup
            - mozart
security: []

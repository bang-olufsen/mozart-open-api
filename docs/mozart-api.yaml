components:
    parameters:
        ListeningModeID:
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/ListeningModeID'
    responses:
        BeolinkJoinResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BeolinkJoinRequest'
            description: |
                Join started

                Joining always happens asynchronously, use the `requestID` field in
                the response to match your request with a
                `WebsocketEventBeolinkJoinResult` web socket event.
        MissingListeningMode:
            description: No such listening mode
    schemas:
        Action:
            description: |
                An action object. Examples:

                RadioAction:
                ```json
                {
                  "type": "radio",
                  "radioStationId": "8779112938791514"
                }
                ```

                ToneAction:
                ```json
                {
                  "type": "tone",
                  "toneName": "alarm_2"
                }
                ```

                SourcePresetAction:
                ```json
                {
                  "type": "sourcePreset",
                  "source": {
                    "value": "spotify"
                  },
                  "presetKey": "Preset3"
                }
                ```

                DeezerFlowAction:
                ```json
                {
                  "type": "deezerFlow",
                  "deezerUserId": "1234"
                }
                ```

                ActivateSourceAction:
                ```json
                {
                  "type": "activateSource",
                  "source": {
                    "value": "spotify"
                  }
                }
                ```

                PlayQueueAction:
                ```
                  {
                    "type": "playQueue",
                    "queueItem": {
                      "provider": {
                        "value": "deezer"
                      },
                      "startNowFromPosition": 0,
                      "type": "playlist",
                      "uri": "playlist:8074581462"
                    },
                    "queueSettings": {
                      "consume": false,
                      "repeat": "none",
                      "shuffle": false
                    }
                  }
                ```

                StandbyAction:
                ```json
                {
                  "type": "standby"
                }
                ```

                AllStandbyAction:
                ```json
                {
                  "type": "allStandby"
                }
                ```

                TouchToJoinAction:
                ```json
                {
                  "type": "touchToJoin"
                }
                ```

                ButtonShortPressAction:
                ```json
                {
                  "type": "buttonShortPress",
                  "buttonName": "preset1"
                }
                ```

                FallbackAction:
                ```json
                {
                  "type": "fallback"
                }
                ```

                VolumeAction:
                ```json
                {
                  "type": "volume",
                  "volumeLevel": 25
                }
                ```

                StopAction:
                ```json
                {
                  "type": "stop",
                  "stopDuration": 1300
                }
                ```

                TriggerContentAction:
                ```json
                {
                  "contentId": "tv://netflix",
                  "type": "triggerContent"
                }
                ```

                SpeakerGroupAction:
                ```json
                {
                  "type": "speakerGroup",
                  "speakerGroupId": "00112233-4455-6677-8899-aabbccddeeff"
                }
                ```

                ListeningModeAction:
                ```json
                {
                  "type": "listeningMode",
                  "listeningModeId": 1234
                }
                ```

                StandAction:
                ```json
                {
                  "type": "stand",
                  "standPosition": {
                    "angle": 7.5
                  }
                }
                ```

                GainAction:
                ```json
                {
                  "type": "sourceGain",
                  "source": {
                    "value": "spotify"
                  },
                  "gainDb": 1.0
                }
                ```

                SoundProfileAction:
                ```json
                {
                  "type": "soundProfile",
                  "soundProfile": {
                    "speakerId1": {
                      "directivity": "wide"
                    },
                    "speakerId2": {
                      "directivity": "narrow"
                    }
                  }
                }
                ```
            properties:
                buttonName:
                    description: Name of the Button used for button-press types ('buttonShortPress')
                    enum:
                    - preset1
                    - preset2
                    - preset3
                    - preset4
                    nullable: true
                    type: string
                contentId:
                    description: Id of content only used for 'type=triggerContent'
                    nullable: true
                    type: string
                deezerUserId:
                    description: Id of user only used for 'type=deezerFlow' and is
                        optional
                    format: '[0-9]+'
                    nullable: true
                    type: string
                gainDb:
                    description: Only usef for 'type=sourceGain'
                    maximum: 12
                    minimum: -12
                    type: number
                listeningModeId:
                    $ref: '#/components/schemas/ListeningModeID'
                    description: Only used for 'type=listeningMode'
                    nullable: true
                presetKey:
                    description: Only used for 'type=sourcePreset'
                    format: ^Preset[0-9]+$
                    nullable: true
                    type: string
                queueItem:
                    $ref: '#/components/schemas/PlayQueueItem'
                    description: PlayQueue item only used for 'type=playQueue'
                    nullable: true
                queueSettings:
                    $ref: '#/components/schemas/PlayQueueSettings'
                    description: PlayQueue settings only used for 'type=playQueue'
                        and is optional
                    nullable: true
                radioStationId:
                    description: Id of RadioStation only used for 'type=radio'
                    format: '[0-9]+'
                    nullable: true
                    type: string
                soundProfile:
                    additionalProperties:
                        $ref: '#/components/schemas/ActionSoundProfile'
                    description: Only used for 'type=soundProfile'
                    example:
                        speakerId1:
                            directivity: directivity1
                        speakerId2:
                            directivity: directivity1
                    nullable: true
                    type: object
                source:
                    $ref: '#/components/schemas/SourceTypeEnum'
                    nullable: true
                speakerGroupId:
                    $ref: '#/components/schemas/SpeakerGroupId'
                    description: Only used for 'type=speakerGroup'
                    nullable: true
                standPosition:
                    $ref: '#/components/schemas/StandPosition'
                    description: Only used for 'type=stand'
                stopDuration:
                    description: The duration to wait (seconds) until stopping only
                        used for 'type=stop'
                    format: int32
                    minimum: 0
                    nullable: true
                    type: integer
                toneName:
                    description: Name of the tone only used for 'type=tone'
                    enum:
                    - alarm_1
                    - alarm_2
                    nullable: true
                    type: string
                type:
                    description: The type of Action
                    enum:
                    - standby
                    - tone
                    - radio
                    - sourcePreset
                    - deezerFlow
                    - activateSource
                    - playQueue
                    - buttonShortPress
                    - allStandby
                    - touchToJoin
                    - fallback
                    - volume
                    - stop
                    - triggerContent
                    - speakerGroup
                    - listeningMode
                    - stand
                    - sourceGain
                    - soundProfile
                    type: string
                volumeLevel:
                    description: The volume level to configure only used for 'type=volume'
                    format: int32
                    maximum: 100
                    minimum: 0
                    nullable: true
                    type: integer
            required:
            - type
            type: object
        ActionList:
            description: An ordered list of Actions to run on the product
            example:
            -   type: volume
                volumeLevel: 35
            -   radioStationId: '8779112938791514'
                type: radio
            -   stopDuration: 1300
                type: stop
            items:
                $ref: '#/components/schemas/Action'
            type: array
        ActionSoundProfile:
            properties:
                directivity:
                    nullable: true
                    type: string
            type: object
        AlarmId:
            format: uuid
            type: string
        AlarmLabel:
            description: Label for an alarm
            maxLength: 128
            type: string
        AlarmTimerEventData:
            properties:
                event:
                    enum:
                    - add
                    - update
                    - delete
                    type: string
                id:
                    $ref: '#/components/schemas/AlarmId'
                type:
                    enum:
                    - alarm
                    - timer
                    type: string
            type: object
        AlarmTriggeredInfo:
            properties:
                id:
                    $ref: '#/components/schemas/AlarmId'
                label:
                    $ref: '#/components/schemas/AlarmLabel'
            type: object
        Ambience:
            properties:
                value:
                    description: Selected ambience value
                    format: double
                    type: number
            required:
            - value
            type: object
        AmbienceFeature:
            allOf:
            -   $ref: '#/components/schemas/Ambience'
            -   $ref: '#/components/schemas/AmbienceRange'
        AmbienceRange:
            properties:
                default:
                    $ref: '#/components/schemas/Ambience'
                    description: Product and role specific default ambience value
                range:
                    description: Product and role specific ambience range
                    items:
                        $ref: '#/components/schemas/Ambience'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        Art:
            properties:
                hasLocalImage:
                    type: boolean
                key:
                    type: string
                size:
                    type: string
                type:
                    type: string
                url:
                    type: string
            type: object
        Balance:
            properties:
                value:
                    description: Selected balance value
                    format: double
                    type: number
            required:
            - value
            type: object
        BalanceFeature:
            allOf:
            -   $ref: '#/components/schemas/Balance'
            -   $ref: '#/components/schemas/BalanceRange'
        BalanceRange:
            properties:
                default:
                    $ref: '#/components/schemas/Balance'
                    description: Default balance value
                range:
                    description: balance range
                    items:
                        $ref: '#/components/schemas/Balance'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        Bass:
            properties:
                value:
                    description: Selected bass value
                    format: int32
                    type: integer
            required:
            - value
            type: object
        BassFeature:
            allOf:
            -   $ref: '#/components/schemas/Bass'
            -   $ref: '#/components/schemas/BassRange'
        BassManagement:
            properties:
                value:
                    description: Selected bass-management value
                    enum:
                    - 'on'
                    - 'off'
                    type: string
            required:
            - value
            type: object
        BassManagementFeature:
            allOf:
            -   $ref: '#/components/schemas/BassManagement'
            -   $ref: '#/components/schemas/BassManagementRange'
        BassManagementRange:
            properties:
                default:
                    $ref: '#/components/schemas/BassManagement'
                    description: Default bass-management value
                range:
                    description: bass-management range
                    items:
                        $ref: '#/components/schemas/BassManagement'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        BassRange:
            properties:
                default:
                    $ref: '#/components/schemas/Bass'
                    description: Product and role specific default bass value
                range:
                    description: Product and role specific bass range
                    items:
                        $ref: '#/components/schemas/Bass'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        BatteryState:
            properties:
                batteryLevel:
                    description: |
                        Batterylevel in percent
                    type: integer
                isCharging:
                    type: boolean
                remainingChargingTimeMinutes:
                    description: Remaining charging time in minutes
                    type: integer
                remainingPlayingTimeMinutes:
                    description: Remaining playing time in minutes
                    type: integer
            type: object
        BeoRemoteButton:
            properties:
                Key:
                    type: string
                Type:
                    enum:
                    - KeyPress
                    - KeyRelease
            type: object
        BeoShapeStatus:
            description: Status
            properties:
                amplifierTilesConfigured:
                    description: Number of amplifier Shape titles currently configured
                    format: int32
                    type: integer
                amplifierTilesOnline:
                    description: Number of amplifier Shape tiles currently connected
                    format: int32
                    type: integer
                designId:
                    type: string
                designName:
                    type: string
                soundProfile:
                    properties:
                        activeDirectivity:
                            type: string
                        speakerId:
                            type: string
                        supportedDirectivity:
                            description: The supported Beosound Shape directivity.
                                Extracted from the provided design fetched from the
                                cloud.
                            items:
                                type: string
                            type: array
                    required:
                    - speakerId
                    - activeDirectivity
                    - supportedDirectivity
                    type: object
                speakerTilesConfigured:
                    description: Number of speaker Shape titles currently configured
                    format: int32
                    type: integer
                state:
                    enum:
                    - notUsed
                    - updatingFirmware
                    - initializing
                    - errorHardwareConfig
                    - ready
                    type: string
            required:
            - state
            - amplifierTilesOnline
            - amplifierTilesConfigured
            - speakerTilesConfigured
            type: object
        BeolinkAvailableListener:
            properties:
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            type: object
        BeolinkExperience:
            properties:
                category:
                    description: Source category
                    enum:
                    - TV
                    - RADIO
                    - MUSIC
                    - MEDIA
                    - UNKNOWN
                    type: string
                id:
                    description: experience id, e.g. "RADIO" or "toslink"
                    type: string
                linkable:
                    description: Linkable means "Does pressing play on this source
                        make sense"
                    type: boolean
                name:
                    description: Experience name, e.g. "Bluetooth" or "B&O Radio"
                    type: string
                productFriendlyName:
                    description: Optional product friendly name
                    type: string
                sourceFriendlyName:
                    description: Optional friendly name for source
                    type: string
                type:
                    description: Source type. This corresponds to the exhaustive list
                        or sources provided by the control layer
                    type: string
                uniqueSourceId:
                    description: The actual device jabber id that the experience comes
                        from
                    type: string
            required:
            - id
            - name
            - type
            - category
            - uniqueSourceId
            - linkable
            type: object
        BeolinkExperiencesResult:
            properties:
                experiences:
                    items:
                        $ref: '#/components/schemas/BeolinkExperience'
                    type: array
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
                status:
                    description: |
                        Current scan status.
                        * busy: there is another scan in progress
                        * timeout: the scan timed out. The results will be partial
                    enum:
                    - ok
                    - busy
                    - timeout
                    type: string
            required:
            - requestID
            - status
            - experiences
            type: object
        BeolinkJoinRequest:
            properties:
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
                result:
                    description: Relative URL of the join result
                    format: uri
                    type: string
            required:
            - requestID
            - result
            type: object
        BeolinkJoinResult:
            properties:
                error:
                    description: Join error
                    enum:
                    - ok
                    - busy
                    - leaderless
                    - alone
                    - silent
                    - missing
                    - rejected
                    - timeout
                    type: string
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
                requestID:
                    $ref: '#/components/schemas/BeolinkRequestID'
                status:
                    description: Overall join status
                    enum:
                    - idle
                    - joined
                    - failed
                    type: string
                type:
                    description: The type of join request this is a result of
                    enum:
                    - join
                    - joinRequested
                    - expand
                    - expandRequested
                    type: string
            required:
            - requestID
            - status
            - jid
            - type
            type: object
        BeolinkLeader:
            properties:
                friendlyName:
                    type: string
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            - friendlyName
            type: object
        BeolinkListener:
            properties:
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            type: object
        BeolinkPeer:
            properties:
                friendlyName:
                    type: string
                ipAddress:
                    $ref: '#/components/schemas/IpAddress'
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            - friendlyName
            - ipAddress
            type: object
        BeolinkPeerID:
            description: Beolink peer ID
            example: 2714.1200304.26451293@products.bang-olufsen.com
            type: string
        BeolinkRequestID:
            description: Beolink request ID
            example: 48985a4f-a4de-4b44-9757-c9a7407b8882
            format: uuid
            type: string
        BeolinkSelf:
            properties:
                friendlyName:
                    type: string
                jid:
                    $ref: '#/components/schemas/BeolinkPeerID'
            required:
            - jid
            - friendlyName
            type: object
        BluetoothDevice:
            properties:
                address:
                    type: string
                connected:
                    type: boolean
                name:
                    type: string
            type: object
        BluetoothDeviceList:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/BluetoothDevice'
                    type: array
            type: object
        ButtonEvent:
            properties:
                button:
                    description: identifies the button
                    type: string
                state:
                    description: identifies the state change
                    type: string
            type: object
        Compression:
            properties:
                value:
                    description: Selected compression value
                    enum:
                    - 'off'
                    - medium
                    - maximum
                    type: string
            required:
            - value
            type: object
        CompressionFeature:
            allOf:
            -   $ref: '#/components/schemas/Compression'
            -   $ref: '#/components/schemas/CompressionRange'
        CompressionRange:
            properties:
                default:
                    $ref: '#/components/schemas/Compression'
                    description: Default compression value
                range:
                    description: compression range
                    items:
                        $ref: '#/components/schemas/Compression'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        ContentCategoryList:
            items:
                enum:
                - music
                - movie
                - tv
                - hdmi
                - app
                type: string
            type: array
        ContentItem:
            example:
                contentUri: tv://netflix
                label: Netflix
            properties:
                categories:
                    $ref: '#/components/schemas/ContentCategoryList'
                    nullable: true
                contentUri:
                    type: string
                label:
                    nullable: true
                    type: string
                source:
                    $ref: '#/components/schemas/SourceTypeEnum'
            required:
            - contentUri
            - source
            type: object
        ContentItemMap:
            additionalProperties:
                $ref: '#/components/schemas/ContentItem'
            example:
                475169e4-32bb-59ad-b88d-a6d53c289838:
                    contentUri: tv://netflix
                    label: Netflix
            type: object
        ContentItemWithId:
            properties:
                content:
                    $ref: '#/components/schemas/ContentItem'
                id:
                    type: string
            type: object
        Directivity:
            properties:
                value:
                    enum:
                    - front
                    - left
                    - right
                    - omni
                    - narrow
                    - wide
                    - standalone
                    type: string
            required:
            - value
            type: object
        DirectivityFeature:
            allOf:
            -   $ref: '#/components/schemas/Directivity'
            -   $ref: '#/components/schemas/DirectivityRange'
        DirectivityRange:
            properties:
                default:
                    $ref: '#/components/schemas/Directivity'
                    description: Product and role specific default directivity value
                range:
                    description: Product and role specific list of directivities
                    items:
                        $ref: '#/components/schemas/Directivity'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        ErrorModel:
            description: the general error model
            properties:
                errorCode:
                    description: |
                        A wellknown code that signal the error, can be used by callers
                    type: string
                errorId:
                    description: |
                        A unique identifier used to e.g. quick find in logs
                    type: string
                errorMessage:
                    description: |
                        A textual representation, human readable and suitable for logs
                    type: string
            type: object
        Fader:
            properties:
                value:
                    description: Selected fader value
                    format: double
                    type: number
            required:
            - value
            type: object
        FaderFeature:
            allOf:
            -   $ref: '#/components/schemas/Fader'
            -   $ref: '#/components/schemas/FaderRange'
        FaderRange:
            properties:
                default:
                    $ref: '#/components/schemas/Fader'
                    description: Default fader value
                range:
                    description: fader range
                    items:
                        $ref: '#/components/schemas/Fader'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        HdmiIdType:
            type: string
        HdmiInput:
            properties:
                contentUri:
                    description: This points to the editable content trigger for this
                        specific hdmi input
                    type: string
                input:
                    $ref: '#/components/schemas/HdmiIdType'
            type: object
        HdmiVideoFormat:
            properties:
                pixelFormat:
                    $ref: '#/components/schemas/VideoPixelFormat'
                vIC:
                    format: int32
                    minimum: 0
                    type: integer
                videoTimings:
                    $ref: '#/components/schemas/VideoTimings'
            type: object
        HomeControlIxp:
            properties:
                uri:
                    type: string
            type: object
        HomeControlUri:
            properties:
                ixp:
                    nullable: true
                    type: string
                uri:
                    type: string
            type: object
        InstallRecordIdState:
            properties:
                value:
                    enum:
                    - idle
                    - gettingUrl
                    - urlInvalid
                    - downloading
                    - downloadFinished
                    - downloadFailed
                    type: string
            type: object
        IpAddress:
            description: IP address
            example: fe80::209:a7ff:fe78:f605
            type: string
        LatencyProfile:
            description: |
                The latency profile of this speaker group.
                Needed to handle Beolab's with latency dependant audio quality.
                Default is set to performance.
            properties:
                value:
                    enum:
                    - performance
                    - quality
                    type: string
            type: object
        LgeTvSoundSettings:
            properties:
                digitalOutput:
                    enum:
                    - auto
                    - passThrough
                    - pcm
                    - unknown
                    type: string
                eArc:
                    type: boolean
                output:
                    enum:
                    - tvSpeaker
                    - externalOptical
                    - externalArc
                    - bluetooth
                    - wisaSpeakers
                    - lineout
                    - headphone
                    - tvSpeakerAndExternalOptical
                    - tvSpeakerAndHeadphone
                    - tvSpeakerAndBluetooth
                    - externalArcBno
                    - unknown
                    type: string
            type: object
        ListeningMode:
            allOf:
            -   $ref: '#/components/schemas/ListeningModeProps'
            -   required:
                - features
                - id
                - name
                - triggers
        ListeningModeFeatures:
            description: Sound features to apply
            properties:
                ambience:
                    $ref: '#/components/schemas/Ambience'
                balance:
                    $ref: '#/components/schemas/Balance'
                bassManagement:
                    $ref: '#/components/schemas/BassManagement'
                compression:
                    $ref: '#/components/schemas/Compression'
                directivity:
                    $ref: '#/components/schemas/Directivity'
                fader:
                    $ref: '#/components/schemas/Fader'
                roomCompensation:
                    $ref: '#/components/schemas/RoomCompensation'
                spatialEnvelopment:
                    $ref: '#/components/schemas/SpatialEnvelopment'
                spatialHeight:
                    $ref: '#/components/schemas/SpatialHeight'
                spatialProcessing:
                    $ref: '#/components/schemas/SpatialProcessing'
                spatialSurround:
                    $ref: '#/components/schemas/SpatialSurround'
                spatialWidth:
                    $ref: '#/components/schemas/SpatialWidth'
                speechEnhance:
                    $ref: '#/components/schemas/SpeechEnhance'
                toneTouch:
                    $ref: '#/components/schemas/ToneTouch'
            type: object
        ListeningModeID:
            format: int32
            minimum: 0
            type: integer
        ListeningModeProps:
            properties:
                clientCtx:
                    description: |
                        An optional generic string property supplied from the client. If
                        provided, it will be stored without changes.
                        If not supplied, any current clientCtx will remain unchanged.
                    maxLength: 4096
                    nullable: true
                    type: string
                features:
                    $ref: '#/components/schemas/ListeningModeFeatures'
                id:
                    $ref: '#/components/schemas/ListeningModeID'
                name:
                    description: Friendly name
                    type: string
                origin:
                    description: User created, default or an edited default listening
                        mode
                    enum:
                    - user
                    - default
                    - edited
                    type: string
                role:
                    description: Role a listening mode applies to
                    enum:
                    - standalone
                    - multichannel
                    - all
                    nullable: true
                    type: string
                triggers:
                    items:
                        $ref: '#/components/schemas/ListeningModeTrigger'
                    type: array
            type: object
        ListeningModeRef:
            description: Reference to a listening mode
            properties:
                href:
                    description: |
                        Host relative URI of the listening mode or `null` if there is no
                        active listening mode.
                    format: uri
                    nullable: true
                    type: string
                id:
                    description: |
                        ID of the active listening mode or `null` if there is no active
                        listening mode.
                    format: int32
                    minimum: 0
                    nullable: true
                    type: integer
            required:
            - id
            - href
            type: object
        ListeningModeSet:
            items:
                allOf:
                -   $ref: '#/components/schemas/ListeningMode'
            type: array
        ListeningModeTrigger:
            oneOf:
            -   $ref: '#/components/schemas/PowerLinkTrigger'
        Loudness:
            properties:
                value:
                    type: boolean
            type: object
        MicrophoneState:
            properties:
                value:
                    enum:
                    - 'on'
                    - 'off'
                    type: string
            type: object
        MicrophonesState:
            description: state of microphones, both physical switches and software
                state
            properties:
                microphoneState:
                    $ref: '#/components/schemas/MicrophoneState'
                microphoneSwitchState:
                    $ref: '#/components/schemas/MicrophoneState'
            type: object
        OptionalIpAddress:
            description: IP address
            example: fe80::209:a7ff:fe78:f605
            nullable: true
            type: string
        OverlayPlayRequest:
            allOf:
            -   $ref: '#/components/schemas/OverlayPlayRequestCommon'
            -   $ref: '#/components/schemas/OverlayPlayRequestUri'
            -   $ref: '#/components/schemas/OverlayPlayRequestTextToSpeech'
            -   $ref: '#/components/schemas/OverlayPlayRequestFromUsb'
        OverlayPlayRequestCommon:
            properties:
                volumeAbsolute:
                    description: |
                        An optional absolute volume level at which to play the URI. If not provided, the URI will play at the currently configured volume level on the product. The level should be provided in volume steps [0, 100]
                    format: int32
                    maximum: 100
                    minimum: 0
                    nullable: true
                    type: integer
            type: object
        OverlayPlayRequestFromUsb:
            nullable: true
            properties:
                fromUsb:
                    properties:
                        fileLocation:
                            description: |
                                Required field containing the relative path (i.e. from the USB drive root) and file name with extension (if one exists) that will be played. A maximum length of 1024 characters is allowed.
                            maxLength: 1024
                            type: string
                    required:
                    - fileLocation
                    type: object
            type: object
        OverlayPlayRequestTextToSpeech:
            nullable: true
            properties:
                textToSpeech:
                    description: |
                        Object used for performing a text-to-speech operation on the product.
                    properties:
                        lang:
                            description: |
                                An optional specification of the language to use. The default value is ultimately decided by the BeoCloud API, but currently it defaults to `en-us`.
                            example: en-us
                            nullable: true
                            type: string
                        text:
                            description: |
                                Required field containing the actual text that will be converted to speech (audio). A maximum length of 2048 characters is allowed.
                            maxLength: 2048
                            type: string
                    required:
                    - text
                    type: object
            type: object
        OverlayPlayRequestUri:
            nullable: true
            properties:
                uri:
                    $ref: '#/components/schemas/Uri'
            type: object
        PairedRemote:
            properties:
                address:
                    type: string
                appVersion:
                    type: string
                batteryLevel:
                    maximum: 100
                    minimum: 0
                    type: integer
                connected:
                    type: boolean
                dbVersion:
                    type: string
                lastSeen:
                    format: date-time
                    type: string
                name:
                    type: string
                serialNumber:
                    type: string
                updated:
                    items:
                        enum:
                        - app
                        - db
                        type: string
                    type: array
            required:
            - address
            - name
            type: object
        PairedRemoteList:
            items:
                $ref: '#/components/schemas/PairedRemote'
            type: array
        PairedRemoteResponse:
            properties:
                items:
                    $ref: '#/components/schemas/PairedRemoteList'
            type: object
        PlayQueueIdType:
            format: uuid
            type: string
        PlayQueueItem:
            properties:
                index:
                    format: int32
                    type: integer
                metadata:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
                    nullable: true
                playlistSortBy:
                    description: Option to choose the order that a playlist is sorted
                        by
                    enum:
                    - name
                    - artist
                    - date
                    - album
                    nullable: true
                    type: string
                provider:
                    $ref: '#/components/schemas/PlayQueueItemType'
                startNowFromPosition:
                    description: Start playing specified track as soon as possible.
                        This works for any type, for `track` set to 0 and for `playlist`
                        specify the wanted track from position 0
                    format: int32
                    nullable: true
                    type: integer
                type:
                    enum:
                    - track
                    - playlist
                    type: string
                uri:
                    description: This can be url, track id, playlist id, radio id
                        and suchlike
                    type: string
            required:
            - provider
            - type
            - uri
            type: object
        PlayQueueItemType:
            properties:
                value:
                    enum:
                    - uri
                    - dlna
                    - radio
                    - deezer
                    - beoCloud
                    - tidal
                    type: string
            required:
            - value
            type: object
        PlayQueueSettings:
            properties:
                consume:
                    type: boolean
                gapless:
                    type: boolean
                repeat:
                    enum:
                    - all
                    - track
                    - none
                    type: string
                shuffle:
                    type: boolean
            type: object
        PlaybackContentMetadata:
            properties:
                albumName:
                    type: string
                art:
                    items:
                        $ref: '#/components/schemas/Art'
                    type: array
                artistName:
                    type: string
                bitdepth:
                    format: int32
                    type: integer
                bitrate:
                    format: int32
                    type: integer
                containerName:
                    type: string
                encoding:
                    enum:
                    - pcm
                    - wav
                    - mp3
                    - oggvorbis
                    - aac
                    - flac
                    - sbc
                    - alac
                    - opus
                    - DolbyDigital
                    - DolbyDigitalPlus
                    - DolbyTrueHD
                    - unknown
                    type: string
                genre:
                    type: string
                id:
                    type: integer
                inputChannelProcessing:
                    description: |
                        Input processing/decoding on top of the base codec indicated in encoding. E.g. Dolby Atmos on top of Dolby TrueHD or Dolby Surround on top of PCM. For Dolby, this value has priority over encoding, meaning that if inputChannelProcessing has a value, it must be indicated in the app, and optionally the encoding value can be indicated as well. If inputChannelProcessing does not have value the encoding value must be indicated.
                    enum:
                    - dolbySurround
                    - dolbyAtmos
                    nullable: true
                    type: string
                inputChannels:
                    description: e.g. 5.1
                    nullable: true
                    type: string
                isExplicit:
                    type: boolean
                organization:
                    description: |
                        This can be filled by gstreamer's GST_TAG_ORGANIZATION. Mozart can also fill this with netradio station name like "P3" and TV content like "Netflix". This is needed so it's possible to show who the provider is for the playing audio track/content.
                    type: string
                outputChannelProcessing:
                    description: e.g. downmix
                    enum:
                    - Direct
                    - Downmix
                    - TrueImage
                    nullable: true
                    type: string
                outputChannels:
                    description: e.g. 7.1
                    nullable: true
                    type: string
                queueId:
                    $ref: '#/components/schemas/PlayQueueIdType'
                remoteLeader:
                    $ref: '#/components/schemas/BeolinkLeader'
                remoteSource:
                    nullable: true
                    type: string
                samplerate:
                    format: int32
                    type: integer
                source:
                    type: string
                sourceInternalId:
                    type: string
                tags:
                    items:
                        type: string
                    type: array
                title:
                    type: string
                totalDuration:
                    description: to be removed once all devices and apps are updated
                    format: int32
                    nullable: true
                    type: integer
                totalDurationSeconds:
                    format: int32
                    nullable: true
                    type: integer
                track:
                    format: int32
                    type: integer
                trackCount:
                    format: int32
                    type: integer
                uri:
                    type: string
            type: object
        PlaybackError:
            properties:
                error:
                    type: string
                item:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
            type: object
        PlaybackProgress:
            properties:
                id:
                    type: string
                progress:
                    format: int32
                    type: integer
                totalDuration:
                    format: int32
                    nullable: true
                    type: integer
            type: object
        PlaybackState:
            properties:
                metadata:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
                progress:
                    $ref: '#/components/schemas/PlaybackProgress'
                source:
                    $ref: '#/components/schemas/Source'
                state:
                    $ref: '#/components/schemas/RenderingState'
            type: object
        PowerLinkTrigger:
            properties:
                powerLinkPreset:
                    description: |
                        Despite the name, this preset is used anytime a speaker is used as a
                        secondary as a way for the primary to indicate which directivity
                        (and possibly other caracteristics in the future) should be used on
                        a speaker by speaker basis. It is used when a speaker is a powerlink
                        speaker (hence the name), WISA speaker or a speakerlink secondary in multichannel.
                    type: integer
            type: object
        PowerStateEnum:
            properties:
                value:
                    enum:
                    - networkStandby
                    - 'on'
                    - standby
                    - shutdown
                    - storage
                    type: string
            type: object
        PowerlinkConnectionStateEnum:
            description: Indicated the state of the connection with powerlink
            nullable: true
            properties:
                value:
                    enum:
                    - disabled
                    - enabledPendingData
                    - enabledWithData
                    type: string
            type: object
        Preset:
            allOf:
            -   $ref: '#/components/schemas/SceneTriggerBaseProperties'
            -   properties:
                    content:
                        $ref: '#/components/schemas/ContentItem'
                        nullable: true
                    id:
                        type: string
                    name:
                        nullable: true
                        type: string
                    source:
                        $ref: '#/components/schemas/SourceTypeEnum'
                        nullable: true
                    title:
                        type: string
                type: object
        PresetMap:
            additionalProperties:
                $ref: '#/components/schemas/Preset'
            type: object
        ProductCurtainStatus:
            properties:
                moving:
                    type: boolean
                position:
                    enum:
                    - unknown
                    - closed
                    - narrow
                    - wide
                    type: string
            type: object
        ProductFriendlyName:
            properties:
                friendlyName:
                    description: |
                        The friendly name of the product, assignable by the end user, e.g. 'Kitchen speaker
                    type: string
            type: object
        ProductState:
            properties:
                microphones:
                    $ref: '#/components/schemas/MicrophonesState'
                playback:
                    $ref: '#/components/schemas/PlaybackState'
                powerState:
                    $ref: '#/components/schemas/PowerStateEnum'
                softwareUpdateState:
                    $ref: '#/components/schemas/SoftwareUpdateState'
                soundSettings:
                    $ref: '#/components/schemas/SoundSettings'
                source:
                    $ref: '#/components/schemas/Source'
                tv:
                    $ref: '#/components/schemas/TvState'
                volume:
                    $ref: '#/components/schemas/VolumeState'
            type: object
        RemoteMenuItem:
            allOf:
            -   $ref: '#/components/schemas/RemoteMenuItemProperties'
            -   properties:
                    available:
                        nullable: true
                        type: boolean
                    content:
                        $ref: '#/components/schemas/ContentItem'
                    fixed:
                        description: True if this is a fixed menu item. A fixed item
                            can't be deleted or moved
                        type: boolean
                    id:
                        description: Unique ID for this menu item
                        format: uuid
                        type: string
                required:
                - id
                - fixed
                type: object
        RemoteMenuItemMap:
            additionalProperties:
                $ref: '#/components/schemas/RemoteMenuItem'
            example:
                6c2ab917-2a9e-42dd-87c6-1fa2fabcdeb0:
                    content:
                        contentUri: netRadio://123456
                        source: netRadio
                    label: P3
                ee5196ce-65c4-4c56-9a48-1943c4afef9c:
                    content:
                        contentUri: tv://netflix
                        source: netRadio
                    label: Netflix
            type: object
        RemoteMenuItemProperties:
            allOf:
            -   $ref: '#/components/schemas/SceneTriggerBaseProperties'
            -   properties:
                    disabled:
                        nullable: true
                        type: boolean
                    dynamicList:
                        description: |
                            Let mozart create a dynamic list. This list will be attached as children to the menu item. If dynamicList is set it's not possible to change or manipulate any of the children because mozart can alter them at any given time
                        enum:
                        - none
                        - radioFavorites
                        nullable: true
                        type: string
                    firstChildMenuItemId:
                        description: ID of the first child menu item
                        format: uuid
                        nullable: true
                        type: string
                    label:
                        description: Alternative label, if omitted mozart will try
                            its best
                        nullable: true
                        type: string
                    nextSiblingMenuItemId:
                        description: ID of the next sibling menu item
                        format: uuid
                        nullable: true
                        type: string
                    parentMenuItemId:
                        description: ID of the parent menu item
                        format: uuid
                        nullable: true
                        type: string
                type: object
        RemoteUIKeyState:
            properties:
                state:
                    description: |
                        The state of the pressed key. ShortPress and LongPress's duration are determined by the remote. Whereas Down, Continue, and Release reflect the state of the key and press duration is the time between a Down and a Release state. Continue indicates that a button is pressed and the key event should be handled multiple times until a release is received.
                    enum:
                    - ShortPress
                    - LongPress
                    - Down
                    - Continue
                    - Release
                    type: string
            type: object
        RenderingState:
            properties:
                value:
                    enum:
                    - idle
                    - buffering
                    - started
                    - paused
                    - stopped
                    - ended
                    - error
                    - unknown
                    type: string
            type: object
        RoomCompensation:
            properties:
                value:
                    $ref: '#/components/schemas/RoomCompensationValue'
            required:
            - value
            type: object
        RoomCompensationCurrentMeasurement:
            description: |
                State and speaker ID of the currently running measurement.
                Is only relevant for advanced room compensation.
            properties:
                speakerId:
                    $ref: '#/components/schemas/SpeakerId'
                    description: Speaker ID of the speaker being measured.
                state:
                    description: |
                        State of the measurement for the speaker.
                        started:
                          The measurement has started.
                        done:
                          The measurement has ended successfully.
                        lastDone:
                          The last measurement in the run has ended successfully.
                        error:
                          An error occurred during measurement.
                    enum:
                    - started
                    - done
                    - lastDone
                    - error
                    type: string
            type: object
        RoomCompensationDebug:
            properties:
                value:
                    type: boolean
            type: object
        RoomCompensationEnabled:
            properties:
                value:
                    type: boolean
            type: object
        RoomCompensationErrorDetails:
            properties:
                errorList:
                    description: List of the speakers where measurement failed, including
                        error type.
                    items:
                        $ref: '#/components/schemas/RoomCompensationMeasurementError'
                    type: array
            type: object
        RoomCompensationFeature:
            allOf:
            -   $ref: '#/components/schemas/RoomCompensation'
            -   $ref: '#/components/schemas/RoomCompensationRange'
        RoomCompensationInfo:
            properties:
                debug:
                    $ref: '#/components/schemas/RoomCompensationDebug'
                enabled:
                    $ref: '#/components/schemas/RoomCompensationEnabled'
                lastResult:
                    $ref: '#/components/schemas/RoomCompensationResult'
                lastRun:
                    $ref: '#/components/schemas/RoomCompensationState'
                type:
                    $ref: '#/components/schemas/RoomCompensationType'
                version:
                    $ref: '#/components/schemas/RoomCompensationVersion'
            type: object
        RoomCompensationMeasurementError:
            properties:
                error:
                    description: |
                        noError:
                          The measurement went OK.
                        lowSignal:
                          When there is too low signal in the recording, e.g. due to a loudspeaker being placed at
                          too great a distance from the microphone.
                        speakerSilent:
                          No signal could be measured.
                          Could be because:
                            - The speaker is powered off or not connected.
                            - The left/right switch on a wired powerlink speaker is set in the wrong position.
                            - The speaker is placed in another room behind closed doors.
                        noisy<Left/Right/External>Microphone:
                          When the recording of the given microphone is too noisy.
                          Could be because:
                            - Something is blocking the microphone
                        externalMicrophoneLocation:
                          When the location of the external microphone is invalid.
                        externalMicrophoneMissing:
                          If the external microphone was missing/disconnected during a measurement.
                        microphonesDisabled:
                          If the microphones are either muted or disabled.
                        noisyMeasurement:
                          When too much background noise has been detected during the measurement
                        internalError:
                          Something went wrong internally - can not be fixed by the user. Try again.
                    enum:
                    - noError
                    - lowSignal
                    - speakerSilent
                    - noisyLeftMicrophone
                    - noisyRightMicrophone
                    - noisyExternalMicrophone
                    - externalMicrophoneLocation
                    - externalMicrophoneMissing
                    - microphonesDisabled
                    - noisyMeasurement
                    - internalError
                    type: string
                speakerId:
                    $ref: '#/components/schemas/SpeakerId'
                    description: |
                        Speaker ID of the speaker with measurement error.
                        Is only relevant for advanced room compensation.
            type: object
        RoomCompensationProperties:
            allOf:
            -   $ref: '#/components/schemas/RoomCompensationType'
            -   properties:
                    action:
                        description: |
                            Must be set if room compensation type is advanced.
                            runAll:
                              Do measurements on all connected speakers.
                            continue:
                              Continue from and including the speaker where last interrupted (stopped or failed).
                            useSpeakerList:
                              Do measurements on the speakers in the list property.
                        enum:
                        - runAll
                        - continue
                        - useSpeakerList
                        nullable: true
                        type: string
                    continueOnError:
                        description: |
                            On failing measurement on a speaker, default behavior is to stop measurement and skip the remaining speakers.
                            Setting continueOnError to true will make the measurement process continue and finish measurement on all speakers,
                            even though an error ocurred on one of the speakers.
                        nullable: true
                        type: boolean
                    latencyProfile:
                        $ref: '#/components/schemas/LatencyProfile'
                        nullable: true
                    skipAutomaticRoleAssignment:
                        description: Skip calculation of automatic role assignment.
                        nullable: true
                        type: boolean
                    speakerList:
                        description: |
                            List of speaker IDs to include in room compensation / automatic role assignment measurement.
                            Relevant e.g. if you want to create a speaker group without the external speakers included.
                            This can not be used for doing measurements on a partial speaker group, only on all
                            speakers in an existing group or for all speakers in a new group.
                        items:
                            $ref: '#/components/schemas/SpeakerId'
                        nullable: true
                        type: array
                    speakerPreset:
                        description: The Powerlink preset to use for the external
                            PL/WPL speakers.
                        format: int32
                        maximum: 255
                        minimum: 0
                        nullable: true
                        type: integer
                type: object
        RoomCompensationRange:
            properties:
                default:
                    $ref: '#/components/schemas/RoomCompensationValue'
                    description: Product and role specific default room compensation
                        value
                maxItems:
                    description: Maximum number of items in the `value` field
                    maximum: 20
                    minimum: 1
                    type: integer
                range:
                    description: Possible values for the `value` field
                    example:
                    - internal
                    - external
                    items:
                        type: string
                    type: array
            required:
            - default
            - range
            type: object
        RoomCompensationResponse:
            properties:
                frequency:
                    format: int32
                    type: integer
                gain:
                    format: double
                    type: number
            type: object
        RoomCompensationResult:
            properties:
                compensation:
                    items:
                        $ref: '#/components/schemas/RoomCompensationResponse'
                    type: array
                measuredResponse:
                    items:
                        $ref: '#/components/schemas/RoomCompensationResponse'
                    type: array
                placement:
                    enum:
                    - free
                    - nearWall
                    - unknown
                    type: string
                referenceResponse:
                    items:
                        $ref: '#/components/schemas/RoomCompensationResponse'
                    type: array
                speakerGroupSuggestion:
                    $ref: '#/components/schemas/SpeakerGroup'
                    description: |
                        Result from automatic speaker role assignment and room compensation measurements.
                        Is only relevant for advanced room compensation.
                        Includes id, type, role, gain, distance and location for requested speakers,
                        together with the ID of the room compensation result.
                        This is not persisted on Mozart side, but can be used by the client,
                        e.g. as basis for a new speaker group.
                timeStamp:
                    format: date-time
                    type: string
            type: object
        RoomCompensationState:
            allOf:
            -   $ref: '#/components/schemas/RoomCompensationStateValue'
            -   properties:
                    error:
                        description: |
                            microphoneMuted:
                              The microphone is muted (soft-off, using touch button).
                            microphoneSwitchOff:
                              The microphone switch is set in its off position.
                            microphoneSignalMissing:
                              No signal was detected. Is the microphone blocked?
                            externalMicrophoneMissing:
                              The external microphone is not connected.
                              Is only relevant for advanced room compensation.
                            externalMicrophoneInvalidPosition:
                              The external microphone is placed in an invalid position,
                              e.g. placed too close or in an extreme angle to the internal speakers.
                              Is only relevant for advanced room compensation.
                            noisyEnvironment:
                              Too much environment noise to get a valid measurement.
                            speakerMeasurementFailed:
                              A measurement failed, related to one of the individual speakers.
                              See the errorDetails property for details about the error and which speaker measurement failed.
                              Is only relevant for advanced room compensation.
                            invalidSpeakerList:
                              The speaker list contains invalid speakers.
                              Valid speakers are: all external speakers and non-virtual internal speakers.
                              Is only relevant for advanced room compensation.
                            invalidAction:
                              Could not start with given action.
                              Eg. can't run from last failed speaker if there isn't any failed run.
                              Is only relevant for advanced room compensation.
                            internalError:
                              Internal product error.
                        enum:
                        - noError
                        - microphoneMuted
                        - microphoneSwitchOff
                        - microphoneSignalMissing
                        - externalMicrophoneMissing
                        - externalMicrophoneInvalidPosition
                        - noisyEnvironment
                        - speakerMeasurementFailed
                        - invalidSpeakerList
                        - invalidAction
                        - internalError
                        type: string
                    errorDetails:
                        $ref: '#/components/schemas/RoomCompensationErrorDetails'
                    lastRunAvailable:
                        description: |
                            When true, measurements have been cached due to manual interrupt or failure,
                            making it possible to use the action "continue" where the system will continue from the speaker where interrupted.
                            The cached measurements are only temporary and will be cleared after some time (default 15min),
                            in which case lastRunAvailable becomes false.
                        type: boolean
                    properties:
                        $ref: '#/components/schemas/RoomCompensationProperties'
                    timeStamp:
                        format: date-time
                        type: string
                type: object
        RoomCompensationStateValue:
            properties:
                state:
                    enum:
                    - notStarted
                    - running
                    - done
                    - error
                    - stopped
                    type: string
            type: object
        RoomCompensationType:
            properties:
                value:
                    description: |
                        The type of roomcompensation used / to use.
                        simple:
                          For speakers without external speakers.
                        advanced:
                          For products with external speakers or other advanced multichannel capabilities.
                          This requires that at least action in the other properties of RoomCompensationProperties is set.
                    enum:
                    - simple
                    - advanced
                    type: string
            type: object
        RoomCompensationValue:
            description: |
                List of room compensation sweeps to combine. No room compensation is done
                if this list is empty. The maximum length of this list is product
                specific.
            items:
                type: string
            type: array
        RoomCompensationVersion:
            properties:
                algorithm:
                    format: int32
                    minimum: 0
                    type: integer
                coefficients:
                    format: int32
                    minimum: 0
                    type: integer
            type: object
        Scene:
            allOf:
            -   $ref: '#/components/schemas/SceneProperties'
            -   $ref: '#/components/schemas/SceneClassification'
        SceneClassification:
            properties:
                classification:
                    description: The classification of Scene
                    enum:
                    - system
                    - userDefined
                    nullable: true
                    type: string
            type: object
        SceneList:
            description: A list of scenes
            items:
                format: uuid
                type: string
            type: array
        SceneMap:
            additionalProperties:
                $ref: '#/components/schemas/Scene'
            example:
                fdecf968-3ab9-46dc-a71d-e4204ef47fdb:
                    actionList:
                    -   type: volume
                        volumeLevel: 35
                    -   radioStationId: '8779112938791514'
                        type: radio
                    -   stopDuration: 20
                        type: stop
                    label: New label
            type: object
        SceneMatch:
            properties:
                label:
                    nullable: true
                    type: string
                tags:
                    $ref: '#/components/schemas/SceneTags'
                    nullable: true
            type: object
        SceneProperties:
            properties:
                actionList:
                    $ref: '#/components/schemas/ActionList'
                clientContext:
                    description: |
                        An optional generic string property supplied from the client. If
                        supplied it will overwrite any currently stored clientContext. If
                        not supplied any stored clientContext will be left unchanged.
                    maxLength: 4096
                    nullable: true
                    type: string
                label:
                    nullable: true
                    type: string
                tags:
                    $ref: '#/components/schemas/SceneTags'
                    nullable: true
            required:
            - actionList
            type: object
        SceneTags:
            description: A list of user defined tags. This allows a client to create
                virtual lists
            items:
                type: string
            type: array
        SceneTriggerBaseProperties:
            description: Base properties for a scene trigger
            properties:
                actionList:
                    $ref: '#/components/schemas/ActionList'
                    nullable: true
                sceneList:
                    $ref: '#/components/schemas/SceneList'
                    description: |
                        Actions will be extracted from all scenes in this list and will be merged together with (`actionList`).
                        On colliding actions the priority will be: (N represent last index in `sceneList`)
                        1. `actionList`
                        2. scene N in `sceneList`
                        ...
                        3. scene 0 in `sceneList`
                    nullable: true
            type: object
        SerialNumber:
            description: Speaker serial number
            example: '12345678'
            pattern: ^\d{8}
            type: string
        SoftwareUpdateState:
            properties:
                secondsRemaining:
                    format: int32
                    type: integer
                value:
                    enum:
                    - idle
                    - checking
                    - updateCheckFailed
                    - noUpdatesAvailable
                    - updateAvailable
                    - downloadingUpdate
                    - updateDownloaded
                    - downloadFailed
                    - installingUpdate
                    - installingAutomaticUpdate
                    - installationFailed
                    - installationDonePendingReboot
                    - schedulerFailed
                    - rebooting
                    type: string
            type: object
        SoftwareUpdateStatus:
            properties:
                availableUpdate:
                    $ref: '#/components/schemas/SoftwareVersion'
                lastCheck:
                    format: date-time
                    type: string
                lastUpdate:
                    format: date-time
                    type: string
                softwareVersion:
                    $ref: '#/components/schemas/SoftwareVersion'
                state:
                    $ref: '#/components/schemas/SoftwareUpdateState'
                updateProgress:
                    format: int32
                    type: integer
                updateType:
                    enum:
                    - none
                    - normal
                    - critical
                    - forced
                    type: string
            required:
            - softwareVersion
            - state
            type: object
        SoftwareVersion:
            type: string
        SoundAdjustments:
            properties:
                ambience:
                    format: double
                    type: number
                bass:
                    format: int32
                    type: integer
                directivity:
                    type: string
                ecoMode:
                    type: boolean
                fadein:
                    type: boolean
                loudness:
                    type: boolean
                treble:
                    format: int32
                    type: integer
            type: object
        SoundFeatureSet:
            properties:
                ambience:
                    $ref: '#/components/schemas/AmbienceFeature'
                balance:
                    $ref: '#/components/schemas/BalanceFeature'
                bass:
                    $ref: '#/components/schemas/BassFeature'
                bass-management:
                    $ref: '#/components/schemas/BassManagementFeature'
                compression:
                    $ref: '#/components/schemas/CompressionFeature'
                directivity:
                    $ref: '#/components/schemas/DirectivityFeature'
                fader:
                    $ref: '#/components/schemas/FaderFeature'
                roomCompensation:
                    $ref: '#/components/schemas/RoomCompensationFeature'
                spatial-envelopment:
                    $ref: '#/components/schemas/SpatialEnvelopmentFeature'
                spatial-height:
                    $ref: '#/components/schemas/SpatialHeightFeature'
                spatial-processing:
                    $ref: '#/components/schemas/SpatialProcessingFeature'
                spatial-surround:
                    $ref: '#/components/schemas/SpatialSurroundFeature'
                spatial-width:
                    $ref: '#/components/schemas/SpatialWidthFeature'
                speech-enhance:
                    $ref: '#/components/schemas/SpeechEnhanceFeature'
                toneTouchX:
                    $ref: '#/components/schemas/ToneTouchXFeature'
                toneTouchY:
                    $ref: '#/components/schemas/ToneTouchYFeature'
                treble:
                    $ref: '#/components/schemas/TrebleFeature'
            type: object
        SoundSettings:
            properties:
                adjustments:
                    $ref: '#/components/schemas/SoundAdjustments'
                roomCompensation:
                    $ref: '#/components/schemas/RoomCompensationInfo'
                toneTouch:
                    $ref: '#/components/schemas/SoundToneTouch'
            type: object
        SoundToneTouch:
            properties:
                x:
                    format: double
                    type: number
                y:
                    format: double
                    type: number
                z:
                    format: double
                    type: number
            type: object
        Source:
            properties:
                id:
                    type: string
                isEnabled:
                    description: some sources require an explicit activation or accept
                        of terms before being enabled
                    type: boolean
                isMultiroomAvailable:
                    type: boolean
                isPlayable:
                    type: boolean
                isSeekable:
                    type: boolean
                name:
                    type: string
                type:
                    $ref: '#/components/schemas/SourceTypeEnum'
            type: object
        SourceArray:
            properties:
                items:
                    items:
                        $ref: '#/components/schemas/Source'
                    type: array
            type: object
        SourceTypeEnum:
            properties:
                value:
                    description: |-
                        - beolink
                        - bluetooth
                        - dlna
                        - qplay
                        - airPlay
                        - lineIn
                        - chromeCast
                        - uriStreamer
                        - netRadio
                        - local
                        - generator
                        - spotify
                        - spdif
                        - pl
                        - wpl
                        - tv
                        - deezer
                        - usbIn
                        - tidal
                        - tidalConnect
                        - unknown
                    example: netRadio
                    type: string
            type: object
        SpatialEnvelopment:
            properties:
                value:
                    description: Selected spatial-envelopment value
                    format: double
                    type: number
            required:
            - value
            type: object
        SpatialEnvelopmentFeature:
            allOf:
            -   $ref: '#/components/schemas/SpatialEnvelopment'
            -   $ref: '#/components/schemas/SpatialEnvelopmentRange'
        SpatialEnvelopmentRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpatialEnvelopment'
                    description: Default spatial-envelopment value
                range:
                    description: spatial-envelopment range
                    items:
                        $ref: '#/components/schemas/SpatialEnvelopment'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        SpatialHeight:
            properties:
                value:
                    description: Selected spatial-height value
                    format: double
                    type: number
            required:
            - value
            type: object
        SpatialHeightFeature:
            allOf:
            -   $ref: '#/components/schemas/SpatialHeight'
            -   $ref: '#/components/schemas/SpatialHeightRange'
        SpatialHeightRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpatialHeight'
                    description: Default spatial-height value
                range:
                    description: spatial-height range
                    items:
                        $ref: '#/components/schemas/SpatialHeight'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        SpatialProcessing:
            properties:
                value:
                    description: Selected spatial-processing value
                    enum:
                    - direct
                    - trueimage
                    - downmix
                    type: string
            required:
            - value
            type: object
        SpatialProcessingFeature:
            allOf:
            -   $ref: '#/components/schemas/SpatialProcessing'
            -   $ref: '#/components/schemas/SpatialProcessingRange'
        SpatialProcessingRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpatialProcessing'
                    description: Default spatial-processing value
                range:
                    description: spatial-processing range
                    items:
                        $ref: '#/components/schemas/SpatialProcessing'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        SpatialSurround:
            properties:
                value:
                    description: Selected spatial-surround value
                    format: double
                    type: number
            required:
            - value
            type: object
        SpatialSurroundFeature:
            allOf:
            -   $ref: '#/components/schemas/SpatialSurround'
            -   $ref: '#/components/schemas/SpatialSurroundRange'
        SpatialSurroundRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpatialSurround'
                    description: Default spatial-surround value
                range:
                    description: spatial-surround range
                    items:
                        $ref: '#/components/schemas/SpatialSurround'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        SpatialWidth:
            properties:
                value:
                    description: Selected spatial-width value
                    format: double
                    type: number
            required:
            - value
            type: object
        SpatialWidthFeature:
            allOf:
            -   $ref: '#/components/schemas/SpatialWidth'
            -   $ref: '#/components/schemas/SpatialWidthRange'
        SpatialWidthRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpatialWidth'
                    description: Default spatial-width value
                range:
                    description: spatial-width range
                    items:
                        $ref: '#/components/schemas/SpatialWidth'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        SpeakerGroup:
            properties:
                crossoverFrequency:
                    description: Crossover frequency for bass management in Hz
                    format: int32
                    maximum: 300
                    minimum: 20
                    nullable: true
                    type: integer
                enablePhaseCompensation:
                    description: Enable phase compensation in bass management.
                    nullable: true
                    type: boolean
                friendlyName:
                    description: |
                        Friendly name of the SpeakerGroup.
                        Required when creating a new group
                    nullable: true
                    type: string
                id:
                    $ref: '#/components/schemas/SpeakerGroupId'
                    nullable: true
                isDeleteable:
                    nullable: true
                    type: boolean
                items:
                    items:
                        $ref: '#/components/schemas/SpeakerGroupMember'
                    nullable: true
                    type: array
                latencyProfile:
                    $ref: '#/components/schemas/LatencyProfile'
                    nullable: true
                roomCompensationId:
                    description: |
                        ID of the calculated coefficents for this group, made during advanced room compensation.
                        When updating an existing group, an empty string will clear roomCompensationId.
                    format: uuid
                    nullable: true
                    type: string
                speakerPreset:
                    description: Speaker preset / listening mode eg. BL28 curtain
                        position etc.
                    format: int32
                    maximum: 99
                    minimum: 0
                    nullable: true
                    type: integer
            type: object
        SpeakerGroupId:
            format: uuid
            type: string
        SpeakerGroupMember:
            properties:
                distance:
                    description: Distance from listening position in cm
                    format: int32
                    maximum: 1500
                    minimum: 0
                    nullable: true
                    type: integer
                friendlyName:
                    nullable: true
                    type: string
                gain:
                    description: Level in dB
                    format: float
                    maximum: 6
                    minimum: -24
                    nullable: true
                    type: number
                id:
                    type: string
                location:
                    description: |
                        Coordinates of the speaker position in cm.
                        Location is only relevant when the group is based on the automatic role assignment of advanced room compensation.
                        The location is relative to the external microphone used during advanced room compensation measurements:
                          x=0, y=0, z=0: The location of the external microphone used during measurement.
                          x<0: To the left of the external microphone.
                          x>0: To the right of the external microphone.
                          y<0: Behind the external microphone.
                          y>0: In front of the external microphone.
                          z<0: Above the external microphone (may not be reliable).
                          z>0: Below the external microphone (may not be reliable).
                    nullable: true
                    properties:
                        x:
                            format: int32
                            type: integer
                        y:
                            format: int32
                            type: integer
                        z:
                            format: int32
                            type: integer
                    required:
                    - x
                    - y
                    - z
                    type: object
                redirectionLevel:
                    description: Redirection level for bass management in dB
                    format: int32
                    maximum: 6
                    minimum: -100
                    nullable: true
                    type: integer
                role:
                    $ref: '#/components/schemas/SpeakerRole'
                type:
                    nullable: true
                    type: string
            required:
            - id
            type: object
        SpeakerGroupOverview:
            properties:
                friendlyName:
                    type: string
                id:
                    $ref: '#/components/schemas/SpeakerGroupId'
                isDeleteable:
                    type: boolean
            required:
            - friendlyName
            - id
            - isDeleteable
            type: object
        SpeakerId:
            example: FrontLeft
            type: string
        SpeakerLinkMemberStatus:
            properties:
                baseUrl:
                    description: API prefix to use when talking to the secondary
                    format: uri
                    nullable: true
                    type: string
                health:
                    enum:
                    - unknown
                    - good
                    - warning
                    - bad
                    example: good
                    type: string
                ipAddress:
                    $ref: '#/components/schemas/OptionalIpAddress'
                networkType:
                    enum:
                    - none
                    - wired
                    - wireless
                    type: string
                productType:
                    type: string
                serialNumber:
                    $ref: '#/components/schemas/SerialNumber'
                updatedAt:
                    $ref: '#/components/schemas/Timestamp'
            required:
            - health
            - serialNumber
            - updatedAt
            - productName
            - networkType
            type: object
        SpeakerLinkStatus:
            properties:
                speakers:
                    items:
                        $ref: '#/components/schemas/SpeakerLinkMemberStatus'
                    type: array
                type:
                    enum:
                    - standalone
                    - stereo
                    - surround
                    type: string
            required:
            - type
            - speakers
            type: object
        SpeakerRole:
            nullable: true
            type: string
        SpeakerRoleEnum:
            properties:
                value:
                    enum:
                    - standalone
                    - multichannel
                    type: string
            type: object
        SpeechEnhance:
            properties:
                value:
                    description: Selected speech-enhance value
                    format: double
                    type: number
            required:
            - value
            type: object
        SpeechEnhanceFeature:
            allOf:
            -   $ref: '#/components/schemas/SpeechEnhance'
            -   $ref: '#/components/schemas/SpeechEnhanceRange'
        SpeechEnhanceRange:
            properties:
                default:
                    $ref: '#/components/schemas/SpeechEnhance'
                    description: Default speech-enhance value
                range:
                    description: speech-enhance range
                    items:
                        $ref: '#/components/schemas/SpeechEnhance'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        StandConnected:
            properties:
                connected:
                    type: boolean
            type: object
        StandMovement:
            properties:
                angle:
                    format: float
                    nullable: true
                    type: number
                ignoreEndstop:
                    example: false
                    type: boolean
                standMotion:
                    enum:
                    - continuousCCW
                    - stepCCW
                    - stop
                    - stepCW
                    - continuousCW
                    type: string
            type: object
        StandPosition:
            properties:
                angle:
                    format: float
                    type: number
            type: object
        SupportedSoundFeatures:
            additionalProperties:
                $ref: '#/components/schemas/SoundFeatureSet'
            description: Supported sound features
            type: object
        Timestamp:
            description: Timestamp in RFC3393 format
            format: date-time
            type: string
        ToneTouch:
            properties:
                x:
                    $ref: '#/components/schemas/ToneTouchType'
                y:
                    $ref: '#/components/schemas/ToneTouchType'
            type: object
        ToneTouchType:
            properties:
                value:
                    format: double
                    type: number
            required:
            - value
            type: object
        ToneTouchTypeRange:
            properties:
                default:
                    $ref: '#/components/schemas/ToneTouchType'
                    description: Product and role specific default ToneTouch X or
                        Y
                range:
                    description: Product and role specific tone touch X or Y range
                    items:
                        $ref: '#/components/schemas/ToneTouchType'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        ToneTouchXFeature:
            allOf:
            -   $ref: '#/components/schemas/ToneTouchType'
            -   $ref: '#/components/schemas/ToneTouchTypeRange'
        ToneTouchYFeature:
            allOf:
            -   $ref: '#/components/schemas/ToneTouchType'
            -   $ref: '#/components/schemas/ToneTouchTypeRange'
        Treble:
            properties:
                value:
                    description: Selected treble value
                    format: int32
                    type: integer
            required:
            - value
            type: object
        TrebleFeature:
            allOf:
            -   $ref: '#/components/schemas/Treble'
            -   $ref: '#/components/schemas/TrebleRange'
        TrebleRange:
            properties:
                default:
                    $ref: '#/components/schemas/Treble'
                    description: Product and role specific default treble value
                range:
                    description: Product and role specific treble range
                    items:
                        $ref: '#/components/schemas/Treble'
                    type: array
                    uniqueItems: true
            required:
            - default
            - range
            type: object
        TvInfoEventData:
            properties:
                integration:
                    $ref: '#/components/schemas/TvIntegrationTypes'
            type: object
        TvIntegrationTypes:
            properties:
                value:
                    enum:
                    - ThirdParty
                    - Lge
                    type: string
            type: object
        TvProperties:
            properties:
                integrationSupported:
                    $ref: '#/components/schemas/TvIntegrationTypes'
                name:
                    nullable: true
                    type: string
                year:
                    nullable: true
                    type: integer
            type: object
        TvSoundSettings:
            properties:
                lge:
                    $ref: '#/components/schemas/LgeTvSoundSettings'
            type: object
        TvState:
            properties:
                integration:
                    $ref: '#/components/schemas/TvIntegrationTypes'
                soundSettings:
                    $ref: '#/components/schemas/TvSoundSettings'
                tvInfo:
                    $ref: '#/components/schemas/TvProperties'
            type: object
        Uri:
            properties:
                location:
                    type: string
            type: object
        UserFlow:
            properties:
                userId:
                    format: int64
                    type: string
            type: object
        VideoPixelFormat:
            properties:
                bitdepth:
                    enum:
                    - bit8
                    - bit10
                    - bit12
                    type: string
                chromaSubsample:
                    enum:
                    - yCbCr444RGB
                    - yCbCr422
                    - yCbCr420
                    type: string
                colorimetry:
                    enum:
                    - rGB
                    - opRGB
                    - rGBP3D65
                    - rGBP3DCI
                    - rGB2020
                    - yCC601
                    - yCC709
                    - xvYCC601
                    - xvYCC709
                    - sYCC601
                    - opYCC601
                    - yCC2020NCL
                    - yCC2020NL
                    type: string
                fullRange:
                    type: boolean
            type: object
        VideoTimings:
            properties:
                horizontalResolution:
                    type: integer
                interlaced:
                    type: boolean
                refreshRate:
                    format: double
                    type: number
                verticalResolution:
                    type: integer
            type: object
        VolumeLevel:
            properties:
                level:
                    format: int32
                    type: integer
            type: object
        VolumeMute:
            properties:
                muted:
                    type: boolean
            type: object
        VolumeSettings:
            properties:
                default:
                    $ref: '#/components/schemas/VolumeLevel'
                maximum:
                    $ref: '#/components/schemas/VolumeLevel'
            type: object
        VolumeState:
            properties:
                default:
                    $ref: '#/components/schemas/VolumeLevel'
                level:
                    $ref: '#/components/schemas/VolumeLevel'
                maximum:
                    $ref: '#/components/schemas/VolumeLevel'
                muted:
                    $ref: '#/components/schemas/VolumeMute'
            type: object
        WebSocketEventActiveHdmiInputSignal:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_active_hdmi_input_signal_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_active_hdmi_input_signal_notifications():
                    """React on WebSocketEventActiveHdmiInputSignal events."""

                    def active_hdmi_input_signal_notifications(notification: HdmiInput):
                        """ActiveHdmiInputSignal notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_active_hdmi_input_signal_notifications(active_hdmi_input_signal_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_active_hdmi_input_signal_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_active_hdmi_input_signal_notifications():
                    """React on WebSocketEventActiveHdmiInputSignal events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventActiveHdmiInputSignal":
                                print(notification["eventData"])

                asyncio.run(receive_active_hdmi_input_signal_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/HdmiInput'
                eventType:
                    type: string
            type: object
        WebSocketEventActiveListeningMode:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_active_listening_mode_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_active_listening_mode_notifications():
                    """React on WebSocketEventActiveListeningMode events."""

                    def active_listening_mode_notifications(notification: ListeningModeProps):
                        """ActiveListeningMode notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_active_listening_mode_notifications(active_listening_mode_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_active_listening_mode_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_active_listening_mode_notifications():
                    """React on WebSocketEventActiveListeningMode events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventActiveListeningMode":
                                print(notification["eventData"])

                asyncio.run(receive_active_listening_mode_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/ListeningModeProps'
                eventType:
                    type: string
            type: object
        WebSocketEventActiveSpeakerGroup:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_active_speaker_group_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_active_speaker_group_notifications():
                    """React on WebSocketEventActiveSpeakerGroup events."""

                    def active_speaker_group_notifications(notification: SpeakerGroupOverview):
                        """ActiveSpeakerGroup notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_active_speaker_group_notifications(active_speaker_group_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_active_speaker_group_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_active_speaker_group_notifications():
                    """React on WebSocketEventActiveSpeakerGroup events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventActiveSpeakerGroup":
                                print(notification["eventData"])

                asyncio.run(receive_active_speaker_group_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/SpeakerGroupOverview'
                eventType:
                    type: string
            type: object
        WebSocketEventAlarmTimer:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_alarm_timer_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_alarm_timer_notifications():
                    """React on WebSocketEventAlarmTimer events."""

                    def alarm_timer_notifications(notification: AlarmTimerEventData):
                        """AlarmTimer notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_alarm_timer_notifications(alarm_timer_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_alarm_timer_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_alarm_timer_notifications():
                    """React on WebSocketEventAlarmTimer events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventAlarmTimer":
                                print(notification["eventData"])

                asyncio.run(receive_alarm_timer_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/AlarmTimerEventData'
                eventType:
                    type: string
            type: object
        WebSocketEventAlarmTriggered:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_alarm_triggered_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_alarm_triggered_notifications():
                    """React on WebSocketEventAlarmTriggered events."""

                    def alarm_triggered_notifications(notification: AlarmTriggeredInfo):
                        """AlarmTriggered notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_alarm_triggered_notifications(alarm_triggered_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_alarm_triggered_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_alarm_triggered_notifications():
                    """React on WebSocketEventAlarmTriggered events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventAlarmTriggered":
                                print(notification["eventData"])

                asyncio.run(receive_alarm_triggered_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/AlarmTriggeredInfo'
                eventType:
                    type: string
            type: object
        WebSocketEventBattery:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_battery_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_battery_notifications():
                    """React on WebSocketEventBattery events."""

                    def battery_notifications(notification: BatteryState):
                        """Battery notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_battery_notifications(battery_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_battery_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_battery_notifications():
                    """React on WebSocketEventBattery events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventBattery":
                                print(notification["eventData"])

                asyncio.run(receive_battery_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/BatteryState'
                eventType:
                    type: string
            type: object
        WebSocketEventBeoRemoteButton:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_beo_remote_button_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_beo_remote_button_notifications():
                    """React on WebSocketEventBeoRemoteButton events."""

                    def beo_remote_button_notifications(notification: BeoRemoteButton):
                        """BeoRemoteButton notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_beo_remote_button_notifications(beo_remote_button_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_beo_remote_button_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_beo_remote_button_notifications():
                    """React on WebSocketEventBeoRemoteButton events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/remoteControl") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventBeoRemoteButton":
                                print(notification["eventData"])

                asyncio.run(receive_beo_remote_button_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/BeoRemoteButton'
                eventType:
                    type: string
            type: object
        WebSocketEventBeolinkExperiencesResult:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_beolink_experiences_result_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_beolink_experiences_result_notifications():
                    """React on WebSocketEventBeolinkExperiencesResult events."""

                    def beolink_experiences_result_notifications(notification: BeolinkExperiencesResult):
                        """BeolinkExperiencesResult notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_beolink_experiences_result_notifications(beolink_experiences_result_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_beolink_experiences_result_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_beolink_experiences_result_notifications():
                    """React on WebSocketEventBeolinkExperiencesResult events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventBeolinkExperiencesResult":
                                print(notification["eventData"])

                asyncio.run(receive_beolink_experiences_result_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/BeolinkExperiencesResult'
                eventType:
                    type: string
            required:
            - eventType
            - eventData
            type: object
        WebSocketEventBeolinkJoinResult:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_beolink_join_result_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_beolink_join_result_notifications():
                    """React on WebSocketEventBeolinkJoinResult events."""

                    def beolink_join_result_notifications(notification: BeolinkJoinResult):
                        """BeolinkJoinResult notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_beolink_join_result_notifications(beolink_join_result_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_beolink_join_result_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_beolink_join_result_notifications():
                    """React on WebSocketEventBeolinkJoinResult events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventBeolinkJoinResult":
                                print(notification["eventData"])

                asyncio.run(receive_beolink_join_result_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/BeolinkJoinResult'
                eventType:
                    type: string
            required:
            - eventType
            - eventData
            type: object
        WebSocketEventButton:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_button_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_button_notifications():
                    """React on WebSocketEventButton events."""

                    def button_notifications(notification: ButtonEvent):
                        """Button notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_button_notifications(button_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_button_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_button_notifications():
                    """React on WebSocketEventButton events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventButton":
                                print(notification["eventData"])

                asyncio.run(receive_button_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/ButtonEvent'
                eventType:
                    type: string
            type: object
        WebSocketEventCurtains:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_curtains_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_curtains_notifications():
                    """React on WebSocketEventCurtains events."""

                    def curtains_notifications(notification: ProductCurtainStatus):
                        """Curtains notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_curtains_notifications(curtains_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_curtains_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_curtains_notifications():
                    """React on WebSocketEventCurtains events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventCurtains":
                                print(notification["eventData"])

                asyncio.run(receive_curtains_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/ProductCurtainStatus'
                eventType:
                    type: string
            type: object
        WebSocketEventHdmiVideoFormatSignal:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_hdmi_video_format_signal_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_hdmi_video_format_signal_notifications():
                    """React on WebSocketEventHdmiVideoFormatSignal events."""

                    def hdmi_video_format_signal_notifications(notification: HdmiVideoFormat):
                        """HdmiVideoFormatSignal notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_hdmi_video_format_signal_notifications(hdmi_video_format_signal_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_hdmi_video_format_signal_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_hdmi_video_format_signal_notifications():
                    """React on WebSocketEventHdmiVideoFormatSignal events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventHdmiVideoFormatSignal":
                                print(notification["eventData"])

                asyncio.run(receive_hdmi_video_format_signal_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/HdmiVideoFormat'
                eventType:
                    type: string
            type: object
        WebSocketEventNotification:
            description: |
                This telegram is used to send a tagged notification.
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_notification_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_notification_notifications():
                    """React on WebSocketEventNotification events."""

                    def notification_notifications(notification: WebsocketNotificationTag):
                        """Notification notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_notification_notifications(notification_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_notification_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_notification_notifications():
                    """React on WebSocketEventNotification events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventNotification":
                                print(notification["eventData"])

                asyncio.run(receive_notification_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/WebsocketNotificationTag'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackError:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_playback_error_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_playback_error_notifications():
                    """React on WebSocketEventPlaybackError events."""

                    def playback_error_notifications(notification: PlaybackError):
                        """PlaybackError notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_playback_error_notifications(playback_error_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_playback_error_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_playback_error_notifications():
                    """React on WebSocketEventPlaybackError events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventPlaybackError":
                                print(notification["eventData"])

                asyncio.run(receive_playback_error_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/PlaybackError'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackMetadata:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_playback_metadata_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_playback_metadata_notifications():
                    """React on WebSocketEventPlaybackMetadata events."""

                    def playback_metadata_notifications(notification: PlaybackContentMetadata):
                        """PlaybackMetadata notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_playback_metadata_notifications(playback_metadata_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_playback_metadata_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_playback_metadata_notifications():
                    """React on WebSocketEventPlaybackMetadata events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventPlaybackMetadata":
                                print(notification["eventData"])

                asyncio.run(receive_playback_metadata_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/PlaybackContentMetadata'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackProgress:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_playback_progress_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_playback_progress_notifications():
                    """React on WebSocketEventPlaybackProgress events."""

                    def playback_progress_notifications(notification: PlaybackProgress):
                        """PlaybackProgress notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_playback_progress_notifications(playback_progress_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_playback_progress_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_playback_progress_notifications():
                    """React on WebSocketEventPlaybackProgress events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventPlaybackProgress":
                                print(notification["eventData"])

                asyncio.run(receive_playback_progress_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/PlaybackProgress'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackSource:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_playback_source_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_playback_source_notifications():
                    """React on WebSocketEventPlaybackSource events."""

                    def playback_source_notifications(notification: Source):
                        """PlaybackSource notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_playback_source_notifications(playback_source_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_playback_source_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_playback_source_notifications():
                    """React on WebSocketEventPlaybackSource events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventPlaybackSource":
                                print(notification["eventData"])

                asyncio.run(receive_playback_source_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/Source'
                eventType:
                    type: string
            type: object
        WebSocketEventPlaybackState:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_playback_state_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_playback_state_notifications():
                    """React on WebSocketEventPlaybackState events."""

                    def playback_state_notifications(notification: RenderingState):
                        """PlaybackState notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_playback_state_notifications(playback_state_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_playback_state_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_playback_state_notifications():
                    """React on WebSocketEventPlaybackState events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventPlaybackState":
                                print(notification["eventData"])

                asyncio.run(receive_playback_state_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/RenderingState'
                eventType:
                    type: string
            type: object
        WebSocketEventPowerState:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_power_state_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_power_state_notifications():
                    """React on WebSocketEventPowerState events."""

                    def power_state_notifications(notification: PowerStateEnum):
                        """PowerState notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_power_state_notifications(power_state_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_power_state_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_power_state_notifications():
                    """React on WebSocketEventPowerState events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventPowerState":
                                print(notification["eventData"])

                asyncio.run(receive_power_state_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/PowerStateEnum'
                eventType:
                    type: string
            type: object
        WebSocketEventPowerlinkConnectionState:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_powerlink_connection_state_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_powerlink_connection_state_notifications():
                    """React on WebSocketEventPowerlinkConnectionState events."""

                    def powerlink_connection_state_notifications(notification: PowerlinkConnectionStateEnum):
                        """PowerlinkConnectionState notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_powerlink_connection_state_notifications(powerlink_connection_state_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_powerlink_connection_state_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_powerlink_connection_state_notifications():
                    """React on WebSocketEventPowerlinkConnectionState events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventPowerlinkConnectionState":
                                print(notification["eventData"])

                asyncio.run(receive_powerlink_connection_state_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/PowerlinkConnectionStateEnum'
                eventType:
                    type: string
            type: object
        WebSocketEventPucInstallRemoteIdStatus:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_puc_install_remote_id_status_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_puc_install_remote_id_status_notifications():
                    """React on WebSocketEventPucInstallRemoteIdStatus events."""

                    def puc_install_remote_id_status_notifications(notification: InstallRecordIdState):
                        """PucInstallRemoteIdStatus notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_puc_install_remote_id_status_notifications(puc_install_remote_id_status_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_puc_install_remote_id_status_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_puc_install_remote_id_status_notifications():
                    """React on WebSocketEventPucInstallRemoteIdStatus events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventPucInstallRemoteIdStatus":
                                print(notification["eventData"])

                asyncio.run(receive_puc_install_remote_id_status_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/InstallRecordIdState'
                eventType:
                    type: string
            type: object
        WebSocketEventRole:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_role_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_role_notifications():
                    """React on WebSocketEventRole events."""

                    def role_notifications(notification: SpeakerRoleEnum):
                        """Role notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_role_notifications(role_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_role_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_role_notifications():
                    """React on WebSocketEventRole events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventRole":
                                print(notification["eventData"])

                asyncio.run(receive_role_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/SpeakerRoleEnum'
                eventType:
                    type: string
            type: object
        WebSocketEventRoomCompensationCurrentMeasurementEvent:
            description: |
                Sent when a room compensation measurement is started/done.
                Is only sent when room compensation type is advanced.

                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_room_compensation_current_measurement_event_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_room_compensation_current_measurement_event_notifications():
                    """React on WebSocketEventRoomCompensationCurrentMeasurementEvent events."""

                    def room_compensation_current_measurement_event_notifications(notification: RoomCompensationCurrentMeasurement):
                        """RoomCompensationCurrentMeasurementEvent notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_room_compensation_current_measurement_event_notifications(room_compensation_current_measurement_event_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_room_compensation_current_measurement_event_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_room_compensation_current_measurement_event_notifications():
                    """React on WebSocketEventRoomCompensationCurrentMeasurementEvent events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventRoomCompensationCurrentMeasurementEvent":
                                print(notification["eventData"])

                asyncio.run(receive_room_compensation_current_measurement_event_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/RoomCompensationCurrentMeasurement'
                eventType:
                    type: string
            type: object
        WebSocketEventRoomCompensationState:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_room_compensation_state_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_room_compensation_state_notifications():
                    """React on WebSocketEventRoomCompensationState events."""

                    def room_compensation_state_notifications(notification: RoomCompensationStateValue):
                        """RoomCompensationState notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_room_compensation_state_notifications(room_compensation_state_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_room_compensation_state_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_room_compensation_state_notifications():
                    """React on WebSocketEventRoomCompensationState events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventRoomCompensationState":
                                print(notification["eventData"])

                asyncio.run(receive_room_compensation_state_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/RoomCompensationStateValue'
                eventType:
                    type: string
            type: object
        WebSocketEventSoftwareUpdateState:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_software_update_state_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_software_update_state_notifications():
                    """React on WebSocketEventSoftwareUpdateState events."""

                    def software_update_state_notifications(notification: SoftwareUpdateState):
                        """SoftwareUpdateState notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_software_update_state_notifications(software_update_state_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_software_update_state_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_software_update_state_notifications():
                    """React on WebSocketEventSoftwareUpdateState events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventSoftwareUpdateState":
                                print(notification["eventData"])

                asyncio.run(receive_software_update_state_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/SoftwareUpdateState'
                eventType:
                    type: string
            type: object
        WebSocketEventSoundSettings:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_sound_settings_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_sound_settings_notifications():
                    """React on WebSocketEventSoundSettings events."""

                    def sound_settings_notifications(notification: SoundSettings):
                        """SoundSettings notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_sound_settings_notifications(sound_settings_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_sound_settings_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_sound_settings_notifications():
                    """React on WebSocketEventSoundSettings events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventSoundSettings":
                                print(notification["eventData"])

                asyncio.run(receive_sound_settings_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/SoundSettings'
                eventType:
                    type: string
            type: object
        WebSocketEventSourceChange:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_source_change_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_source_change_notifications():
                    """React on WebSocketEventSourceChange events."""

                    def source_change_notifications(notification: Source):
                        """SourceChange notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_source_change_notifications(source_change_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_source_change_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_source_change_notifications():
                    """React on WebSocketEventSourceChange events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventSourceChange":
                                print(notification["eventData"])

                asyncio.run(receive_source_change_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/Source'
                eventType:
                    type: string
            type: object
        WebSocketEventSpeakerGroupChanged:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_speaker_group_changed_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_speaker_group_changed_notifications():
                    """React on WebSocketEventSpeakerGroupChanged events."""

                    def speaker_group_changed_notifications(notification: str):
                        """SpeakerGroupChanged notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_speaker_group_changed_notifications(speaker_group_changed_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_speaker_group_changed_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_speaker_group_changed_notifications():
                    """React on WebSocketEventSpeakerGroupChanged events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventSpeakerGroupChanged":
                                print(notification["eventData"])

                asyncio.run(receive_speaker_group_changed_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/SpeakerGroupId'
                eventType:
                    type: string
            type: object
        WebSocketEventSpeakerLinkStatusChanged:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_speaker_link_status_changed_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_speaker_link_status_changed_notifications():
                    """React on WebSocketEventSpeakerLinkStatusChanged events."""

                    def speaker_link_status_changed_notifications(notification: SpeakerLinkStatus):
                        """SpeakerLinkStatusChanged notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_speaker_link_status_changed_notifications(speaker_link_status_changed_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_speaker_link_status_changed_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_speaker_link_status_changed_notifications():
                    """React on WebSocketEventSpeakerLinkStatusChanged events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventSpeakerLinkStatusChanged":
                                print(notification["eventData"])

                asyncio.run(receive_speaker_link_status_changed_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/SpeakerLinkStatus'
                eventType:
                    type: string
            type: object
        WebSocketEventStandConnected:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_stand_connected_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_stand_connected_notifications():
                    """React on WebSocketEventStandConnected events."""

                    def stand_connected_notifications(notification: StandConnected):
                        """StandConnected notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_stand_connected_notifications(stand_connected_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_stand_connected_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_stand_connected_notifications():
                    """React on WebSocketEventStandConnected events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventStandConnected":
                                print(notification["eventData"])

                asyncio.run(receive_stand_connected_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/StandConnected'
                eventType:
                    type: string
            type: object
        WebSocketEventStandPosition:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_stand_position_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_stand_position_notifications():
                    """React on WebSocketEventStandPosition events."""

                    def stand_position_notifications(notification: StandPosition):
                        """StandPosition notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_stand_position_notifications(stand_position_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_stand_position_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_stand_position_notifications():
                    """React on WebSocketEventStandPosition events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventStandPosition":
                                print(notification["eventData"])

                asyncio.run(receive_stand_position_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/StandPosition'
                eventType:
                    type: string
            type: object
        WebSocketEventTvInfo:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_tv_info_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_tv_info_notifications():
                    """React on WebSocketEventTvInfo events."""

                    def tv_info_notifications(notification: TvInfoEventData):
                        """TvInfo notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_tv_info_notifications(tv_info_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_tv_info_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_tv_info_notifications():
                    """React on WebSocketEventTvInfo events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventTvInfo":
                                print(notification["eventData"])

                asyncio.run(receive_tv_info_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/TvInfoEventData'
                eventType:
                    type: string
            type: object
        WebSocketEventVolume:
            description: |
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_volume_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_volume_notifications():
                    """React on WebSocketEventVolume events."""

                    def volume_notifications(notification: VolumeState):
                        """Volume notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_volume_notifications(volume_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_volume_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_volume_notifications():
                    """React on WebSocketEventVolume events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventVolume":
                                print(notification["eventData"])

                asyncio.run(receive_volume_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/VolumeState'
                eventType:
                    type: string
            type: object
        WebSocketEventWisaOutState:
            description: |
                Speaker Discovery State changed
                Usage examples:

                <!--
                type: tab
                title: Python API
                -->

                Use the `get_wisa_out_state_notifications()` method in the Python package to get notifications of this type.

                <!-- title: "Python API usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from mozart_api.mozart_client import MozartClient

                async def receive_wisa_out_state_notifications():
                    """React on WebSocketEventWisaOutState events."""

                    def wisa_out_state_notifications(notification: WisaOutState):
                        """WisaOutState notification handler."""
                        print(notification)

                    async with MozartClient(host="192.168.0.1") as mozart_client:
                        mozart_client.get_wisa_out_state_notifications(wisa_out_state_notifications)
                        await mozart_client.connect_notifications()

                        # Receive notifications
                        while True:
                            await asyncio.sleep(0)

                asyncio.run(receive_wisa_out_state_notifications())
                ```

                <!--
                type: tab
                title: Python AIOHTTP
                -->

                Use the AIOHTTP library to get notifications of this type.

                <!-- title: "Python AIOHTTP usage"
                lineNumbers: true
                -->

                ```python
                import asyncio

                from aiohttp import ClientSession


                async def receive_wisa_out_state_notifications():
                    """React on WebSocketEventWisaOutState events."""
                    async with (
                        ClientSession() as session,
                        session.ws_connect(url="ws://192.168.0.1:9339/") as websocket,
                    ):
                        async for notification in websocket:
                            notification = notification.json()

                            if notification["eventType"] == "WebSocketEventWisaOutState":
                                print(notification["eventData"])

                asyncio.run(receive_wisa_out_state_notifications())
                ```
                <!-- type: tab-end -->
            properties:
                eventData:
                    $ref: '#/components/schemas/WisaOutState'
                eventType:
                    type: string
            required:
            - eventType
            - eventData
            type: object
        WebsocketNotificationTag:
            properties:
                value:
                    enum:
                    - configuration
                    - uri
                    - generatorSettings
                    - lineInSettings
                    - bluetoothDevices
                    - remoteControlDevices
                    - secondariesList
                    - queueHasBeenChanged
                    - endOfQueueHasBeenReached
                    - beolinkPeers
                    - beolinkListeners
                    - beolinkAvailableListeners
                    - bluetoothPairingStateChanged
                    - outputsChanged
                    - speakerGroupOverviewChanged
                    - remoteMenuChanged
                    - proximityPresenceDetected
                    - proximityPresenceNotDetected
                    type: string
            type: object
        WisaOutState:
            properties:
                state:
                    enum:
                    - idle
                    - discovering
                    - deleting
                    - updatingSpeakerFirmware
                    type: string
            type: object
info:
    contact:
        email: support@bang-olufsen.dk
        name: Bang & Olufsen
    description: "[![License](https://img.shields.io/badge/license-MIT-green)](https://github.com/bang-olufsen/mozart-open-api/blob/main/LICENSE)\n\
        [![Version](https://img.shields.io/pypi/v/mozart-api?color=g)](https://pypi.org/project/mozart-api)\n\
        [![Downloads](https://img.shields.io/pypi/dm/mozart-api)](https://pypi.org/project/mozart-api)\n\
        ![Python version](https://img.shields.io/pypi/pyversions/mozart-api)\n\n\n\
        The Mozart API is an async REST API with WebSocket notification channel for\
        \ immediate state information from Mozart devices. Currently the API is distributed\
        \ as a [Python package](https://pypi.org/project/mozart-api) and as an OpenAPI\
        \ document that can be found in the [Github repository](https://github.com/bang-olufsen/mozart-open-api/blob/main/mozart-api-4.1.1.116.yaml).\n\
        \n\nSupported by:\n- [Beoconnect Core](https://www.bang-olufsen.com/en/dk/accessories/beoconnect-core)\n\
        - [Beolab 8](https://www.bang-olufsen.com/en/dk/speakers/beolab-8)\n- [Beolab\
        \ 28](https://www.bang-olufsen.com/en/dk/speakers/beolab-28)\n- [Beosound\
        \ 2 3rd gen](https://www.bang-olufsen.com/en/dk/speakers/beosound-2)\n- [Beosound\
        \ A5](https://www.bang-olufsen.com/en/dk/speakers/beosound-a5)\n- [Beosound\
        \ A9 5th gen](https://www.bang-olufsen.com/en/dk/speakers/beosound-a9)\n-\
        \ [Beosound Balance](https://www.bang-olufsen.com/en/dk/speakers/beosound-balance)\n\
        - [Beosound Emerge](https://www.bang-olufsen.com/en/dk/speakers/beosound-emerge)\n\
        - [Beosound Level](https://www.bang-olufsen.com/en/dk/speakers/beosound-level)\n\
        - [Beosound Theatre](https://www.bang-olufsen.com/en/dk/soundbars/beosound-theatre)\n\
        \n\nThis API documentation has been generated for version 4.1.1.116 of the\
        \ Mozart platform and API generation version 4.1.1.116.6.\n\n## Python API\n\
        \nThe Python package has been generated using the [OpenAPI Generator](https:/openapi-generator.tech/)\
        \ version 7.10.0. On top of the generated API, a helper file, mozart_client.py,\
        \ has been made that makes the API more pythonic. We recommend using this.\n\
        \nAnother file, mozart_cli.py, has been made for using the Mozart API in a\
        \ simple CLI program. This has been set as the \"entry point\" for the Python\
        \ package.\n\n### Installation\n\nThe Mozart Open API can be installed with\
        \ pip and requires [Python](https://www.python.org/downloads/).\n\nInstall\
        \ using pip:\n\n```terminal\npip3 install mozart_api\n```\n\n### API usage\n\
        \nTo use the Python API:\n\n- Create a MozartClient object\n- Choose which\
        \ (if any) WebSocket events to listen to\n- Connect to the WebSocket notification\
        \ channel (if needed)\n- Use any of the endpoints\n\n#### Example\n\n<!--\n\
        type: tab\ntitle: API usage example\n-->\n\n<!-- title: \"API usage example\"\
        \nlineNumbers: true\n-->\n\n```python\nimport asyncio\n\nfrom mozart_api.models\
        \ import VolumeLevel, VolumeState\nfrom mozart_api.mozart_client import MozartClient,\
        \ WebSocketEventType\n\n\ndef all_notifications(notification: WebSocketEventType,\
        \ notification_type: str) -> None:\n    \"\"\"Notification handler.\"\"\"\n\
        \    print(f\"{notification_type} : {notification}\")\n\n\nasync def volume_notifications(notification:\
        \ VolumeState) -> None:\n    \"\"\"Volume notification handler.\"\"\"\n  \
        \  print(notification)\n\n\nasync def test_api() -> None:\n    \"\"\"Test\
        \ Mozart API.\"\"\"\n\n    mozart_client = MozartClient(host=\"192.168.0.1\"\
        )\n\n    mozart_client.get_all_notifications(all_notifications)\n    mozart_client.get_volume_notifications(volume_notifications)\n\
        \n    await mozart_client.connect_notifications(remote_control=True)\n\n \
        \   await mozart_client.set_current_volume_level(volume_level=VolumeLevel(level=50))\n\
        \    await mozart_client.activate_preset(id=2)\n    await mozart_client.post_beolink_expand(\n\
        \        jid=\"1234.1234567.12345678@products.bang-olufsen.com\",\n    )\n\
        \n    listeners = await mozart_client.get_beolink_listeners()\n    print(listeners)\n\
        \n    # Close aiohttp ClientSession\n    await mozart_client.close_api_client()\n\
        \n    # Receive notifications\n    while True:\n        await asyncio.sleep(0)\n\
        \n\nasyncio.run(test_api())\n```\n\n<!--\ntype: tab\ntitle: API usage example\
        \ with async context manager\n-->\n\n<!-- title: \"API usage example with\
        \ async context manager\"\nlineNumbers: true\n-->\n\n```python\nimport asyncio\n\
        \nfrom mozart_api.models import VolumeLevel, VolumeState\nfrom mozart_api.mozart_client\
        \ import MozartClient, WebSocketEventType\n\n\ndef all_notifications(notification:\
        \ WebSocketEventType, notification_type: str) -> None:\n    \"\"\"Notification\
        \ handler.\"\"\"\n    print(f\"{notification_type} : {notification}\")\n\n\
        \nasync def volume_notifications(notification: VolumeState) -> None:\n   \
        \ \"\"\"Volume notification handler.\"\"\"\n    print(notification)\n\n\n\
        async def test_api() -> None:\n    \"\"\"Test Mozart API.\"\"\"\n\n    async\
        \ with MozartClient(host=\"192.168.0.1\") as mozart_client:\n        mozart_client.get_all_notifications(all_notifications)\n\
        \        mozart_client.get_volume_notifications(volume_notifications)\n\n\
        \        await mozart_client.connect_notifications(remote_control=True)\n\n\
        \        await mozart_client.set_current_volume_level(volume_level=VolumeLevel(level=50))\n\
        \        await mozart_client.activate_preset(id=2)\n        await mozart_client.post_beolink_expand(\n\
        \            jid=\"1234.1234567.12345678@products.bang-olufsen.com\",\n  \
        \      )\n\n        listeners = await mozart_client.get_beolink_listeners()\n\
        \        print(listeners)\n\n    # Receive notifications\n    while True:\n\
        \        await asyncio.sleep(0)\n\n\nasyncio.run(test_api())\n```\n\n<!--\
        \ type: tab-end -->\n\nWhere `192.168.0.1` is a Mozart device's IP-address.\n\
        \n#### Beware\n\nSome of the classes defined in the Mozart API are aliases\
        \ to other data types, for example: `ActionList` is an array of `Action` objects.\
        \ These classes are not generated and can therefore not be used in the Python\
        \ API. instead, use the built in Python data types, for example when defining\
        \ an ActionList, simply use a `list` instead.\n\n#### WebSocket notifications\n\
        \nThe most convenient way of getting state information from a Mozart device\
        \ is through the WebSocket notification channel. The WebSocket listeners are\
        \ run using [asyncio Tasks](https://docs.python.org/3/library/asyncio-task.html).\n\
        \nA callback can be set for each of the WebSocket notifications. The callbacks\
        \ can be functions or awaitable functions. To receive `WebSocketEventBeoRemoteButton`\
        \ notifications requires that `remote_control=True` is defined when running\
        \ the `connect_notifications()` method.\n\nAll notification types are available\
        \ as a set of strings in the NOTIFICATION_TYPES constant.\n\n#### Helper methods\
        \ and functions\n\nA number of helper functions are available in the `mozart_client.py`\
        \ file. These functions handle basic tasks, but do not interact with the REST\
        \ API or WebSocket listener directly.\n\nAdditionaly, helper methods are available\
        \ in the `MozartClient` object and expand upon the basic functionality of\
        \ a REST method.\n\n##### refactor_notification_name\n\nThe `refactor_notification_name`\
        \ function transforms a WebSocket notification name to a simpler snake_case\
        \ name:\n\n```python\n>>> refactor_notification_name(\"WebSocketEventBeoRemoteButton\"\
        )\n'beo_remote_button'\n```\n\n##### check_valid_jid\n\nThe `check_valid_jid`\
        \ determines if an input string is a valid Beolink JID:\n\n```python\n>>>\
        \ check_valid_jid(\"1234.1234567.12345678@products.bang-olufsen.com\")\nTrue\n\
        >>> check_valid_jid(\"1234567.12345678@products.bang-olufsen.com\")\nFalse\n\
        ```\n\n##### check_valid_serial_number\n\nThe `check_valid_serial_number`\
        \ determines if an input string is a valid serial number:\n\n```python\n>>>\
        \ check_valid_serial_number(\"12345678\")\nTrue\n>>> check_valid_serial_number(\"\
        1234567\")\nFalse\n```\n\n##### get_highest_resolution_artwork\n\nThe `get_highest_resolution_artwork`\
        \ function gets the highest resolution artwork available from provided `PlaybackContentMetadata`.\n\
        \n##### async_get_beolink_join_result\n\nThe `get_beolink_join_result` method\
        \ is used to retrieve a `BeolinkJoinResult` using a `BeolinkJoinRequest`,\
        \ received from `join_latest_beolink_experience` or `join_beolink_peer` method\
        \ calls. This result is only available after a device has joined. Until this\
        \ result is available, the `get_beolink_join_result` method raises an `ApiException`.\n\
        \nThe `async_get_beolink_join_result` method repeatedly tries to get the `BeolinkJoinResult`\
        \ with a 5 second timeout. This method returns a `BeolinkJoinResult` or `None`\
        \ if it fails to get a result.\n\n##### async_post_beolink_expand\n\nThe `post_beolink_expand`\
        \ method is used to expand a Beolink session to another device using a Beolink\
        \ JID. This method does not return a result, so it is unknown if or when the\
        \ expand was successful. A `NotFoundException` is raised if the listener was\
        \ not found.\n\nThe `async_post_beolink_expand` method checks for the requested\
        \ listener's JID in the the Beolink leader's listeners, using the `get_beolink_listeners`\
        \ method repeatedly with a 5 second timeout. This method returns a `True`,\
        \ `ApiException`, `NotFoundException` or `TimeoutError` representing the expand\
        \ result.\n\n##### Extra callbacks\n\nAdditionally, some useful callbacks\
        \ are available that are not associated with a single notification type.\n\
        \n<!--\ntype: tab\ntitle: On connection lost\n-->\n\nThe `get_on_connection_lost`\
        \ method will set a callback when the WebSocket listener loses connection.\n\
        \n<!-- title: \"On connection lost example\"\nlineNumbers: true\n-->\n\n```python\n\
        import asyncio\n\nfrom mozart_api.mozart_client import MozartClient\n\n\n\
        async def test_api() -> None:\n    \"\"\"Test Mozart API.\"\"\"\n\n    def\
        \ on_connection_lost() -> None:\n        \"\"\"Notification handler.\"\"\"\
        \n        print(\"Connection lost\")\n\n    async with MozartClient(host=\"\
        192.168.0.1\") as mozart_client:\n        mozart_client.get_on_connection_lost(on_connection_lost)\n\
        \        await mozart_client.connect_notifications()\n\n        # Receive\
        \ notifications\n        while True:\n            await asyncio.sleep(0)\n\
        \n\nasyncio.run(test_api())\n```\n\n<!--\ntype: tab\ntitle: On connection\n\
        -->\n\nThe `get_on_connection` method will set a callback when the WebSocket\
        \ listener successfully establishes a connection.\n\n<!-- title: \"On connection\
        \ example\"\nlineNumbers: true\n-->\n\n```python\nimport asyncio\n\nfrom mozart_api.mozart_client\
        \ import MozartClient\n\n\nasync def test_api() -> None:\n    \"\"\"Test Mozart\
        \ API.\"\"\"\n\n    def on_connection() -> None:\n        \"\"\"Notification\
        \ handler.\"\"\"\n        print(\"Connected\")\n\n    async with MozartClient(host=\"\
        192.168.0.1\") as mozart_client:\n        mozart_client.get_on_connection(on_connection)\n\
        \        await mozart_client.connect_notifications()\n\n        # Receive\
        \ notifications\n        while True:\n            await asyncio.sleep(0)\n\
        \n\nasyncio.run(test_api())\n```\n\n<!--\ntype: tab\ntitle: All notifications\n\
        -->\n\nThe `get_all_notifications` method will set a callback on all WebSocket\
        \ notifications received.\n\nThe notification_type will return the name of\
        \ the event with the `WebSocketEvent` prefix removed and the rest converted\
        \ to snake_case: `WebSocketEventAlarmTriggered` \u279E `alarm_triggered`\n\
        \n<!-- title: \"All notifications example\"\nlineNumbers: true\n-->\n\n```python\n\
        import asyncio\n\nfrom mozart_api.mozart_client import MozartClient, WebSocketEventType\n\
        \n\nasync def test_api() -> None:\n    \"\"\"Test Mozart API.\"\"\"\n\n  \
        \  def all_notifications(notification: WebSocketEventType, notification_type:\
        \ str) -> None:\n        \"\"\"Notification handler.\"\"\"\n        print(f\"\
        {notification_type} : {notification}\")\n\n    async with MozartClient(host=\"\
        192.168.0.1\") as mozart_client:\n        mozart_client.get_all_notifications(all_notifications)\n\
        \        await mozart_client.connect_notifications()\n\n        # Receive\
        \ notifications\n        while True:\n            await asyncio.sleep(0)\n\
        \n\nasyncio.run(test_api())\n```\n\n<!--\ntype: tab\ntitle: All notifications\
        \ \"raw\"\n-->\n\nThe `get_all_notifications_raw` method will set a callback\
        \ on all WebSocket notifications received and will not deserialize the received\
        \ JSON or dict.\n\n<!-- title: \"All notifications \"raw\" example\"\nlineNumbers:\
        \ true\n-->\n\n```python\nimport asyncio\n\nfrom mozart_api.mozart_client\
        \ import BaseWebSocketResponse, MozartClient\n\n\nasync def test_api() ->\
        \ None:\n    \"\"\"Test Mozart API.\"\"\"\n\n    def all_notifications_raw(notification:\
        \ BaseWebSocketResponse) -> None:\n        \"\"\"Notification handler.\"\"\
        \"\n        print(notification)\n\n    async with MozartClient(host=\"192.168.0.1\"\
        ) as mozart_client:\n        mozart_client.get_all_notifications_raw(all_notifications_raw)\n\
        \        await mozart_client.connect_notifications()\n\n        # Receive\
        \ notifications\n        while True:\n            await asyncio.sleep(0)\n\
        \n\nasyncio.run(test_api())\n```\n\n<!-- type: tab-end -->\n\n#### Discovering\
        \ Mozart devices on the network\n\nMozart devices can be found through MDNS\
        \ using the service name: `_bangolufsen._tcp.local.`\n\nThe service provides\
        \ everything immediately necessary for using the device, including IP address,\
        \ all components for the Beolink JID, model name, friendly name, software\
        \ version and more.\n\n### Example CLI program\n\nThe CLI program carries\
        \ out one command and then exits afterwards. The program needs to do a device-discovery\
        \ on each command, which in noisy environments could take some time. If speed\
        \ is important, an IP-address can be used instead.\n\nAdditionally since the\
        \ CLI uses MDNS for device discovery, port number 5353 needs to be open.\n\
        \n#### Usage example\n\nThis example shows device discovery and afterwards\
        \ joining a Beolink session with WebSocket events being printed.\n\n![example\
        \ gif](https://raw.githubusercontent.com/bang-olufsen/mozart-open-api/main/docs/media/discovery_join.gif)\n\
        \n#### Device discovery\n\n<!--\ntype: tab\ntitle: Discover\n-->\n\n#####\
        \ discover\n\nDiscover Mozart devices on the network.\n\n```terminal\nmozart_api\
        \ discover\n```\n\n<!--\ntype: tab\ntitle: Serial number\n-->\n\n##### serial\
        \ number\n\nEnsure that the serial number is reachable on the network.\n\n\
        ```terminal\nmozart_api 12345678\n```\n\n<!-- type: tab-end -->\n\n#### Options\n\
        \n<!--\ntype: tab\ntitle: Verbose\n-->\n\n##### verbose\n\nAdd as option to\
        \ add verbose output.\n\n```terminal\nmozart_api serial_number command command_args\
        \ -v\n\nmozart_api serial_number command command_args --verbose\n```\n\n<!--\n\
        type: tab\ntitle: Timeout\n-->\n\n##### timeout\n\nAdd as option with parameter\
        \ to modify MDNS discovery timeout.\n\nOptionally use '-1' to have a user-interrupted\
        \ device discovery:\n\n```terminal\nmozart_api serial_number command command_args\
        \ -t 20\n\nmozart_api serial_number command command_args --timeout 20\n\n\
        mozart_api serial_number command command_args --timeout -1\n```\n\n<!--\n\
        type: tab\ntitle: WebSocket\n-->\n\n##### websocket\n\nAdd as option to show\
        \ WebSocket notifications before and after command execution.\n\nUpon connection\
        \ the overall state of the device will be immediately transferred.\n\n```terminal\n\
        mozart_api serial_number command command_args -w\n\nmozart_api serial_number\
        \ command command_args --websocket\n```\n\n<!-- type: tab-end -->\n\n####\
        \ Commands\n\n<!--\ntype: tab\ntitle: Playback\n-->\n\n##### preset\n\nWill\
        \ activate the _preset_ command.\n\n```terminal\nmozart_api 12345678 preset\
        \ 1\n```\n\n##### play\n\nWill activate the _play_ playback command.\n\n```terminal\n\
        mozart_api 12345678 play\n```\n\n##### pause\n\nWill activate the _pause_\
        \ playback command.\n\n```terminal\nmozart_api 12345678 pause\n```\n\n#####\
        \ next\n\nWill activate the _next_ playback command.\n\n```terminal\nmozart_api\
        \ 12345678 next\n```\n\n##### previous\n\nWill activate the _previous_ playback\
        \ command.\n\n```terminal\nmozart_api 12345678 previous\n```\n\n<!--\ntype:\
        \ tab\ntitle: Volume\n-->\n\n##### mute\n\nWill activate the mute command.\n\
        \n```terminal\nmozart_api 12345678 mute\n```\n\n##### unmute\n\nWill activate\
        \ the unmute command.\n\n```terminal\nmozart_api 12345678 unmute\n```\n\n\
        ##### volume\n\nWill activate the modify volume level command on the device\
        \ (0-100).\n\n```terminal\nmozart_api 12345678 volume 50\n```\n\n<!--\ntype:\
        \ tab\ntitle: Beolink\n-->\n\n##### join\n\nWill join a Beolink experience\
        \ if available or will join a specific Beolink experience if available.\n\n\
        ```terminal\nmozart_api 12345678 join\n\nmozart_api 12345678 join 23456789\n\
        ```\n\n##### allstandby\n\nWill set all connected Beolink devices to networkStandby.\n\
        \n```terminal\nmozart_api 12345678 allstandby\n```\n\n<!--\ntype: tab\ntitle:\
        \ Miscellaneous\n-->\n\n##### info\n\nWill print device information.\n\n```terminal\n\
        mozart_api 12345678 info\n```\n\n##### version\n\nWill print device API version.\n\
        \n```terminal\nmozart_api version\n```\n\n<!-- type: tab-end -->\n"
    license:
        name: MIT
        url: https://opensource.org/licenses/MIT
    title: Mozart platform API
    version: 0.2.0
openapi: 3.0.0
paths:
    /api/v1/battery:
        get:
            description: |-
                Use the `get-battery-state` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_battery_state()
                ```
                ```mozart_api
                await mozart_api.get_battery_state()
                ```
                ```power_api
                await power_api.get_battery_state()
                ```
            operationId: get-battery-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatteryState'
                    description: The battery state of the product
            summary: Get battery state of the product
            tags:
            - Power
            - mozart
    /api/v1/beolink/allstandby:
        post:
            description: |-
                Use the `post-beolink-allstandby` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_beolink_allstandby()
                ```
                ```mozart_api
                await mozart_api.post_beolink_allstandby()
                ```
                ```beolink_api
                await beolink_api.post_beolink_allstandby()
                ```
            operationId: post-beolink-allstandby
            responses:
                '202':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
            summary: Broadcast an all standby event to turn all Beolink devices off
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/available-listeners:
        get:
            description: |-
                Get a list of devices that can be listening to this device active experience.

                Use the `get-beolink-available-listeners` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_beolink_available_listeners()
                ```
                ```mozart_api
                await mozart_api.get_beolink_available_listeners()
                ```
                ```beolink_api
                await beolink_api.get_beolink_available_listeners()
                ```
            operationId: get-beolink-available-listeners
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/BeolinkAvailableListener'
                                type: array
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
            summary: Get available listeners
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/expand/{jid}:
        parameters:
        -   description: Jabber id of peer to expand the active experience to
            in: path
            name: jid
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkPeerID'
        post:
            description: |-
                Expand the current active experience to another device with jabber id `{jid}`.

                Use the `post-beolink-expand` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_beolink_expand()
                ```
                ```mozart_api
                await mozart_api.post_beolink_expand()
                ```
                ```beolink_api
                await beolink_api.post_beolink_expand()
                ```
            operationId: post-beolink-expand
            responses:
                '202':
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to initiate join
                '404':
                    description: Remote device not found
            summary: Expand the current active experience
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/join:
        post:
            description: |-
                Use the `join-latest-beolink-experience` method in the Python package with one of:
                ```mozart_client
                await mozart_client.join_latest_beolink_experience()
                ```
                ```mozart_api
                await mozart_api.join_latest_beolink_experience()
                ```
                ```beolink_api
                await beolink_api.join_latest_beolink_experience()
                ```
            operationId: join-latest-beolink-experience
            responses:
                '202':
                    $ref: '#/components/responses/BeolinkJoinResponse'
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to initiate join
            summary: Trigger touch to join
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/join-result/{id}:
        get:
            description: |-
                Returns the result of a join request.

                **WARNING:** This end-point is only for testing purposes. Only a limited
                number of results are kept, so if there are multiple API clients using
                the device at the same time, and you are polling this end-point, you may
                miss the result of your join request.

                Use the `get-beolink-join-result` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_beolink_join_result()
                ```
                ```mozart_api
                await mozart_api.get_beolink_join_result()
                ```
                ```beolink_api
                await beolink_api.get_beolink_join_result()
                ```
            operationId: get-beolink-join-result
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkJoinResult'
                    description: Join result available
                '404':
                    description: Join result unavailable
            summary: Get Beolink join result, test-endpoint
            tags:
            - Beolink
            - mozart
        parameters:
        -   description: Join request ID
            in: path
            name: id
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkRequestID'
    /api/v1/beolink/join/{jid}:
        parameters:
        -   description: Jabber ID of peer to join
            in: path
            name: jid
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkPeerID'
        -   description: Ask to join a specific source on peer
            in: query
            name: source
            required: false
            schema:
                type: string
        post:
            description: |-
                Join the experience currently active on peer with Jabber ID `{jid}`.

                Use the `join-beolink-peer` method in the Python package with one of:
                ```mozart_client
                await mozart_client.join_beolink_peer()
                ```
                ```mozart_api
                await mozart_api.join_beolink_peer()
                ```
                ```beolink_api
                await beolink_api.join_beolink_peer()
                ```
            operationId: join-beolink-peer
            responses:
                '202':
                    $ref: '#/components/responses/BeolinkJoinResponse'
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
                '403':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Not allowed to initiate join
            summary: Join multi-room experience
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/leave:
        post:
            description: |-
                Use the `post-beolink-leave` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_beolink_leave()
                ```
                ```mozart_api
                await mozart_api.post_beolink_leave()
                ```
                ```beolink_api
                await beolink_api.post_beolink_leave()
                ```
            operationId: post-beolink-leave
            responses:
                '202':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
                '404':
                    description: No active experience found
            summary: Leave the ongoing experience (disconnect this device from remote)
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/listeners:
        get:
            description: |-
                Get a list of devices that are listening to this device active experience (that have joined).

                Use the `get-beolink-listeners` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_beolink_listeners()
                ```
                ```mozart_api
                await mozart_api.get_beolink_listeners()
                ```
                ```beolink_api
                await beolink_api.get_beolink_listeners()
                ```
            operationId: get-beolink-listeners
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/BeolinkListener'
                                type: array
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
            summary: Get joined peers
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/peers:
        get:
            description: |-
                Get information about the Beolink peers discovered by this device.

                Use the `get-beolink-peers` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_beolink_peers()
                ```
                ```mozart_api
                await mozart_api.get_beolink_peers()
                ```
                ```beolink_api
                await beolink_api.get_beolink_peers()
                ```
            operationId: get-beolink-peers
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/BeolinkPeer'
                                type: array
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
            summary: Get discovered peers
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/self:
        get:
            description: |-
                Returns Beolink information like about this device. This can be useful if you want to expand _to_ this device.

                Use the `get-beolink-self` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_beolink_self()
                ```
                ```mozart_api
                await mozart_api.get_beolink_self()
                ```
                ```beolink_api
                await beolink_api.get_beolink_self()
                ```
            operationId: get-beolink-self
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeolinkSelf'
                    description: successful operation
            summary: Get information about this device
            tags:
            - Beolink
            - mozart
    /api/v1/beolink/unexpand/{jid}:
        parameters:
        -   description: Jabber id of peer to unexpand
            in: path
            name: jid
            required: true
            schema:
                $ref: '#/components/schemas/BeolinkPeerID'
        post:
            description: |-
                Disconnect the device with jabber id `{jid}` from the current active experience.

                Use the `post-beolink-unexpand` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_beolink_unexpand()
                ```
                ```mozart_api
                await mozart_api.post_beolink_unexpand()
                ```
                ```beolink_api
                await beolink_api.post_beolink_unexpand()
                ```
            operationId: post-beolink-unexpand
            responses:
                '202':
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Beolink not enabled on this device
                '404':
                    description: Remote device not found
            summary: Unexpand (disconnect) a device from the multiroom session
            tags:
            - Beolink
            - mozart
    /api/v1/content:
        get:
            description: |-
                Use the `get-content` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_content()
                ```
                ```mozart_api
                await mozart_api.get_content()
                ```
                ```content_api
                await content_api.get_content()
                ```
            operationId: get-content
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ContentItemMap'
                    description: Successful request
            summary: Get a list of available content
            tags:
            - Content
            - mozart
        parameters:
        -   description: Filter result that start with x. It could be input source
                "tv", "netradio" or content "tv://TV", "tv://netflix"
            in: query
            name: startWith
            required: false
            schema:
                type: string
    /api/v1/content/active:
        get:
            description: |-
                Use the `get-active-content` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_active_content()
                ```
                ```mozart_api
                await mozart_api.get_active_content()
                ```
                ```content_api
                await content_api.get_active_content()
                ```
            operationId: get-active-content
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ContentItemWithId'
                    description: Successful request
                '204':
                    description: No content active
            summary: Get currently active content
            tags:
            - Content
            - mozart
    /api/v1/output/beosound-shape/status:
        get:
            description: |-
                Use the `get-beosound-shape-status` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_beosound_shape_status()
                ```
                ```mozart_api
                await mozart_api.get_beosound_shape_status()
                ```
                ```output_api
                await output_api.get_beosound_shape_status()
                ```
            operationId: get-beosound-shape-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BeoShapeStatus'
                    description: status returned
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: beosound-shape not found/supported
            summary: Get status
            tags:
            - Output
            - mozart
    /api/v1/overlay/play:
        post:
            description: |-
                Play some audio as an overlay. This will duck currently playing music while the audio is playing. Currently 100 unique TTS messages can be generated a day and generated messages are cached for 24 hours.

                Use the `post-overlay-play` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_overlay_play()
                ```
                ```mozart_api
                await mozart_api.post_overlay_play()
                ```
                ```overlay_api
                await overlay_api.post_overlay_play()
                ```
            operationId: post-overlay-play
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OverlayPlayRequest'
                description: settings to use for the overlay
                required: true
            responses:
                '202':
                    description: successful request; will attempt to play overlay
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request
            summary: Play overlay
            tags:
            - Overlay
            - mozart
    /api/v1/playback/command/{command}:
        post:
            description: |-
                Use the `post-playback-command` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_playback_command()
                ```
                ```mozart_api
                await mozart_api.post_playback_command()
                ```
                ```playback_api
                await playback_api.post_playback_command()
                ```
            operationId: post-playback-command
            parameters:
            -   description: the named command to execute
                in: path
                name: command
                required: true
                schema:
                    enum:
                    - play
                    - pause
                    - stop
                    - skip
                    - prev
                    type: string
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Send a specific playback command to the product
            tags:
            - Playback
            - mozart
    /api/v1/playback/deezer/flow:
        post:
            description: |-
                Use the `start-deezer-flow` method in the Python package with one of:
                ```mozart_client
                await mozart_client.start_deezer_flow()
                ```
                ```mozart_api
                await mozart_api.start_deezer_flow()
                ```
                ```playback_api
                await playback_api.start_deezer_flow()
                ```
                ```deezer_api
                await deezer_api.start_deezer_flow()
                ```
            operationId: start-deezer-flow
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserFlow'
                description: Select user
            responses:
                '201':
                    description: successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Play users flow. If no provided user id it will play the flow
                connected to the active account
            tags:
            - Deezer
            - Playback
            - mozart
    /api/v1/playback/preset/{id}/trigger:
        post:
            description: |-
                Use the `activate-preset` method in the Python package with one of:
                ```mozart_client
                await mozart_client.activate_preset()
                ```
                ```mozart_api
                await mozart_api.activate_preset()
                ```
                ```playback_api
                await playback_api.activate_preset()
                ```
            operationId: activate-preset
            parameters:
            -   description: the id of the preset you want to trigger
                in: path
                name: id
                required: true
                schema:
                    type: integer
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
                '412':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Pre-condition not met
            summary: Trigger a preset
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue:
        post:
            description: |-
                Use the `add-to-queue` method in the Python package with one of:
                ```mozart_client
                await mozart_client.add_to_queue()
                ```
                ```mozart_api
                await mozart_api.add_to_queue()
                ```
                ```playback_api
                await playback_api.add_to_queue()
                ```
            operationId: add-to-queue
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlayQueueItem'
                description: the queue element you want to add
                required: true
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Add an element to the queue
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/clear:
        post:
            description: |-
                Use the `post-clear-queue` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_clear_queue()
                ```
                ```mozart_api
                await mozart_api.post_clear_queue()
                ```
                ```playback_api
                await playback_api.post_clear_queue()
                ```
            operationId: post-clear-queue
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Clear the queue
            tags:
            - Playback
            - mozart
    /api/v1/playback/queue/settings:
        get:
            description: |-
                Use the `get-settings-queue` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_settings_queue()
                ```
                ```mozart_api
                await mozart_api.get_settings_queue()
                ```
                ```playback_api
                await playback_api.get_settings_queue()
                ```
            operationId: get-settings-queue
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PlayQueueSettings'
                                type: object
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the current queue settings
            tags:
            - Playback
            - mozart
        put:
            description: |-
                Use the `set-settings-queue` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_settings_queue()
                ```
                ```mozart_api
                await mozart_api.set_settings_queue()
                ```
                ```playback_api
                await playback_api.set_settings_queue()
                ```
            operationId: set-settings-queue
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PlayQueueSettings'
                description: the desired settings
                required: true
            responses:
                '204':
                    description: the new settings were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set queue settings
            tags:
            - Playback
            - mozart
    /api/v1/playback/seek:
        put:
            description: |-
                Use the `seek-to-position` method in the Python package with one of:
                ```mozart_client
                await mozart_client.seek_to_position()
                ```
                ```mozart_api
                await mozart_api.seek_to_position()
                ```
                ```playback_api
                await playback_api.seek_to_position()
                ```
            operationId: seek-to-position
            parameters:
            -   description: position in milliseconds
                in: query
                name: position_ms
                required: true
                schema:
                    format: int32
                    type: integer
            responses:
                '204':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Seek to position in stream
            tags:
            - Playback
            - mozart
    /api/v1/playback/sources:
        get:
            description: |-
                Use the `get-available-sources` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_available_sources()
                ```
                ```mozart_api
                await mozart_api.get_available_sources()
                ```
                ```playback_api
                await playback_api.get_available_sources()
                ```
            operationId: get-available-sources
            parameters:
            -   description: filter sources for remote control
                in: query
                name: target-remote
                required: false
                schema:
                    type: boolean
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SourceArray'
                    description: Returns a list of available sources
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get all the available sources
            tags:
            - Playback
            - mozart
    /api/v1/playback/sources/active/{sourceId}:
        post:
            description: |-
                Use the `set-active-source` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_active_source()
                ```
                ```mozart_api
                await mozart_api.set_active_source()
                ```
                ```playback_api
                await playback_api.set_active_source()
                ```
            operationId: set-active-source
            parameters:
            -   description: the id of the source to activate
                in: path
                name: sourceId
                required: true
                schema:
                    type: string
            responses:
                '201':
                    description: Successfully changed the active source
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the active source
            tags:
            - Playback
            - mozart
    /api/v1/playback/state:
        get:
            description: |-
                Use the `get-playback-state` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_playback_state()
                ```
                ```mozart_api
                await mozart_api.get_playback_state()
                ```
                ```playback_api
                await playback_api.get_playback_state()
                ```
            operationId: get-playback-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PlaybackState'
                    description: Model describing the current playback state and meta
                        data
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the current playback state
            tags:
            - Playback
            - mozart
    /api/v1/playback/uri:
        post:
            description: |-
                Use the `post-uri-source` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_uri_source()
                ```
                ```mozart_api
                await mozart_api.post_uri_source()
                ```
                ```playback_api
                await playback_api.post_uri_source()
                ```
            operationId: post-uri-source
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Uri'
                description: the desired uri from which to stream data
                required: true
            responses:
                '201':
                    description: successful operation
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the URI from which sound is streamed
            tags:
            - Playback
            - mozart
    /api/v1/product/info/friendlyname:
        put:
            description: |-
                Use the `set-product-friendly-name` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_product_friendly_name()
                ```
                ```mozart_api
                await mozart_api.set_product_friendly_name()
                ```
                ```product_api
                await product_api.set_product_friendly_name()
                ```
            operationId: set-product-friendly-name
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProductFriendlyName'
                description: the friendly name for the product
                required: true
            responses:
                '204':
                    description: product friendly name updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the friendly name
            tags:
            - Product
            - mozart
    /api/v1/remote:
        get:
            description: |-
                Use the `get-remote-menu` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_remote_menu()
                ```
                ```mozart_api
                await mozart_api.get_remote_menu()
                ```
                ```remote_api
                await remote_api.get_remote_menu()
                ```
            operationId: get-remote-menu
            parameters:
            -   description: Get all descendants to this item
                in: query
                name: descendantsTo
                schema:
                    format: uuid
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            example:
                                6c2ab917-2a9e-42dd-87c6-1fa2fabcdeb0:
                                    content:
                                        contentUri: tv
                                        source: tv
                                    firstChildMenuItemId: ee5196ce-65c4-4c56-9a48-1943c4afef9c
                                    fixed: true
                                    id: 6c2ab917-2a9e-42dd-87c6-1fa2fabcdeb0
                                    label: TV
                                    parentMenuItemId: null
                                dd5196ce-65c4-4c56-9a48-1943c4afef9c:
                                    content:
                                        contentUri: tv://HBO
                                        source: tv
                                    fixed: false
                                    id: dd5196ce-65c4-4c56-9a48-1943c4afef9c
                                    label: HBO
                                    parentMenuItemId: 6c2ab917-2a9e-42dd-87c6-1fa2fabcdeb0
                                ee5196ce-65c4-4c56-9a48-1943c4afef9c:
                                    content:
                                        contentUri: tv://Netflix
                                        source: tv
                                    fixed: false
                                    id: ee5196ce-65c4-4c56-9a48-1943c4afef9c
                                    label: Netflix
                                    nextSiblingMenuItemId: dd5196ce-65c4-4c56-9a48-1943c4afef9c
                                    parentMenuItemId: 6c2ab917-2a9e-42dd-87c6-1fa2fabcdeb0
                            schema:
                                $ref: '#/components/schemas/RemoteMenuItemMap'
                    description: Successful request
            summary: Get all remote menu items
            tags:
            - Remote
            - mozart
    /api/v1/remote/key/{id}/trigger:
        post:
            description: |-
                Use the `post-remote-key-trigger` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_remote_key_trigger()
                ```
                ```mozart_api
                await mozart_api.post_remote_key_trigger()
                ```
                ```remote_api
                await remote_api.post_remote_key_trigger()
                ```
            operationId: post-remote-key-trigger
            parameters:
            -   description: Key identifier
                in: path
                name: id
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RemoteUIKeyState'
                required: true
            responses:
                '204':
                    description: Remote input key press registered successfully
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Failed to register key press
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Key not found
            summary: Remote input key press
            tags:
            - Remote
            - mozart
    /api/v1/remote/{id}/trigger:
        parameters:
        -   description: Remote menu item ID
            in: path
            name: id
            required: true
            schema:
                format: uuid
                type: string
        post:
            description: |-
                Use the `post-remote-trigger` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_remote_trigger()
                ```
                ```mozart_api
                await mozart_api.post_remote_trigger()
                ```
                ```remote_api
                await remote_api.post_remote_trigger()
                ```
            operationId: post-remote-trigger
            responses:
                '204':
                    description: Menu item successfully triggered
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Menu item not found
            summary: Trigger a remote menu item
            tags:
            - Remote
            - mozart
    /api/v1/scene/match-trigger:
        post:
            description: |-
                Use the `post-scene-match-trigger` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_scene_match_trigger()
                ```
                ```mozart_api
                await mozart_api.post_scene_match_trigger()
                ```
                ```scenes_api
                await scenes_api.post_scene_match_trigger()
                ```
            operationId: post-scene-match-trigger
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SceneMatch'
                required: true
            responses:
                '204':
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request no match objects provided
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Could not find any matching scene
            summary: Trigger the first scene with same non null objects provided in
                the SceneMatch object
            tags:
            - Scenes
            - mozart
    /api/v1/scene/run:
        post:
            description: |-
                Use the `run-provided-scene` method in the Python package with one of:
                ```mozart_client
                await mozart_client.run_provided_scene()
                ```
                ```mozart_api
                await mozart_api.run_provided_scene()
                ```
                ```scenes_api
                await scenes_api.run_provided_scene()
                ```
            operationId: run-provided-scene
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SceneProperties'
                description: The scene you want to run
                required: true
            responses:
                '204':
                    description: Successful request
            summary: Run provided scene
            tags:
            - Scenes
            - mozart
    /api/v1/scene/{id}/trigger:
        post:
            description: |-
                Use the `post-scene-trigger` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_scene_trigger()
                ```
                ```mozart_api
                await mozart_api.post_scene_trigger()
                ```
                ```scenes_api
                await scenes_api.post_scene_trigger()
                ```
            operationId: post-scene-trigger
            parameters:
            -   description: ID of the scene
                in: path
                name: id
                required: true
                schema:
                    format: uuid
                    type: string
            responses:
                '204':
                    description: Successful request
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Bad request can't convert id to UUID
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Could not find scene
            summary: Trigger a specific scene
            tags:
            - Scenes
            - mozart
    /api/v1/scenes:
        get:
            description: |-
                Use the `get-all-scenes` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_all_scenes()
                ```
                ```mozart_api
                await mozart_api.get_all_scenes()
                ```
                ```scenes_api
                await scenes_api.get_all_scenes()
                ```
            operationId: get-all-scenes
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SceneMap'
                    description: Successful request
            summary: Get a list of configured scenes
            tags:
            - Scenes
            - mozart
    /api/v1/setup/bluetooth/devices:
        get:
            description: |-
                Use the `get-bluetooth-devices-status` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_bluetooth_devices_status()
                ```
                ```mozart_api
                await mozart_api.get_bluetooth_devices_status()
                ```
                ```bluetooth_api
                await bluetooth_api.get_bluetooth_devices_status()
                ```
            operationId: get-bluetooth-devices-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BluetoothDeviceList'
                    description: returns the current bluetooth devices
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the bluetooth devices status
            tags:
            - Bluetooth
            - mozart
    /api/v1/setup/presets:
        get:
            description: |-
                Use the `get-presets` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_presets()
                ```
                ```mozart_api
                await mozart_api.get_presets()
                ```
                ```settings_api
                await settings_api.get_presets()
                ```
            operationId: get-presets
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PresetMap'
                    description: The preset audio source mapping
            summary: Get the preset configuration
            tags:
            - Settings
            - mozart
    /api/v1/setup/remote/home-control-ixp:
        post:
            description: |-
                Use the `post-remote-home-control-ixp` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_remote_home_control_ixp()
                ```
                ```mozart_api
                await mozart_api.post_remote_home_control_ixp()
                ```
                ```settings_api
                await settings_api.post_remote_home_control_ixp()
                ```
            operationId: post-remote-home-control-ixp
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HomeControlIxp'
                description: The new IXP
                required: true
            responses:
                '200':
                    description: IXP updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Change any active Immersive Experience (IXP)
            tags:
            - Settings
            - mozart
    /api/v1/setup/remote/home-control-uri:
        get:
            description: |-
                Use the `get-remote-home-control-uri` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_remote_home_control_uri()
                ```
                ```mozart_api
                await mozart_api.get_remote_home_control_uri()
                ```
                ```settings_api
                await settings_api.get_remote_home_control_uri()
                ```
            operationId: get-remote-home-control-uri
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HomeControlUri'
                    description: HomeControl dashboard and IXP uri
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get HomeControl dashboard uri and (optional) Immersive Experience
                (IXP) start page
            tags:
            - Settings
            - mozart
        put:
            description: |-
                Use the `set-remote-home-control-uri` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_remote_home_control_uri()
                ```
                ```mozart_api
                await mozart_api.set_remote_home_control_uri()
                ```
                ```settings_api
                await settings_api.set_remote_home_control_uri()
                ```
            operationId: set-remote-home-control-uri
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HomeControlUri'
                description: The new uri for HomeControl dashboard and IXP start page
                required: true
            responses:
                '200':
                    description: Uri for HomeControl dashboard and IXP start page
                        updated
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the uri for HomeControl dashboard and Immersive Experience
                (IXP) start page
            tags:
            - Settings
            - mozart
    /api/v1/setup/remotes:
        get:
            description: |-
                Use the `get-bluetooth-remotes` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_bluetooth_remotes()
                ```
                ```mozart_api
                await mozart_api.get_bluetooth_remotes()
                ```
                ```settings_api
                await settings_api.get_bluetooth_remotes()
                ```
            operationId: get-bluetooth-remotes
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PairedRemoteResponse'
                    description: List of paired remotes was obtained
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get a list of paired bluetooth remotes
            tags:
            - Settings
            - mozart
    /api/v1/softwareupdate:
        get:
            description: |-
                Use the `get-softwareupdate-status` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_softwareupdate_status()
                ```
                ```mozart_api
                await mozart_api.get_softwareupdate_status()
                ```
                ```software update_api
                await software update_api.get_softwareupdate_status()
                ```
            operationId: get-softwareupdate-status
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SoftwareUpdateStatus'
                    description: the software update status
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the current software update status
            tags:
            - Software update
            - mozart
    /api/v1/sound/features:
        get:
            description: |-
                Use the `get-sound-features` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_sound_features()
                ```
                ```mozart_api
                await mozart_api.get_sound_features()
                ```
                ```sound_api
                await sound_api.get_sound_features()
                ```
            operationId: get-sound-features
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SupportedSoundFeatures'
                    description: Supported sound features
            summary: |
                Get available sound features
                that match the current role (standalone or multichannel).
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes:
        get:
            description: |-
                Use the `get-listening-mode-set` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_listening_mode_set()
                ```
                ```mozart_api
                await mozart_api.get_listening_mode_set()
                ```
                ```sound_api
                await sound_api.get_listening_mode_set()
                ```
            operationId: get-listening-mode-set
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListeningModeSet'
                    description: the list of listening modes
            summary: |
                Get available listening modes that match the current role
                (standalone, multichannel or both(all)).
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes/active:
        get:
            description: |-
                Use the `get-active-listening-mode` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_active_listening_mode()
                ```
                ```mozart_api
                await mozart_api.get_active_listening_mode()
                ```
                ```sound_api
                await sound_api.get_active_listening_mode()
                ```
            operationId: get-active-listening-mode
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListeningModeRef'
                    description: the active listening mode
            summary: Get the active listening mode
            tags:
            - Sound
            - mozart
    /api/v1/sound/listening-modes/{id}/activate:
        parameters:
        -   $ref: '#/components/parameters/ListeningModeID'
        post:
            description: |-
                Use the `activate-listening-mode` method in the Python package with one of:
                ```mozart_client
                await mozart_client.activate_listening_mode()
                ```
                ```mozart_api
                await mozart_api.activate_listening_mode()
                ```
                ```sound_api
                await sound_api.activate_listening_mode()
                ```
            operationId: activate-listening-mode
            responses:
                '204':
                    description: Listening mode active
                '404':
                    $ref: '#/components/responses/MissingListeningMode'
            summary: Activate a listening mode
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/bass:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-bass` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_sound_settings_adjustments_bass()
                ```
                ```mozart_api
                await mozart_api.set_sound_settings_adjustments_bass()
                ```
                ```sound_api
                await sound_api.set_sound_settings_adjustments_bass()
                ```
            operationId: set-sound-settings-adjustments-bass
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Bass'
                description: the bass level
                required: true
            responses:
                '201':
                    description: accepted the bass sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Update the sound settings adjustments for bass
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/directivity:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-directivity` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_sound_settings_adjustments_directivity()
                ```
                ```mozart_api
                await mozart_api.set_sound_settings_adjustments_directivity()
                ```
                ```sound_api
                await sound_api.set_sound_settings_adjustments_directivity()
                ```
            operationId: set-sound-settings-adjustments-directivity
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Directivity'
                description: the directivity
                required: true
            responses:
                '201':
                    description: accepted the directivity sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Update the sound settings adjustments for directivity
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/loudness:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-loudness` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_sound_settings_adjustments_loudness()
                ```
                ```mozart_api
                await mozart_api.set_sound_settings_adjustments_loudness()
                ```
                ```sound_api
                await sound_api.set_sound_settings_adjustments_loudness()
                ```
            operationId: set-sound-settings-adjustments-loudness
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Loudness'
                description: the loudness mode
                required: true
            responses:
                '201':
                    description: accepted the loudness sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Update the sound settings adjustments for loudness
            tags:
            - Sound
            - mozart
    /api/v1/sound/settings/adjustments/treble:
        put:
            description: |-
                Use the `set-sound-settings-adjustments-treble` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_sound_settings_adjustments_treble()
                ```
                ```mozart_api
                await mozart_api.set_sound_settings_adjustments_treble()
                ```
                ```sound_api
                await sound_api.set_sound_settings_adjustments_treble()
                ```
            operationId: set-sound-settings-adjustments-treble
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Treble'
                description: the treble level
                required: true
            responses:
                '201':
                    description: accepted the treble sound settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Update the sound settings adjustments for treble
            tags:
            - Sound
            - mozart
    /api/v1/sound/speakergroup/active:
        get:
            description: |-
                Use the `get-speakergroup-active` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_speakergroup_active()
                ```
                ```mozart_api
                await mozart_api.get_speakergroup_active()
                ```
                ```speakergroup_api
                await speakergroup_api.get_speakergroup_active()
                ```
            operationId: get-speakergroup-active
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SpeakerGroupOverview'
                    description: The active speaker group, or empty if none
            summary: Get the active speaker group
            tags:
            - SpeakerGroup
            - mozart
    /api/v1/sound/volume:
        get:
            description: |-
                Use the `get-current-volume` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_current_volume()
                ```
                ```mozart_api
                await mozart_api.get_current_volume()
                ```
                ```sound_api
                await sound_api.get_current_volume()
                ```
            operationId: get-current-volume
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VolumeState'
                    description: The currently active volume
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the current volume state
            tags:
            - Sound
            - mozart
    /api/v1/sound/volume/level:
        put:
            description: |-
                Use the `set-current-volume-level` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_current_volume_level()
                ```
                ```mozart_api
                await mozart_api.set_current_volume_level()
                ```
                ```sound_api
                await sound_api.set_current_volume_level()
                ```
            operationId: set-current-volume-level
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VolumeLevel'
                description: The volume level to apply
                required: true
            responses:
                '201':
                    description: volume level change accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request (e.g. volume cannot be set)
            summary: Set the current volume level
            tags:
            - Sound
            - mozart
    /api/v1/sound/volume/mute:
        put:
            description: |-
                Use the `set-volume-mute` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_volume_mute()
                ```
                ```mozart_api
                await mozart_api.set_volume_mute()
                ```
                ```sound_api
                await sound_api.set_volume_mute()
                ```
            operationId: set-volume-mute
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VolumeMute'
                description: The mute state to apply
                required: true
            responses:
                '201':
                    description: volume mute state accepted
                '400':
                    description: volume mute not accepted
            summary: Set the volume mute state
            tags:
            - Sound
            - mozart
    /api/v1/sound/volume/settings:
        get:
            description: |-
                Use the `get-volume-settings` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_volume_settings()
                ```
                ```mozart_api
                await mozart_api.get_volume_settings()
                ```
                ```sound_api
                await sound_api.get_volume_settings()
                ```
            operationId: get-volume-settings
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VolumeSettings'
                    description: returns the volume settings
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the current volume settings for default and maximum volume
                level
            tags:
            - Sound
            - mozart
        put:
            description: |-
                Use the `set-volume-settings` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_volume_settings()
                ```
                ```mozart_api
                await mozart_api.set_volume_settings()
                ```
                ```sound_api
                await sound_api.set_volume_settings()
                ```
            operationId: set-volume-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VolumeSettings'
                description: The settings to apply
                required: true
            responses:
                '201':
                    description: volume settings accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Set the current volume settings for default and maximum volume
                level
            tags:
            - Sound
            - mozart
    /api/v1/stand/move:
        post:
            description: |-
                Use the `set-stand-movement` method in the Python package with one of:
                ```mozart_client
                await mozart_client.set_stand_movement()
                ```
                ```mozart_api
                await mozart_api.set_stand_movement()
                ```
                ```stand_api
                await stand_api.set_stand_movement()
                ```
            operationId: set-stand-movement
            parameters:
            -   description: Use slow speed on continuous movement
                in: query
                name: slow-speed
                schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StandMovement'
                description: Stand Movement
                required: true
            responses:
                '204':
                    description: the movement were accepted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: Stand not connected ot stand capability is not available
            summary: Set stand movement with either an angle or a movement type
            tags:
            - Stand
            - mozart
    /api/v1/state:
        get:
            description: |-
                Use the `get-product-state` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_product_state()
                ```
                ```mozart_api
                await mozart_api.get_product_state()
                ```
                ```product_api
                await product_api.get_product_state()
                ```
            operationId: get-product-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProductState'
                    description: A snapshot of the overall state of the product
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Get the overall state from the product
            tags:
            - Product
            - mozart
    /api/v1/state/power:
        get:
            description: |-
                Use the `get-power-state` method in the Python package with one of:
                ```mozart_client
                await mozart_client.get_power_state()
                ```
                ```mozart_api
                await mozart_api.get_power_state()
                ```
                ```power_api
                await power_api.get_power_state()
                ```
            operationId: get-power-state
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PowerStateEnum'
                    description: The power state of the product
            summary: Get power state of the product
            tags:
            - Power
            - mozart
    /api/v1/state/reboot:
        put:
            description: |-
                Use the `post-reboot` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_reboot()
                ```
                ```mozart_api
                await mozart_api.post_reboot()
                ```
                ```power_api
                await power_api.post_reboot()
                ```
            operationId: post-reboot
            responses:
                '200':
                    description: The device is being rebooted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Reboot the mozart device
            tags:
            - Power
            - mozart
    /api/v1/state/standby:
        put:
            description: |-
                Use the `post-standby` method in the Python package with one of:
                ```mozart_client
                await mozart_client.post_standby()
                ```
                ```mozart_api
                await mozart_api.post_standby()
                ```
                ```power_api
                await power_api.post_standby()
                ```
            operationId: post-standby
            responses:
                '200':
                    description: The device is put in standby
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorModel'
                    description: invalid request
            summary: Put the device in standby
            tags:
            - Power
            - mozart
security: []
servers:
-   description: Local IP address placeholder
    url: http://0.0.0.0

# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from mozart_api.models.beolink_experience import BeolinkExperience
from typing import Optional, Set
from typing_extensions import Self


class BeolinkExperiencesResult(BaseModel):
    """
    BeolinkExperiencesResult
    """  # noqa: E501

    experiences: List[BeolinkExperience]
    request_id: StrictStr = Field(description="Beolink request ID", alias="requestID")
    status: StrictStr = Field(
        description="Current scan status. * busy: there is another scan in progress * timeout: the scan timed out. The results will be partial "
    )
    __properties: ClassVar[List[str]] = ["experiences", "requestID", "status"]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["ok", "busy", "timeout"]):
            raise ValueError("must be one of enum values ('ok', 'busy', 'timeout')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BeolinkExperiencesResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in experiences (list)
        _items = []
        if self.experiences:
            for _item in self.experiences:
                if _item:
                    _items.append(_item.to_dict())
            _dict["experiences"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BeolinkExperiencesResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "experiences": (
                    [BeolinkExperience.from_dict(_item) for _item in obj["experiences"]]
                    if obj.get("experiences") is not None
                    else None
                ),
                "requestID": obj.get("requestID"),
                "status": obj.get("status"),
            }
        )
        return _obj

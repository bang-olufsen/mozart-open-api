# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from mozart_api.models.play_queue_item_type import PlayQueueItemType
from mozart_api.models.playback_content_metadata import PlaybackContentMetadata
from typing import Optional, Set
from typing_extensions import Self


class PlayQueueItem(BaseModel):
    """
    PlayQueueItem
    """  # noqa: E501

    index: Optional[StrictInt] = None
    metadata: Optional[PlaybackContentMetadata] = None
    provider: PlayQueueItemType
    start_now_from_position: Optional[StrictInt] = Field(
        default=None,
        description="Start playing specified track as soon as possible. This works for any type, for `track` set to 0 and for `playlist` specify the wanted track from position 0",
        alias="startNowFromPosition",
    )
    type: StrictStr
    uri: StrictStr = Field(
        description="This can be url, track id, playlist id, radio id and suchlike"
    )
    __properties: ClassVar[List[str]] = [
        "index",
        "metadata",
        "provider",
        "startNowFromPosition",
        "type",
        "uri",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["track", "playlist"]):
            raise ValueError("must be one of enum values ('track', 'playlist')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayQueueItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict["metadata"] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict["provider"] = self.provider.to_dict()
        # set to None if start_now_from_position (nullable) is None
        # and model_fields_set contains the field
        if (
            self.start_now_from_position is None
            and "start_now_from_position" in self.model_fields_set
        ):
            _dict["startNowFromPosition"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayQueueItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "index": obj.get("index"),
                "metadata": (
                    PlaybackContentMetadata.from_dict(obj["metadata"])
                    if obj.get("metadata") is not None
                    else None
                ),
                "provider": (
                    PlayQueueItemType.from_dict(obj["provider"])
                    if obj.get("provider") is not None
                    else None
                ),
                "startNowFromPosition": obj.get("startNowFromPosition"),
                "type": obj.get("type"),
                "uri": obj.get("uri"),
            }
        )
        return _obj

# coding: utf-8

"""
Mozart platform API

API for interacting with the Mozart platform.

The version of the OpenAPI document: 0.2.0
Contact: support@bang-olufsen.dk
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

try:
    from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, validator
except ImportError:
    from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

from mozart_api.models.beo_shape_status_sound_profile import BeoShapeStatusSoundProfile


class BeoShapeStatus(BaseModel):
    """
    Status  # noqa: E501
    """

    amplifier_tiles_configured: StrictInt = Field(
        default=...,
        alias="amplifierTilesConfigured",
        description="Number of amplifier Shape titles currently configured",
    )
    amplifier_tiles_online: StrictInt = Field(
        default=...,
        alias="amplifierTilesOnline",
        description="Number of amplifier Shape tiles currently connected",
    )
    design_id: Optional[StrictStr] = Field(default=None, alias="designId")
    design_name: Optional[StrictStr] = Field(default=None, alias="designName")
    sound_profile: Optional[BeoShapeStatusSoundProfile] = Field(
        default=None, alias="soundProfile"
    )
    speaker_tiles_configured: StrictInt = Field(
        default=...,
        alias="speakerTilesConfigured",
        description="Number of speaker Shape titles currently configured",
    )
    state: StrictStr = Field(...)
    __properties = [
        "amplifierTilesConfigured",
        "amplifierTilesOnline",
        "designId",
        "designName",
        "soundProfile",
        "speakerTilesConfigured",
        "state",
    ]

    @validator("state")
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "notUsed",
            "updatingFirmware",
            "initializing",
            "errorHardwareConfig",
            "ready",
        ):
            raise ValueError(
                "must be one of enum values ('notUsed', 'updatingFirmware', 'initializing', 'errorHardwareConfig', 'ready')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BeoShapeStatus:
        """Create an instance of BeoShapeStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sound_profile
        if self.sound_profile:
            _dict["soundProfile"] = self.sound_profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BeoShapeStatus:
        """Create an instance of BeoShapeStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BeoShapeStatus.parse_obj(obj)

        _obj = BeoShapeStatus.parse_obj(
            {
                "amplifier_tiles_configured": obj.get("amplifierTilesConfigured"),
                "amplifier_tiles_online": obj.get("amplifierTilesOnline"),
                "design_id": obj.get("designId"),
                "design_name": obj.get("designName"),
                "sound_profile": BeoShapeStatusSoundProfile.from_dict(
                    obj.get("soundProfile")
                )
                if obj.get("soundProfile") is not None
                else None,
                "speaker_tiles_configured": obj.get("speakerTilesConfigured"),
                "state": obj.get("state"),
            }
        )
        return _obj

# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from mozart_api.models.speaker_link_member_status import SpeakerLinkMemberStatus


class SpeakerLinkStatus(BaseModel):
    """
    SpeakerLinkStatus
    """

    speakers: conlist(SpeakerLinkMemberStatus) = Field(...)
    type: StrictStr = Field(...)
    __properties = ["speakers", "type"]

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("standalone", "stereo", "surround"):
            raise ValueError(
                "must be one of enum values ('standalone', 'stereo', 'surround')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SpeakerLinkStatus:
        """Create an instance of SpeakerLinkStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in speakers (list)
        _items = []
        if self.speakers:
            for _item in self.speakers:
                if _item:
                    _items.append(_item.to_dict())
            _dict["speakers"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SpeakerLinkStatus:
        """Create an instance of SpeakerLinkStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SpeakerLinkStatus.parse_obj(obj)

        _obj = SpeakerLinkStatus.parse_obj(
            {
                "speakers": (
                    [
                        SpeakerLinkMemberStatus.from_dict(_item)
                        for _item in obj.get("speakers")
                    ]
                    if obj.get("speakers") is not None
                    else None
                ),
                "type": obj.get("type"),
            }
        )
        return _obj

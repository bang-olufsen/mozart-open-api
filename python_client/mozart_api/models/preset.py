# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from mozart_api.models.action import Action
from mozart_api.models.content_item import ContentItem
from mozart_api.models.source_type_enum import SourceTypeEnum
from typing import Optional, Set
from typing_extensions import Self


class Preset(BaseModel):
    """
    Preset
    """  # noqa: E501

    action_list: Optional[List[Action]] = Field(
        default=None,
        description="An ordered list of Actions to run on the product",
        alias="actionList",
    )
    scene_list: Optional[List[StrictStr]] = Field(
        default=None, description="A list of scenes", alias="sceneList"
    )
    content: Optional[ContentItem] = None
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    source: Optional[SourceTypeEnum] = None
    title: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "actionList",
        "sceneList",
        "content",
        "id",
        "name",
        "source",
        "title",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Preset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in action_list (list)
        _items = []
        if self.action_list:
            for _item in self.action_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict["actionList"] = _items
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict["content"] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict["source"] = self.source.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Preset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "actionList": (
                    [Action.from_dict(_item) for _item in obj["actionList"]]
                    if obj.get("actionList") is not None
                    else None
                ),
                "sceneList": obj.get("sceneList"),
                "content": (
                    ContentItem.from_dict(obj["content"])
                    if obj.get("content") is not None
                    else None
                ),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "source": (
                    SourceTypeEnum.from_dict(obj["source"])
                    if obj.get("source") is not None
                    else None
                ),
                "title": obj.get("title"),
            }
        )
        return _obj

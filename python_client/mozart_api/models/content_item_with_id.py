# coding: utf-8

"""
Mozart platform API

API for interacting with the Mozart platform.

The version of the OpenAPI document: 0.2.0
Contact: support@bang-olufsen.dk
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

try:
    from pydantic.v1 import BaseModel, StrictStr
except ImportError:
    from pydantic import BaseModel, StrictStr

from mozart_api.models.content_item import ContentItem


class ContentItemWithId(BaseModel):
    """
    ContentItemWithId
    """

    content: Optional[ContentItem] = None
    id: Optional[StrictStr] = None
    __properties = ["content", "id"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContentItemWithId:
        """Create an instance of ContentItemWithId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict["content"] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContentItemWithId:
        """Create an instance of ContentItemWithId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContentItemWithId.parse_obj(obj)

        _obj = ContentItemWithId.parse_obj(
            {
                "content": ContentItem.from_dict(obj.get("content"))
                if obj.get("content") is not None
                else None,
                "id": obj.get("id"),
            }
        )
        return _obj

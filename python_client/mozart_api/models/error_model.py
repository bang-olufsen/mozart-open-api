# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr


class ErrorModel(BaseModel):
    """
    the general error model  # noqa: E501
    """

    error_code: Optional[StrictStr] = Field(
        None,
        alias="errorCode",
        description="A wellknown code that signal the error, can be used by callers ",
    )
    error_id: Optional[StrictStr] = Field(
        None,
        alias="errorId",
        description="A unique identifier used to e.g. quick find in logs ",
    )
    error_message: Optional[StrictStr] = Field(
        None,
        alias="errorMessage",
        description="A textual representation, human readable and suitable for logs ",
    )
    __properties = ["errorCode", "errorId", "errorMessage"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ErrorModel:
        """Create an instance of ErrorModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ErrorModel:
        """Create an instance of ErrorModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ErrorModel.parse_obj(obj)

        _obj = ErrorModel.parse_obj(
            {
                "error_code": obj.get("errorCode"),
                "error_id": obj.get("errorId"),
                "error_message": obj.get("errorMessage"),
            }
        )
        return _obj

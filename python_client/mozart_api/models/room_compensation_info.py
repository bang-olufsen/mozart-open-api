# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from mozart_api.models.room_compensation_debug import RoomCompensationDebug
from mozart_api.models.room_compensation_enabled import RoomCompensationEnabled
from mozart_api.models.room_compensation_result import RoomCompensationResult
from mozart_api.models.room_compensation_state import RoomCompensationState
from mozart_api.models.room_compensation_type import RoomCompensationType
from mozart_api.models.room_compensation_version import RoomCompensationVersion
from typing import Optional, Set
from typing_extensions import Self


class RoomCompensationInfo(BaseModel):
    """
    RoomCompensationInfo
    """  # noqa: E501

    debug: Optional[RoomCompensationDebug] = None
    enabled: Optional[RoomCompensationEnabled] = None
    last_result: Optional[RoomCompensationResult] = Field(
        default=None, alias="lastResult"
    )
    last_run: Optional[RoomCompensationState] = Field(default=None, alias="lastRun")
    type: Optional[RoomCompensationType] = None
    version: Optional[RoomCompensationVersion] = None
    __properties: ClassVar[List[str]] = [
        "debug",
        "enabled",
        "lastResult",
        "lastRun",
        "type",
        "version",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoomCompensationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debug
        if self.debug:
            _dict["debug"] = self.debug.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enabled
        if self.enabled:
            _dict["enabled"] = self.enabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_result
        if self.last_result:
            _dict["lastResult"] = self.last_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_run
        if self.last_run:
            _dict["lastRun"] = self.last_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict["type"] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict["version"] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoomCompensationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "debug": (
                    RoomCompensationDebug.from_dict(obj["debug"])
                    if obj.get("debug") is not None
                    else None
                ),
                "enabled": (
                    RoomCompensationEnabled.from_dict(obj["enabled"])
                    if obj.get("enabled") is not None
                    else None
                ),
                "lastResult": (
                    RoomCompensationResult.from_dict(obj["lastResult"])
                    if obj.get("lastResult") is not None
                    else None
                ),
                "lastRun": (
                    RoomCompensationState.from_dict(obj["lastRun"])
                    if obj.get("lastRun") is not None
                    else None
                ),
                "type": (
                    RoomCompensationType.from_dict(obj["type"])
                    if obj.get("type") is not None
                    else None
                ),
                "version": (
                    RoomCompensationVersion.from_dict(obj["version"])
                    if obj.get("version") is not None
                    else None
                ),
            }
        )
        return _obj

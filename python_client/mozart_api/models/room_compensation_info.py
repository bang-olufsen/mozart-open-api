# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from mozart_api.models.room_compensation_debug import RoomCompensationDebug
from mozart_api.models.room_compensation_enabled import RoomCompensationEnabled
from mozart_api.models.room_compensation_result import RoomCompensationResult
from mozart_api.models.room_compensation_state import RoomCompensationState
from mozart_api.models.room_compensation_type import RoomCompensationType
from mozart_api.models.room_compensation_version import RoomCompensationVersion


class RoomCompensationInfo(BaseModel):
    """
    RoomCompensationInfo
    """

    debug: Optional[RoomCompensationDebug] = None
    enabled: Optional[RoomCompensationEnabled] = None
    last_result: Optional[RoomCompensationResult] = Field(None, alias="lastResult")
    last_run: Optional[RoomCompensationState] = Field(None, alias="lastRun")
    type: Optional[RoomCompensationType] = None
    version: Optional[RoomCompensationVersion] = None
    __properties = ["debug", "enabled", "lastResult", "lastRun", "type", "version"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoomCompensationInfo:
        """Create an instance of RoomCompensationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of debug
        if self.debug:
            _dict["debug"] = self.debug.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enabled
        if self.enabled:
            _dict["enabled"] = self.enabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_result
        if self.last_result:
            _dict["lastResult"] = self.last_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_run
        if self.last_run:
            _dict["lastRun"] = self.last_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict["type"] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict["version"] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoomCompensationInfo:
        """Create an instance of RoomCompensationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RoomCompensationInfo.parse_obj(obj)

        _obj = RoomCompensationInfo.parse_obj(
            {
                "debug": RoomCompensationDebug.from_dict(obj.get("debug"))
                if obj.get("debug") is not None
                else None,
                "enabled": RoomCompensationEnabled.from_dict(obj.get("enabled"))
                if obj.get("enabled") is not None
                else None,
                "last_result": RoomCompensationResult.from_dict(obj.get("lastResult"))
                if obj.get("lastResult") is not None
                else None,
                "last_run": RoomCompensationState.from_dict(obj.get("lastRun"))
                if obj.get("lastRun") is not None
                else None,
                "type": RoomCompensationType.from_dict(obj.get("type"))
                if obj.get("type") is not None
                else None,
                "version": RoomCompensationVersion.from_dict(obj.get("version"))
                if obj.get("version") is not None
                else None,
            }
        )
        return _obj

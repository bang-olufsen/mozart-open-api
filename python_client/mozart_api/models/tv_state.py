# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from mozart_api.models.tv_integration_types import TvIntegrationTypes
from mozart_api.models.tv_properties import TvProperties
from mozart_api.models.tv_sound_settings import TvSoundSettings


class TvState(BaseModel):
    """
    TvState
    """

    integration: Optional[TvIntegrationTypes] = None
    sound_settings: Optional[TvSoundSettings] = Field(None, alias="soundSettings")
    tv_info: Optional[TvProperties] = Field(None, alias="tvInfo")
    __properties = ["integration", "soundSettings", "tvInfo"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TvState:
        """Create an instance of TvState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of integration
        if self.integration:
            _dict["integration"] = self.integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sound_settings
        if self.sound_settings:
            _dict["soundSettings"] = self.sound_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tv_info
        if self.tv_info:
            _dict["tvInfo"] = self.tv_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TvState:
        """Create an instance of TvState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TvState.parse_obj(obj)

        _obj = TvState.parse_obj(
            {
                "integration": TvIntegrationTypes.from_dict(obj.get("integration"))
                if obj.get("integration") is not None
                else None,
                "sound_settings": TvSoundSettings.from_dict(obj.get("soundSettings"))
                if obj.get("soundSettings") is not None
                else None,
                "tv_info": TvProperties.from_dict(obj.get("tvInfo"))
                if obj.get("tvInfo") is not None
                else None,
            }
        )
        return _obj

# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self


class VideoPixelFormat(BaseModel):
    """
    VideoPixelFormat
    """  # noqa: E501

    bitdepth: Optional[StrictStr] = None
    chroma_subsample: Optional[StrictStr] = Field(default=None, alias="chromaSubsample")
    colorimetry: Optional[StrictStr] = None
    full_range: Optional[StrictBool] = Field(default=None, alias="fullRange")
    __properties: ClassVar[List[str]] = [
        "bitdepth",
        "chromaSubsample",
        "colorimetry",
        "fullRange",
    ]

    @field_validator("bitdepth")
    def bitdepth_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["bit8", "bit10", "bit12"]):
            raise ValueError("must be one of enum values ('bit8', 'bit10', 'bit12')")
        return value

    @field_validator("chroma_subsample")
    def chroma_subsample_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["yCbCr444RGB", "yCbCr422", "yCbCr420"]):
            raise ValueError(
                "must be one of enum values ('yCbCr444RGB', 'yCbCr422', 'yCbCr420')"
            )
        return value

    @field_validator("colorimetry")
    def colorimetry_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "rGB",
                "opRGB",
                "rGBP3D65",
                "rGBP3DCI",
                "rGB2020",
                "yCC601",
                "yCC709",
                "xvYCC601",
                "xvYCC709",
                "sYCC601",
                "opYCC601",
                "yCC2020NCL",
                "yCC2020NL",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('rGB', 'opRGB', 'rGBP3D65', 'rGBP3DCI', 'rGB2020', 'yCC601', 'yCC709', 'xvYCC601', 'xvYCC709', 'sYCC601', 'opYCC601', 'yCC2020NCL', 'yCC2020NL')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoPixelFormat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoPixelFormat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "bitdepth": obj.get("bitdepth"),
                "chromaSubsample": obj.get("chromaSubsample"),
                "colorimetry": obj.get("colorimetry"),
                "fullRange": obj.get("fullRange"),
            }
        )
        return _obj

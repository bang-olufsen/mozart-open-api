# coding: utf-8

"""
Mozart platform API

API for interacting with the Mozart platform.

The version of the OpenAPI document: 0.2.0
Contact: support@bang-olufsen.dk
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import List

try:
    from pydantic.v1 import BaseModel, Field, StrictStr, conlist
except ImportError:
    from pydantic import BaseModel, Field, StrictStr, conlist


class BeoShapeStatusSoundProfile(BaseModel):
    """
    BeoShapeStatusSoundProfile
    """

    active_directivity: StrictStr = Field(default=..., alias="activeDirectivity")
    speaker_id: StrictStr = Field(default=..., alias="speakerId")
    supported_directivity: conlist(StrictStr) = Field(
        default=...,
        alias="supportedDirectivity",
        description="The supported Beosound Shape directivity. Extracted from the provided design fetched from the cloud.",
    )
    __properties = ["activeDirectivity", "speakerId", "supportedDirectivity"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BeoShapeStatusSoundProfile:
        """Create an instance of BeoShapeStatusSoundProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BeoShapeStatusSoundProfile:
        """Create an instance of BeoShapeStatusSoundProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BeoShapeStatusSoundProfile.parse_obj(obj)

        _obj = BeoShapeStatusSoundProfile.parse_obj(
            {
                "active_directivity": obj.get("activeDirectivity"),
                "speaker_id": obj.get("speakerId"),
                "supported_directivity": obj.get("supportedDirectivity"),
            }
        )
        return _obj

# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator


class BeoRemoteButton(BaseModel):
    """
    BeoRemoteButton
    """

    key: Optional[StrictStr] = Field(None, alias="Key")
    type: Optional[StrictStr] = Field(None, alias="Type")
    __properties = ["Key", "Type"]

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("KeyPress", "KeyRelease"):
            raise ValueError("must be one of enum values ('KeyPress', 'KeyRelease')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BeoRemoteButton:
        """Create an instance of BeoRemoteButton from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BeoRemoteButton:
        """Create an instance of BeoRemoteButton from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BeoRemoteButton.parse_obj(obj)

        _obj = BeoRemoteButton.parse_obj(
            {"key": obj.get("Key"), "type": obj.get("Type")}
        )
        return _obj

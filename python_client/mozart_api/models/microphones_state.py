# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from mozart_api.models.microphone_state import MicrophoneState
from typing import Optional, Set
from typing_extensions import Self


class MicrophonesState(BaseModel):
    """
    state of microphones, both physical switches and software state
    """  # noqa: E501

    microphone_state: Optional[MicrophoneState] = Field(
        default=None, alias="microphoneState"
    )
    microphone_switch_state: Optional[MicrophoneState] = Field(
        default=None, alias="microphoneSwitchState"
    )
    __properties: ClassVar[List[str]] = ["microphoneState", "microphoneSwitchState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MicrophonesState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of microphone_state
        if self.microphone_state:
            _dict["microphoneState"] = self.microphone_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of microphone_switch_state
        if self.microphone_switch_state:
            _dict["microphoneSwitchState"] = self.microphone_switch_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MicrophonesState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "microphoneState": (
                    MicrophoneState.from_dict(obj["microphoneState"])
                    if obj.get("microphoneState") is not None
                    else None
                ),
                "microphoneSwitchState": (
                    MicrophoneState.from_dict(obj["microphoneSwitchState"])
                    if obj.get("microphoneSwitchState") is not None
                    else None
                ),
            }
        )
        return _obj

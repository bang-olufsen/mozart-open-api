# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from mozart_api.models.microphone_state import MicrophoneState


class MicrophonesState(BaseModel):
    """
    state of microphones, both physical switches and software state  # noqa: E501
    """

    microphone_state: Optional[MicrophoneState] = Field(None, alias="microphoneState")
    microphone_switch_state: Optional[MicrophoneState] = Field(
        None, alias="microphoneSwitchState"
    )
    __properties = ["microphoneState", "microphoneSwitchState"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MicrophonesState:
        """Create an instance of MicrophonesState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of microphone_state
        if self.microphone_state:
            _dict["microphoneState"] = self.microphone_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of microphone_switch_state
        if self.microphone_switch_state:
            _dict["microphoneSwitchState"] = self.microphone_switch_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MicrophonesState:
        """Create an instance of MicrophonesState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MicrophonesState.parse_obj(obj)

        _obj = MicrophonesState.parse_obj(
            {
                "microphone_state": MicrophoneState.from_dict(
                    obj.get("microphoneState")
                )
                if obj.get("microphoneState") is not None
                else None,
                "microphone_switch_state": MicrophoneState.from_dict(
                    obj.get("microphoneSwitchState")
                )
                if obj.get("microphoneSwitchState") is not None
                else None,
            }
        )
        return _obj

# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class PairedRemote(BaseModel):
    """
    PairedRemote
    """  # noqa: E501

    address: StrictStr
    app_version: Optional[StrictStr] = Field(default=None, alias="appVersion")
    battery_level: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(
        default=None, alias="batteryLevel"
    )
    db_version: Optional[StrictStr] = Field(default=None, alias="dbVersion")
    name: StrictStr
    serial_number: Optional[StrictStr] = Field(default=None, alias="serialNumber")
    updated: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = [
        "address",
        "appVersion",
        "batteryLevel",
        "dbVersion",
        "name",
        "serialNumber",
        "updated",
    ]

    @field_validator("updated")
    def updated_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(["app", "db"]):
                raise ValueError("each list item must be one of ('app', 'db')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PairedRemote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PairedRemote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "address": obj.get("address"),
                "appVersion": obj.get("appVersion"),
                "batteryLevel": obj.get("batteryLevel"),
                "dbVersion": obj.get("dbVersion"),
                "name": obj.get("name"),
                "serialNumber": obj.get("serialNumber"),
                "updated": obj.get("updated"),
            }
        )
        return _obj

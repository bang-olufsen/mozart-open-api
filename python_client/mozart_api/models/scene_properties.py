# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from mozart_api.models.action import Action
from typing import Optional, Set
from typing_extensions import Self


class SceneProperties(BaseModel):
    """
    SceneProperties
    """  # noqa: E501

    action_list: List[Action] = Field(
        description="An ordered list of Actions to run on the product",
        alias="actionList",
    )
    client_context: Optional[Annotated[str, Field(strict=True, max_length=4096)]] = (
        Field(
            default=None,
            description="An optional generic string property supplied from the client. If supplied it will overwrite any currently stored clientContext. If not supplied any stored clientContext will be left unchanged. ",
            alias="clientContext",
        )
    )
    label: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = Field(
        default=None,
        description="A list of user defined tags. This allows a client to create virtual lists",
    )
    __properties: ClassVar[List[str]] = ["actionList", "clientContext", "label", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SceneProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in action_list (list)
        _items = []
        if self.action_list:
            for _item in self.action_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict["actionList"] = _items
        # set to None if client_context (nullable) is None
        # and model_fields_set contains the field
        if self.client_context is None and "client_context" in self.model_fields_set:
            _dict["clientContext"] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict["label"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SceneProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "actionList": (
                    [Action.from_dict(_item) for _item in obj["actionList"]]
                    if obj.get("actionList") is not None
                    else None
                ),
                "clientContext": obj.get("clientContext"),
                "label": obj.get("label"),
                "tags": obj.get("tags"),
            }
        )
        return _obj

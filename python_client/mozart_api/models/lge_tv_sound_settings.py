# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator


class LgeTvSoundSettings(BaseModel):
    """
    LgeTvSoundSettings
    """

    digital_output: Optional[StrictStr] = Field(None, alias="digitalOutput")
    e_arc: Optional[StrictBool] = Field(None, alias="eArc")
    output: Optional[StrictStr] = None
    __properties = ["digitalOutput", "eArc", "output"]

    @validator("digital_output")
    def digital_output_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("auto", "passThrough", "pcm", "unknown"):
            raise ValueError(
                "must be one of enum values ('auto', 'passThrough', 'pcm', 'unknown')"
            )
        return value

    @validator("output")
    def output_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "tvSpeaker",
            "externalOptical",
            "externalArc",
            "bluetooth",
            "wisaSpeakers",
            "lineout",
            "headphone",
            "tvSpeakerAndExternalOptical",
            "tvSpeakerAndHeadphone",
            "tvSpeakerAndBluetooth",
            "externalArcBno",
            "unknown",
        ):
            raise ValueError(
                "must be one of enum values ('tvSpeaker', 'externalOptical', 'externalArc', 'bluetooth', 'wisaSpeakers', 'lineout', 'headphone', 'tvSpeakerAndExternalOptical', 'tvSpeakerAndHeadphone', 'tvSpeakerAndBluetooth', 'externalArcBno', 'unknown')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LgeTvSoundSettings:
        """Create an instance of LgeTvSoundSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LgeTvSoundSettings:
        """Create an instance of LgeTvSoundSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LgeTvSoundSettings.parse_obj(obj)

        _obj = LgeTvSoundSettings.parse_obj(
            {
                "digital_output": obj.get("digitalOutput"),
                "e_arc": obj.get("eArc"),
                "output": obj.get("output"),
            }
        )
        return _obj

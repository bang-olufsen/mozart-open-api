# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from mozart_api.models.playback_content_metadata import PlaybackContentMetadata
from mozart_api.models.playback_progress import PlaybackProgress
from mozart_api.models.rendering_state import RenderingState
from mozart_api.models.source import Source


class PlaybackState(BaseModel):
    """
    PlaybackState
    """

    metadata: Optional[PlaybackContentMetadata] = None
    progress: Optional[PlaybackProgress] = None
    source: Optional[Source] = None
    state: Optional[RenderingState] = None
    __properties = ["metadata", "progress", "source", "state"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlaybackState:
        """Create an instance of PlaybackState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict["metadata"] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict["progress"] = self.progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict["source"] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict["state"] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlaybackState:
        """Create an instance of PlaybackState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlaybackState.parse_obj(obj)

        _obj = PlaybackState.parse_obj(
            {
                "metadata": PlaybackContentMetadata.from_dict(obj.get("metadata"))
                if obj.get("metadata") is not None
                else None,
                "progress": PlaybackProgress.from_dict(obj.get("progress"))
                if obj.get("progress") is not None
                else None,
                "source": Source.from_dict(obj.get("source"))
                if obj.get("source") is not None
                else None,
                "state": RenderingState.from_dict(obj.get("state"))
                if obj.get("state") is not None
                else None,
            }
        )
        return _obj

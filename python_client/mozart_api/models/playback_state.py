# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from mozart_api.models.playback_content_metadata import PlaybackContentMetadata
from mozart_api.models.playback_progress import PlaybackProgress
from mozart_api.models.rendering_state import RenderingState
from mozart_api.models.source import Source
from typing import Optional, Set
from typing_extensions import Self


class PlaybackState(BaseModel):
    """
    PlaybackState
    """  # noqa: E501

    metadata: Optional[PlaybackContentMetadata] = None
    progress: Optional[PlaybackProgress] = None
    source: Optional[Source] = None
    state: Optional[RenderingState] = None
    __properties: ClassVar[List[str]] = ["metadata", "progress", "source", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlaybackState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict["metadata"] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict["progress"] = self.progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict["source"] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict["state"] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlaybackState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "metadata": (
                    PlaybackContentMetadata.from_dict(obj["metadata"])
                    if obj.get("metadata") is not None
                    else None
                ),
                "progress": (
                    PlaybackProgress.from_dict(obj["progress"])
                    if obj.get("progress") is not None
                    else None
                ),
                "source": (
                    Source.from_dict(obj["source"])
                    if obj.get("source") is not None
                    else None
                ),
                "state": (
                    RenderingState.from_dict(obj["state"])
                    if obj.get("state") is not None
                    else None
                ),
            }
        )
        return _obj

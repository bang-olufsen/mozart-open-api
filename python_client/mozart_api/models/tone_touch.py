# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from mozart_api.models.tone_touch_type import ToneTouchType


class ToneTouch(BaseModel):
    """
    ToneTouch
    """

    x: Optional[ToneTouchType] = None
    y: Optional[ToneTouchType] = None
    __properties = ["x", "y"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ToneTouch:
        """Create an instance of ToneTouch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of x
        if self.x:
            _dict["x"] = self.x.to_dict()
        # override the default output from pydantic by calling `to_dict()` of y
        if self.y:
            _dict["y"] = self.y.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ToneTouch:
        """Create an instance of ToneTouch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ToneTouch.parse_obj(obj)

        _obj = ToneTouch.parse_obj(
            {
                "x": ToneTouchType.from_dict(obj.get("x"))
                if obj.get("x") is not None
                else None,
                "y": ToneTouchType.from_dict(obj.get("y"))
                if obj.get("y") is not None
                else None,
            }
        )
        return _obj

# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from mozart_api.models.action import Action


class SceneTriggerBaseProperties(BaseModel):
    """
    Base properties for a scene trigger  # noqa: E501
    """

    action_list: Optional[conlist(Action)] = Field(
        None,
        alias="actionList",
        description="An ordered list of Actions to run on the product",
    )
    scene_list: Optional[conlist(StrictStr)] = Field(
        None, alias="sceneList", description="A list of scenes"
    )
    __properties = ["actionList", "sceneList"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SceneTriggerBaseProperties:
        """Create an instance of SceneTriggerBaseProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in action_list (list)
        _items = []
        if self.action_list:
            for _item in self.action_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict["actionList"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SceneTriggerBaseProperties:
        """Create an instance of SceneTriggerBaseProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SceneTriggerBaseProperties.parse_obj(obj)

        _obj = SceneTriggerBaseProperties.parse_obj(
            {
                "action_list": [
                    Action.from_dict(_item) for _item in obj.get("actionList")
                ]
                if obj.get("actionList") is not None
                else None,
                "scene_list": obj.get("sceneList"),
            }
        )
        return _obj
